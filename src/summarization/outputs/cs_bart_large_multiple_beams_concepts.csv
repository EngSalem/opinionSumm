reflections,oracle,concepts,generated_summary_beam1,generated_summary_beam2,generated_summary_beam3,generated_summary_beam4,generated_summary_beam5
"nothing in particular Quicksort code quick.java trace quick sort partitioning code What you do when your pivot is the smallest or largest value Nothing Exact implementation details of quick sort the tree of execution for mergesort Nothing implementation of quicksort Some parts of the quick sort algorithm Run times for the sorts is mergesort a tree execution ? How do recursive sorting methods have faster run times if generally iterative approaches are faster tree execution trace The power of different pivots in quick sort I think it was fine , although I did get the first of the QoTDs wrong . That 's more of a jab at my deductive reasoning skills rather than Dr. Ramirez 's teaching . I did n't realize that it was O -LRB- logN -RRB- for the entire Merge Sort and O -LRB- N -RRB- for each separate time it split up . I thought that , if it split up N times , then made sense that the entire sort was O -LRB- N -RRB- and the smaller ones O -LRB- logN -RRB- . If anything I explained here is wrong , maybe that 's the feedback in of itself , but I 'm learning ! Nothing was really muddy from today . It was a little complicated to understand Big-O run time of Merge Sort pivot The implementation of these algorithms is always confusing at first . A hands on approach will help me though Merge sort used non constant amount of extra memory @extractive",Most of the students had problems with the implementation of quick sort and merge sort . Some students had problems with pivot and runtime of the algorithms .,"['extra memory', 'quick sort', 'sorting method', 'constant amount', 'run time', 'separate time']",Most students found the implementation of the quick sort algorithm and the merge sort algorithm mostly confusing. Some students also had trouble with the run time of the tree of execution and the power of different pivots in the algorithm.,Most students found the implementation of quick sort and mergesort to be the most challenging part of this lecture. Some students also struggled with the run time of quicksort and the power of different pivots in the algorithm.,"In this lecture, students mostly had trouble with the implementation of quicksort and the merge sort. They also had trouble understanding the run-time of the sort and the power of different pivots in quick sort.","In this lecture, students mostly had trouble with the implementation of quicksort, the run-time of mergesort, and the power of different pivots in quick sort. Some students also had trouble understanding the log-N -RRB- difference between the smaller and larger values.","In this lecture, students mostly had trouble with the implementation of quicksort and mergesort. They also had trouble understanding the run-time of quick sort and the power of different pivots in the algorithm."
"some realistic applications for binary trees at their introduction would have helped visualize them Why we didnt learn iterators at the beginning of the term how to actually code the trees trees mathematical analysis minimum size of a binary tree How to iterate through a tree Exact implementation of trees None Iterators still are a bit confusing . Maybe walking through the example one more time would be helpful . I understood everything I 'm not sure why we would need a tree or how it could be implemented Can trees be connnected to eachother ? Iterators are generally still confusing me . How to set them up and when they are necessary . how to actually set up nodes with multiple references I 'm going to explain what I learned . Iterators/Iterables work together ; Iterable can only be used with Iterators to do for each loop like tasks . Tree structures have parent , interior , and leaf types within the structure ; it also iterates with recursive backtracking , unlike linear structures . If any of this is wrong , perhaps that 's what could be elaborated on . How efficient is it to get around in a binary tree ? If I wanted to look for a certain value , I feel like it would take much longer to get to than a linked list , or other data structure would . I do not think I had enough time for the second clicker question . There were too many options ... it was hard to pick based upon the time provided . I like it when you give a maximum of four options to pick from . That is less stressful . Uhh , probably how to evaluate binary trees , having to go up and down constantly . recursive definition of trees N/a today What those uses are exactly I would be interested in knowing more about . Nothing @extractive","Students seems still new to the idea of trees , as well as iterators . Trees seemed to bring up general confusions with following references , to traverse and link together structures . Few students had no confusions . Some asked about the potential uses of trees in practice .","['linked list', 'binary tree', 'data structure', 'recursive definition']","Most students found the binary tree and iterators confusing. They also struggled with the recursive definition of trees, and the use of iterators. Some students also had trouble with the application of the trees.","In this lecture, the students mostly had trouble with the implementation of binary trees and iterators. They also had trouble understanding how to set up the nodes in a tree, and how to iterate through the structure. Some students also struggled with the recursive definition of trees, and the use of iterators/Iterables.","In this lecture, students mostly had trouble understanding how to iterate through a binary tree, and how to set up iterators. They also had trouble with the recursive definition of trees, and the application of the trees.","In this lecture, students mostly had trouble with the implementation of binary trees, iterators, and the recursive definition of trees. Some students also had trouble understanding how to set up the nodes in a tree, and how to iterate through a tree.","In this lecture, students mostly had trouble with binary trees, iterators, and the recursive definition of trees. Some students also had trouble understanding the use of iterators and how to set them up."
"overall very interesting and fun to look at problems that are challenging but cool to play around with . tower of hanoi recursion example only took 4 lines Towers of Hanoi towers of Hanoi . and recursive checking Backtracking The recursive word search program Backtracking in 8 queens towers of hanoi problem the Towers of Hanoi only taking 4 lines of code . The recursive tree touched on at the end of class in the tower of hanoi problem . Recursion , recursion , and more recursion The towers of hanoi problem can be solved in 4 lines of code ! The towers recursion problem I think all of the potential applications of backtracking are very interesting Recursion problems I found the examples the most interesting and the way that our professor explained the examples was interesting as well . I loved the interactive game that you had students play . That 's a great idea for the classroom ! towers Hanoi Towers of Hanoi w / backtracking Hanoi towers - interesting to see how many recursions are required to solve an increasing amount of levels towers of hanoi Backtracking 's usefulness is truly great ; recursion is beautiful Today was pretty interesting . I really liked the find word -- I love boggle ! The Hanoi Tower simulation was cool to watch . @extractive","Students were interested by the Towers of Hanoi problem and the recursive form of its solution . They noted the backtracking technique used to implement the recursion , and some were surprised by how short the solution was . A couple students liked the word search problem .",[],Most students found the recursion problems and the backtracking examples interesting. They also found the Hanoi Tower problem interesting. Some students also found recursive checking and the find word search interesting.,"Most students found the recursion problem interesting. They also found the tower of hanoi problem interesting, and the recursive word search program interesting. A few students also mentioned the Hanoi Tower simulation and the game.",Most students found the recursion problem and the tower of hanoi problem to be the most interesting part of the lecture. They also enjoyed the recursive word search program and the Hanoi Tower simulation.,"In this lecture, students found the recursion problem and the tower of hanoi interesting. They also enjoyed the recursive word search program and the Hanoi Tower simulation.","In this lecture, students found the recursion problem and the tower of hanoi problem interesting. They also enjoyed the recursive word search program and the Hanoi Tower simulation."
"when recursion is a better option than a loop I thought it was clear . You need these 3 things for recursion to work ... But I kind of did n't understand if it were flexible ? Like , are the recursive/base cases the only cases strictly allowed ? Also , it is like the first one in is the first one out type of deal for the output , right ? ? Using recursion while searching Using recursion while searching tracing recursion when should I use recursion over iteration ? Recursion I found the wording of the question of the day confusing . Nothing stacks The mindset involved in thinking about non-mathematic problems recursively is something I 'll have to get used to . nothing When to use recursion efficiently I can understand how you run up the stack but I get confused about coming back down with more complex examples . Id love to go over the trace from 401 's final . There was not any point that was too muddy from today . The sequential search recursive implementation when a recursive algorithm would be most efficient More examples on recursive programs Why use recursive calls ? Are n't loops the same ? Everything was explained well . Iterating through list recursively : I really wish you would n't rush to cram one more thing in to the end of a lecture . Usually you explain stuff really really well , but the stuff that you always race to cram in to the last three minutes of the lecture never makes sense because you are flying through it . I would rather you take questions or something and wait until next class to go over that concept at .5 the speed it was gone over it the last three minutes of this class . None @extractive","Many students could not figure out when to use recursion over iteration . Some others had problems with stacks , sequential search recursion and tracing the recursion .","['sequential search', 'recursive algorithm']","Most students found recursion to be the most confusing concept of the day. They also had trouble with the examples given in class. Some students also had some trouble with tracing recursion, and the general concepts of the problem.","Most students found recursion to be the most interesting topic of the day. Some students also had trouble with sequential search, tracing recursion, and the last three minutes of class.","In this lecture, the students mostly had trouble with recursion. They also had some trouble with sequential search, tracing recursion, and the last three minutes of the lecture.","In this lecture, the students mostly had trouble with recursion. They also had some trouble with sequential search, tracing recursion, and the last three minutes of the lecture.","In this lecture, most students found recursion to be the most interesting topic of the day. Some students also had trouble with sequential search, tracing recursion, and the last three minutes of class."
"Analysis of trees and in particular binary trees through backtracking Arbitrary trees using adjacency trees to make coding more efficient The structures of trees and various types of trees binary trees Binary Trees Finding out what trees were Binary tree concept Recursive definition of the trees BSTs and how they are traversed . Recursion in binary trees I thought the introduction of binary trees was interesting Tree structures and leaves I found trees to be the most interesting because of their familiarity and the implementations of them . implementing trees and finding their height Today , we learned about Iterators and Iterables . We also started on tree structures/binary trees in comparison to linear structures . Binary trees are naturally traversed recursively , with base cases checking if a node is a leaf node in order to define a subtree . I liked learning about binary trees , it seemed very useful for future classes . Probably the fact we started binary trees today , especially full binary trees . trees structure Moving on from sorting Everything really ; binary trees , I imagine , will have plenty of practical uses . The nodes were interesting @extractive","Most students found binary trees and structure of trees as interesting . Some others liked recursive traversal , iterators and adjacency trees .",['binary tree'],"In this lecture, students enjoyed learning about binary trees, tree structures, and the recursive definition of the trees. They also enjoyed learning more about the applications of the concepts and implementing them.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting. Last, they found the analysis of trees interesting.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting, as well as the analysis of trees."
"nothing in particular 8 queens problem towers of hanoi example Nothing Not very much . questions about assignment 3 primarily Nothing Backtracking without looping for use in assignment 3 's indexOf method Some of the recursion was confusing but it just requires more tracing trace of towers of hanoi some of the ways we would trace through a backtracking problem still not quite confident with the actual physical implementation of recursive methods . None using recursion to find strings Without really having written my own backtracking program to understand the functionality , It 's hard to think about how it can be actually implemented none I think describing the binary recursive tree needs more time to be described . There were n't any muddy points from today . 8 queens How people come up with these algorithms Code specifics/sample code for backtracking implementation of word finer algorithm The implementation of backtracking Everything was well explained today . I have a few questions about the power functions . @extractive",Some students had problems with the implementation of backtracking and recursion . Some others had problems with tracing backtracking and tower of Hanoi .,"['recursive method', 'tracing trace', 'power function']","Most students found the implementation of the backtracking algorithm and the 8 queens problem mostly interesting. Some students also had questions about assignment 3, the binary recursive tree, and the power functions.","Students mostly had trouble with the implementation of the 8 queens problem, the assignment 3 method, and the binary recursive tree. Some students also had trouble understanding the trace of the towers of hanoi.",Students mostly had trouble with the implementation of the backtracking algorithm. Some students also had some trouble with assignment 3 and the recursion of the binary recursive tree. A few students had trouble understanding the 8 queens problem.,"In this lecture students mostly had trouble with the implementation of backtracking. Some students also had problems with assignment 3, the 8 queens problem, and the binary recursive tree.","In this lecture students mostly had trouble with the implementation of the backtracking algorithm. They also had some trouble with assignment 3, the 8 queens problem, and recursion."
"trees are the most interesting data structure so far , in my opinion . Recursively getting the height of a binary tree implementing trees in java to store data how to find the height of a binary tree recursively not much was interesting binary tree lengths Binary trees binary tree recursion Lecture felt a little long today though we got out earlier . Nothing struck me as particularly interesting . Binary Tree nodes The entire binary trees discussion Binary trees and how we can traverse them via recursion The height of a tree is found by calling max -LRB- hL , hR -RRB- +1 Recursive processing of binary trees @extractive",Almost all the students enjoyed the algorithm for determining the height of binary trees . A few others also mentioned binary trees and trees in general .,"['binary tree', 'data structure']",Most students found binary trees and recursion interesting. Some students also found the height of a binary tree interesting. A few students also mentioned using recursion and implementing trees in java.,"Most students found binary trees and recursion interesting. Some students also found the height of a binary tree interesting. A few students also mentioned the use of recursion and the length of a tree, and how to store data.","In this lecture students were interested in binary trees, recursion, and the height of a tree. Some students also found the length of a binary tree interesting, as well as implementing trees in java.","In this lecture students were interested in binary trees, recursion, and the height of a tree. Some students also found the length of a binary tree interesting.","In this lecture students were interested in binary trees, recursion, and the height of a tree. Some students also found the length of a binary tree interesting, as well as implementing trees in java."
"divide and conquer Recursion being applied to things we already have looked at and comparing how it affects the iterations . Also divide and conquer making recursion have less iterations is interesting . it will be more interesting to compare run-times 1 vs 2 recursive calls in a recursive method I 've never heard of divide and conquer before ! Divide and Conquer recustion Seeing how much more efficient the divide and conquer power method was versus the original method why sequential search through recursion is slower than binary search through recursion efficiency of divide and conquer The number of multiplications that each method of recursion yields How dividing and conquering works recursion with bubble sort concepts The divide and conquer for X ^ N and its efficiency Divide and Conquer method Divide in conquer as an efficient way to recurse I thought it was interesting finding actual cases of recursion being the most efficient method RECURSION :D I found the visuals and accompanying drawings the most interesting . The recursive case for the power function The differentiation between -LRB- x ^ / -LRB- n/2 -RRB- -RRB- ^ 2 and multiplying -LRB- x ^ -LRB- n/2 -RRB- -RRB- * -LRB- x ^ -LRB- n/2 -RRB- -RRB- was pretty interesting today . binary search in recursion Recursion via divide and conquer Divide and Conquer The idea of ` dividing and conquering , ' and it 's runtime comparison to general recursive methods @extractive","The students were interested in applying the divide and conquer method to recursive methods . They noted the comparison of efficiency between different recursive techniques , and cited specific examples of using recursion , such as in the computation of powers and in binary search .","['sequential search', 'original method', 'power method', 'recursive method', 'power function', 'binary search']","Most students found the divide and conquer method interesting. They also found recursion, the power function, and the number of multiplications that each method of recursion yields interesting.","Most students found recursion and the divide and conquer method interesting. They also found binary search through recursion, the power function, and the number of multiplications that each method of recursion yields interesting.","In this lecture, students enjoyed learning about the efficiency of recursion, the power function, and dividing and conquering. They also enjoyed comparing run-times of various recursive methods, and the number of iterations in a recursive method.","In this lecture, students were interested in the efficiency of the divide and conquer method, recursion, and the power function. They also found binary search through recursion and the number of multiplications that each method of recursion yields interesting.","In this lecture, students were interested in the efficiency of the divide and conquer method, recursion, and the power function. They also found binary search through recursion and the number of multiplications that each method of recursion yields interesting."
"Packages were interesting , and how you can group together various classes and import them through the package BST 's the different ways to traverse the trees the funny sound effects that Ramirez made blt 's Binary Search Trees Binary search trees Tree traversal types The binary search tree , and why duplicates might be problematic I guess the different types of traversals for binary trees . Copying a tree Tree Transversing Binary trees Binary Search Trees are pretty cool . They show how trees can be useful . Nothing stood out today All the recursion in binary trees @extractive","Students mentioned binary trees , and binary search trees in particular . They noted that they talked about recursive traversal methods .","['binary tree', 'binary search', 'binary search tree']",Most of the students found Binary Search Trees and Tree traversal interesting. They also enjoyed the various types of traversal and the various classes that are available.,"Most students found Binary Search Trees and Tree traversal interesting. They also found Recursion in Binary Trees interesting. Some students also mentioned the various classes and import them through the package, and the sound effects that were used.","Most students found Binary Search Trees and Tree traversal interesting. They also found Recursion in Binary Trees interesting. Last, a few students mentioned the various packages and how they were used.","Most students found Binary Search Trees and Tree traversal interesting. They also were interested in Recursion in Binary Trees, and the various types of traversal in the package.","Most of the students found Binary Search Trees interesting. They also found Tree traversal types interesting, and the various ways to group together various classes and import them through the package. Last, a few students mentioned Recursion in Binary Trees as their favorite."
"nothing in particular 8 queens problem towers of hanoi example Nothing Not very much . questions about assignment 3 primarily Nothing Backtracking without looping for use in assignment 3 's indexOf method Some of the recursion was confusing but it just requires more tracing trace of towers of hanoi some of the ways we would trace through a backtracking problem still not quite confident with the actual physical implementation of recursive methods . None using recursion to find strings Without really having written my own backtracking program to understand the functionality , It 's hard to think about how it can be actually implemented none I think describing the binary recursive tree needs more time to be described . There were n't any muddy points from today . 8 queens How people come up with these algorithms Code specifics/sample code for backtracking implementation of word finer algorithm The implantation of backtracking Everything was well explained today . I have a few questions about the power functions . @extractive","Many students were n't confused by anything in particular . The confusions that arose were mostly on the backtracking techniques used in the solution of the towers of hanoi and 8 queens problems . Some students were unsure of how they would implement the solution , and otheres were unsure of how to trace the solution they were given .","['recursive method', 'tracing trace', 'power function']","Most students found the backtracking problem mostly interesting. Some students also found the 8 queens problem and the recursive methods interesting. A few students had trouble with assignment 3, the binary recursive tree, and the power functions.","Most students had no issues. Some students had trouble with the backtracking algorithm, and the assignment 3 method. A few students also had some trouble with recursion and the power functions.","Students mostly had trouble with the backtracking algorithm, the assignment 3 method, and the 8 queens problem. Some students also had some trouble with recursion and the binary recursive tree.","In this lecture students mostly had trouble with the backtracking algorithm, the assignment 3 method, and the 8 queens problem. Some students also had some trouble with recursion and the binary recursive tree.",In this lecture students mostly had trouble with the implementation of backtracking algorithms. They also had some trouble with assignment 3 and recursion. Some students also had trouble understanding the 8 queens problem.
"Analyzing run-times to optimize algorithms Learning about Big-O , as I 've seen it used numerous times but never really understood it . It was great to hear the different types of efficiency for various operations . Learning run-times of ADTs in depth is interesting as well as analyzing the math behind them . Different ways to assume the run time of a program . big o big O notation The amount of math data structures require . The math behind the log_2 -LRB- N -RRB- for binary search amortized time Big O How to calculate algorithmic runtimes Big O !! ! That chart at the end showing how it was more efficient to double array size every time . Amortized time Big-O Functions calculating algorithms without writing them in code I thought it was pretty interesting how you do n't need to have an algorithm implemented to test its efficiency Runtimes So we actually cut out a lot of math when calculating these run-times -LRB- depending on the equation -RRB- . I found the lecture really interesting because the math explained was done slowly so that everyone understood . Asymptotic was really interesting and made a lot of sense ... I 'm interested to see what other problems look like -LRB- as far as coming up with the formula myself is concerned -RRB- Deriving the big O for binary search big o Asymptotic computation of run times ' Analyzing instructions and time to run algorithms with different methods Big O Algorithm testing The parallels between math that I 've learned and CS stuff I 'm learning now are always nice to find . Today 's lecture was okay . I know I will struggle with finding equations for the big o. @extractive","Almost all the responses had something to do with algorithm efficiency . Some students enjoyed the math , others the introduction of Big O notation , and others the practicing of analyzing algorithm efficiency in general .","['amortized time', 'data structure', 'run time', 'binary search']","In this lecture students enjoyed learning about the various algorithms and the run-times of algorithms, as well as the math behind them. They also enjoyed learning the difference between the asymptotic and the log_2 notation.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all, and the parallels between the two."
"Everything involving summation is confusing Why the author is so convoluted What is the use of a tree the difference between a full tree and a complete tree The full vs complete tree distinction was confusing at first , but Ramirez clarified it later in the lecture . binary tree lengths algorithms Everything was well explained Complete Tree Some of the deriving for the minimum height Some of the ways we will get information from the tree . How do we edit trees efficiently ? When would I want to use these ? Author 's implementation of binary tree @extractive",The most reported answer was the distinction between full and complete trees . Other responses included the author 's implementation of binary trees and determining the height of a tree .,"['binary tree', 'minimum height', 'complete tree']","Most students found the binary tree and complete tree concepts confusing. Some students also had trouble with the summation algorithm, and the difference between a full and a complete tree.","Most students had trouble with the binary tree, the difference between a full and a complete tree, and the summation algorithm. Some students also had trouble understanding the differences between the two.",Most students had trouble with the use of a binary tree and the difference between a full tree and a complete tree. Some students also had trouble understanding summation algorithms and editing trees.,In this lecture students had trouble understanding the difference between a full tree and a complete tree. They also had trouble with the binary tree and the summation algorithm.,In this lecture students had trouble understanding the difference between a full tree and a complete tree. They also had trouble with the binary tree and the summation algorithm.
"Is there an easier way to remove nodes when a node has 2 children ? the code for removing a node with more than one child the delete method for an inner node was a little unclear Quiz2 how do you Fergie ab nor how delete works Add -LRB- -RRB- for BST I think the examples on the board were confusing and could be put in the PowerPoint to be more easily understood . Removing from a binary search tree Run time analysis add and remove Why did I stay up so late last night How we decide and how to remove a node with two children . How binary search trees implement various methods It was not confusing The implementation of some of the methods like add and remove . The explanation was fine , but the code was pretty hard to examine . The interface used to navigate a bst Iterative implementations of BST methods @extractive","Most of the students found deleting and adding nodes to a BST as confusing . Some of them had problems with implementing various BST methods , run time analysis and the interface used to navigate binary search tree .","['binary search', 'binary search tree']","Most of the students found the implementation of the binary search tree methods and the delete method confusing. Some students also had trouble with add and remove, and the binary tree interface.","Most of the students had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also had trouble understanding the implementation of BST methods.","In this lecture students mostly had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also had trouble understanding the implementation of BST methods.","In this lecture, students mostly had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also struggled with the implementation of BST methods, and the quiz.","In this lecture students mostly had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also had trouble running time analysis and understanding the implementation of BST methods."
Binary Tree functions how to delete a node using its successor and predecessor implementation of methods on binary search trees and the speed of searching a tree as opposed to a list Removing a node with 2 children deleting interior nodes in a tree search arrays and binary search trees the same way BST I found the diagrams on the PowerPoint easy to understand and interesting . Binary Search Trees Adding to a binary search tree Binary tree method implementation bst I honestly do n't remember what happened Probably the ` dictionary ' commands of trees . How a binary search tree implements various methods All the recursion was beautiful The different ways to manipulate and obtain data from BSTs . Removing nodes in a BST depends on how many children the node has The similarities between traversing a binary search tree and using a binary search on a sorted array @extractive,"The students were again interested by the BST data structure , and it 's methods for manipulating data contained within . They noted comparisons to previous discussions of binary searches in other data structures such as the array and list .","['tree search', 'sorted array', 'binary search', 'binary search tree']","Most students found the binary search tree and its methods interesting. They also enjoyed the different ways to manipulate and obtain data from BSTs, the differences between a binary search and a sorted array, and the different methods implemented in a BST.","Most students found the binary search tree and its methods interesting. They also enjoyed the different ways to manipulate and obtain data from BSTs, the differences between a binary search and a sorted array, and deleting a node.","In this lecture students enjoyed learning about binary search trees, how to delete a node, and the different ways to manipulate and obtain data from BSTs. They also enjoyed searching a tree as opposed to a list.","In this lecture students enjoyed learning about binary search trees, how to delete a node in a tree, and the different ways to manipulate and obtain data from a binary search tree.","In this lecture students enjoyed learning about binary search trees, how to delete a node in a tree, and the different ways to manipulate and obtain data from BSTs. They also enjoyed using a sorted array."
"Analyzing run-times to optimize algorithms Learning about Big-O , as I 've seen it used numerous times but never really understood it . It was great to hear the different types of efficiency for various operations . Learning run-times of ADTs in depth is interesting as well as analyzing the math behind them . Different ways to assume the run time of a program . big o big O notation The amount of math data structures require . The math behind the log_2 -LRB- N -RRB- for binary search amortized time Big O How to calculate algorithmic runtimes Big O !! ! That chart at the end showing how it was more efficient to double array size every time . Amortized time Big-O Functions calculating algorithms without writing them in code I thought it was pretty interesting how you do n't need to have an algorithm implemented to test its efficiency Runtimes So we actually cut out a lot of math when calculating these run-times -LRB- depending on the equation -RRB- . I found the lecture really interesting because the math explained was done slowly so that everyone understood . Asymptotic was really interesting and made a lot of sense ... I 'm interested to see what other problems look like -LRB- as far as coming up with the formula myself is concerned -RRB- Deriving the big O for binary search big o Asymptotic computation of run times ' Analyzing instructions and time to run algorithms with different methods Big O Algorithm testing The parallels between math that I 've learned and CS stuff I 'm learning now are always nice to find . Today 's lecture was okay . I know I will struggle with finding equations for the big o. @extractive","Many students found Big O notation and optimizing runtimes as most interesting concepts . Some others found analyzing efficiency of algorithms , asymptotic notation and amortized time as interesting .","['amortized time', 'data structure', 'run time', 'binary search']","In this lecture students enjoyed learning about the various algorithms and the run-times of algorithms, as well as the math behind them. They also enjoyed learning the difference between the asymptotic and the log_2 notation.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all, and the parallels between the two."
"visualization of linked bags on the board is really interesting and helpful for understanding nodes . How to manipulate a bag of nodes how to remove an item from a linked list Nodes in linked lists are n't necessarily permanently tied to the data they point to . I liked the points about the linked bag The way nodes are set up and used in a linked list . adding to the linked bag The order of the node does n't matter , and the removal methods . The different methods associated with the linkedbag How you can navigate around a set of nodes . Learning about the methods used to modify linked bags . The adding and removing of a linked bag Adding a node to a linked list occurs at the start of the list because it is much easier than adding to the end . Adding an element to a linked list occurs at the start of the list since it is much easier than the end . Some object-oriented purists believe it is better to never ` violate ' the private nature of a class ' data . I found linked lists to be the most interesting point of the lecture . Seeing how they differ from the bag and in what circumstances they are useful . I thought the different ways to implement the Node class itself were interesting , especially because it helps show the divide between simplicity of code and adaptability of its functionality -LRB- private inner class VS public outer -RRB- linkedbags Since last lecture , we have been trying to find more efficient ways of making useable ` arrays . ' I find this helpful because , even though the new 2x array is not too difficult -LRB- we used it in my last CS 401 assignment last semester -RRB- , I was wondering if there were better ways to implement ` resizable ' arrays . So , learning about linked list today may be helpful for more manageable array-included tasks in the future . I found the topics we discussed in class today the most interesting . Linked bag ! lists vs bags The list follows a pattern for adding entries that is opposite to a bag . Learning about the Linked List Implimentation of linked lists in bags The concept of the linked list is n't something that really has a real world parallel , so to learn about it and its implementation was interesting . I liked talking about the bag . I definitely thought the adding to the front was an important point to make -- as opposed to arrays adding in the back . @extractive",Many students found the implementation of linked lists and linked bags as most interesting . They also liked add/remove methods in lists and bags . Some of them found the differences between bags and lists as interesting .,"['linked list', 'private nature', 'real world']","In this lecture, students found the concept of the linked lists and the linked bag interesting. They also found adding and removing a node in a linked list and the methods used to modify them interesting.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify the linked bag. They also enjoyed learning about arrays, and the differences between the private and public classes.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify a linked list. They also enjoyed learning about the different ways to implement the Node class, and the differences between the private and public classes.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify the linked bag. They also found the ` resizable'array and the private inner class interesting.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify the linked bag. They also found the ` resizable'array and the private inner class interesting."
"implementation of a sorting algorithm with divide and conquer definitely made my understanding of the whole divide and conquer method better Shellsort faster to do some other stuff and then insertionSort than to do insertionSort by itself Merge sort shell sort Shell sort Shellsort algorithm mergesort Comparison between sorting methods mergesort !! ! Shell sort I thought the most interesting thing from today was how merge sort works and how much better it is from the simple sorts MergeSort Shell sort was interesting because of its improved runtime over insertion sort strategies implementing smaller arrays to sort a larger array faster merge sort and insertion sort merge sort and insertion sort * merge sort * shellsort Both of these are useful to learn , considering that nearly all the other methods we 've learned so far are O -LRB- N -RRB- , which is pretty inefficient . I found the material the most interesting . I 've never heard of shellsort before ! Merge sort was pretty interesting today , learning about the new sorts was also fun . mergesort merge sort Sorting is always cool to talk about . Shellsort @extractive","Most of the students found shell sort and merge sort as interesting . A few students liked insertion sort , comparison of different sorting methods and the concept of divide and conquer .","['sorting algorithm', 'sorting method', 'larger array', 'merge sort', 'insertion sort']",Most students found merge sort and shell sort interesting. They also found the new algorithm and the differences between the two methods interesting. Some students also found insertion sort and the divide and conquer method interesting.,Most students found merge sort and shell sort interesting. They also found insertion sort and the divide and conquer method interesting. Some students also found O-LRB- N -RRB- and the runtime of the algorithm interesting.,"In this lecture, students enjoyed learning about merge sort, shell sort, and the new divide and conquer method. They also enjoyed comparing the efficiency of the various sorting methods and the runtime of each.","In this lecture, students enjoyed learning about merge sort, shell sort, and the new divide and conquer method. They also enjoyed comparing the efficiency of the various methods and learning about the new ones.",Most of the students found merge sort and shell sort interesting. They also found insertion sort and the divide and conquer method interesting. Some students also found O -LRB- N -RRB- and the runtime of the algorithm interesting.
"I thought it was useful to learn more about the Towers of Hanoi problem . How bad the simple sorts are insertion sort is not efficient Simple Sorting sorting methods Doing insertion sort with only 1 array Applying sorting methods to linked lists rather than arrays InsertionSort how to do insertion sort The way the towers of Hanoi trace worked Reviewing the exam stats That all simple sorts are O -LRB- n ^ 2 -RRB- Sorting algorithms that I knew already are inefficient . The fact that various simple sorting algorithms all have the worst-case run-time of O -LRB- N ^ 2 -RRB- I thought that it was interesting that all of the simple sorts we discussed , though some are more popular than others , all have the same big O Runtime insertion sort and reviewing the exam bubblesort Insertion sort We learned that all these sorts -- Insertion , Selection , Bubble ... all their Big-O run-times are awful , but we 're learning about efficient sorts after break . The solution to the Tower of Hanoi problem Thought analyzing the various sorts we 've done before but this time with an eye for efficiency was pretty fun . The sorting algorithms I thought the towers of hanoi trace really helped from last class . Sorts The ways to sort groups of data , specifically the simplicity of some of them Today the binary tree was explained very well . The handout was super helpful . @extractive","Students discussed the analysis of simple sorting methods , bubblesort , selection sort , and an emphasis on insertion sort . They noted the inefficiency of these simple algorithms , and the Big-O runtime of O -LRB- n ^ 2 -RRB- . Some students also mentioned the trace of the towers of hanoi problem .","['linked list', 'sorting algorithm', 'simple sorting', 'binary tree', 'sorting method', 'insertion sort']","Most students found the simple sorting algorithms interesting. They also enjoyed learning about the Tower of Hanoi problem, the insertion sort, and the exam stats.",Most students found simple sorting methods to be the most interesting part of this lecture. They also found the towers of Hanoi problem interesting. Some students also found insertion sort and the exam stats interesting.,"In this lecture, students enjoyed learning about the various simple sorting algorithms, including insertion sort, selection, and bubble. They also found the towers of Hanoi problem and the exam stats interesting.","In this lecture, students enjoyed learning about the various simple sorting algorithms, including insertion sort, selection, and bubble. They also found the towers of Hanoi problem interesting.","In this lecture, students enjoyed learning about the various simple sorting algorithms, including insertion sort, selection, and bubble. They also found the towers of Hanoi problem interesting."
"the tweaking of quicksort showed how we will probably be expected to think at an actual job and helped realize the importance of sorting in place , especially when looking at the default Java sorting algorithms -LRB- because of Java 's use of Objects -RRB- . Stable sorting if you always choose the median as the pivot , quicksort behaves like mergesort the optimizations for quick sort How inefficient quick sort can be if done improperly Effects of different pivot points in quick sort that changing how the pivot is chosen can change a sorted areay from the worst case to the best case The different runtimes for quick sort The idea that sorting in place is so important and speeds up sort times . Quick sort runtime I thought the notion of stability when it comes to sorting was interesting I thought the notion of stability when it comes to sorting was interesting mergesort I found it interesting to see which sorting algorithms java uses , as those are likely the most efficient for various circumstances . the TimSort because it is my name everything about quick sort and merge sort , there was so much We went more in depth to the specifics of MergeSort and QuickSort ; run-time , I especially remember . QuickSort is not stable in the way that it swaps identical values . The JDK does not use it for this reason . I always think learning about performance is cool ! Contrasting between the run times of QuickSort and MergeSort sorting Variations of QuickSort The idea that quicksort is generally faster than merge sort because of the latter ' overhead of not sorting in place Stability was interesting . I never considered this before . @extractive","Most of the students found quick sort , merge sort and their runtimes as interesting . Some of them found the notion of stability and the effects of choosing different pivots on quick sort algorithm as interesting .","['actual job', 'sorting algorithm', 'quick sort', 'run time', 'merge sort']","In this lecture, students found the idea of sorting in place and the various runtimes for quick and merge sort interesting. They also found the differences between the two algorithms interesting.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also liked learning about how the various runtimes for quick sort affect sorting in general.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also found the idea of sorting in place interesting, as well as the different runtimes for quick sort.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also found the idea of sorting in place interesting, as well as the different runtimes for quick sort.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also found the idea of sorting in place interesting, as well as the different runtimes for quick sort."
"some actual code to go with the examples would have been helpful , but we covered a lot of material so it was understandable Managing nodes via a doubly circular linked list the runtimes of doing a queu with an array or linked list Queues implementation of a queue vs a stack H ! -LRB- 0N $ R. | m H@NGR ¥",The vast majority of students are confused about implementing queues . Some other responses include circular/doubly linked lists and how queues are used .,"['linked list', 'actual code']","In this lecture students enjoyed learning about Queues, the runtimes of a queue, and the differences between a stack and a linked list. They also enjoyed Managing nodes via a doubly circular linked list the run-times of an array and a stack.","In this lecture, students were mostly interested in Queues and the runtimes of doing them. They also enjoyed Managing nodes via a doubly circular linked list.","In this lecture, students were mostly interested in Queues, the runtimes of a queue, and managing nodes via a doubly circular linked list.","In this lecture students enjoyed learning about Queues, the runtimes of an array or linked list, and Managing nodes via a doubly circular linked list.","In this lecture students enjoyed learning about Queues, the runtimes of an array or linked list, and Managing nodes via a doubly circular linked list."
"understanding what you are able to divide to speed up the run time nothing in particular Determining big O of the functions could have used some more discussion I did n't fully understand some of the ` base cases ' Recursion How to call base case The math involved with determining a method effieciency the end of the lecture -LRB- second qotd -RRB- none How to implement the X ^ N = X ^ N/2 * X ^ N/2 , as it has two method calls in one line ? Why should we use a recursion instead of Math.pow -LRB- x , n -RRB- ? recursion with bubble sort implementation The divide and conquer of binary search How do you find and choose the indices ? how to use indices to divide the runtime The divide and conquer idea is a little foreign , and it seems like it might be difficult to establish what is the best way to do something none I thought that going through actual code was a little rushed and confusing . How to find the most efficient recursive case The special cases with reducing the exponent when it 's odd when n = 1 , but eventually I got it after some thought . -LRB- formula : x ^ n = x * -LRB- x ^ -LRB- n/2 -RRB- -RRB- -RRB- optimizing recursion Specifics of divide and conquer Maybe explain how the divide and conquer method works effectively with the power function , when squaring the n/2 exponent Being able to identify when divide and conquer might be more useful than typical recursion @extractive",Many students had problems in understanding divide and conquer in different implementations . They also had problems in understanding recursion in different cases . Some of the students found the math involved in calculating efficiency as confusing . A very few students had problems in using indices and basecases .,"['actual code', 'run time', 'power function', 'binary search']","Most students found the divide and conquer method to be the most efficient way to divide the runtime, and the recursion to be a useful exercise. Some students also found the base case of the function and the algorithm to be helpful.",Most students found the divide and conquer method to be the most efficient way to divide the runtime. Some students also found recursion and the base case of the power function interesting.,"In this lecture, the students mostly found the divide and conquer method to be the most efficient way to divide the runtime. They also found recursion and the base case to be helpful.","In this lecture, the students mostly found the divide and conquer method interesting. They also found recursion and the base case of the power function interesting, as well as the runtime of the function.","In this lecture, students mostly found the divide and conquer method to be the most efficient way to divide the runtime. They also found recursion and the base case to be helpful."
"Ways to use the predefined ListInterface analyzing all of the special cases of linked lists and how they are handled as well as learning ` assert ' Keeping track of both the front and end of a linked list . I thought it was useful to hear more about the ` List ' class - I had never heard of that in 0401 . Learning how to remove nodes in a linked list I found the concepts of linked lists and going through example code rather interesting The topic of LinkedLists always intrigued me The various special cases when removing elements from a linkedlist special cases for linked list The different methods of removing and adding to the ADT . Implementation of linked lists How a LL and bag are different when it comes to implementation . Learning how to delete the first node of a linked list Assert LinkedLists can be implemented in many different ways depending on the application . How linked lists can be used when you need first in first out or last in first out . The flexibility of using lists I think learning how to apply a linked chain of nodes to a linked List was interesting , because it 's a new way of thinking about storing and arranging data and I can start to understand how a useful ADT like a List that is very powerful in Python is implemented and constructed linked lists and standard lists The visuals made to explain LinkedList . I thought it was interesting how deleting something can sometimes mean just deleting it view , or logical deletion . The whole thing is just very intuitive and normal cases seem very easy to handle . linked structures Removing nodes and special cases ' Adding/removing styles with lists and different benefits/drawbacks with adding and storing addresses as instance data to speed up operations while complicating methods Prof Ramirez 's sound effects Some of the implementation details regarding the LinkedList were more intuitive than I thought they 'd be Today we talked about linked list and some of the major differences between them and bags . We looked at remove and add methods . @extractive","Most of the students found the implementation of linked lists and removing nodes from them as interesting . Some of the students liked the differences between linked lists and bags , assert , adding nodes to linked lists .","['linked list', 'instance data', 'linked chain']","In this lecture, students enjoyed learning about the various ways to use a linked list, the various special cases of removing and adding to a linkedlist, and the various methods of implementing the ADT. They also enjoyed learning how to use the ListInterface, and Assert.","In this lecture, students enjoyed learning about the different ways to implement a linked list, and the various special cases of removing and adding to the ADT. They also found the ` List'class interesting.","In this lecture, students enjoyed learning about the different ways to implement a linked list, and the various special cases of removing and adding to the ADT. They also found the ` List'class interesting.","In this lecture, students enjoyed learning about the different ways to implement a linked list, and the various special cases of removing and adding to the ADT. They also found the ` List'class and the ` Assert'method interesting.","In this lecture, students enjoyed learning about the different ways to use a linked list, the various special cases of a linkedlist, and the implementation details of the ADT. They also found the ` List'class interesting."
"Some of the math None There was n't really anything muddy about today 's lecture that I can think of . I feel like we did n't really learn what the O value actually IS or what the word itself means , just that it is used for calculating the run time Figuring out the function for the actual run time . the add item example doubling the array time analysis How to modify things to increase efficiency amortized time with the resizable array The ordering Just more practice examples on calculating runtimes Some of the derivations of the functions we are using How N ^ k-1 Becomes big O notation Deriving the Big-O for binary search What is the best way to calculate run-time for algorithms ? the math-y part was a bit confusing The determination of how many iterations something needs is still a little fuzzy When to use empirical over asymptotic I was n't exactly understanding where the numbers were coming from -LRB- N +1 or N and all that -RRB- . Though , when we did get them , I understood what to do with them . Maybe it would help to have some more practice problems . I think more visuals might be needed to explain the concept . amortized time , where we increase the array by 1 was very confusing . I think I missed something you said and then was confused for the duration of the explanation . Discussing amortized time n log n Determining the key instruction and how to create functions for these key instructions in terms of 'N' How calculations were ` simplified , ' and also if we could start getting out of class on time , that would be great , because I really need a seat in my next class . Class running over a few minutes more every day is starting to affect me more and more Algorithms and Complexity Creating the more complex formulas Nothing specific . Runtime analysis is new to me though , so it 'll take some time to be entirely absorbed . I did n't realize the factoring really mattered . I do n't think I have that good of an understanding after the questions of the day . I need to read the book . @extractive","Many students found calculating runtime , amortized time , Big O notation as most confusing concepts . A few students did n't understand creating functions in terms of ` n ' and also empirical over asymptotic .","['amortized time', 'add item', 'run time', 'actual run time', 'binary search']","Most of the students found the concepts confusing. They also struggled with the derivations of the algorithms and the use of the big-O notation. Some students also had trouble with amortized time, the use the N-value, and the best way to calculate run-time.","Most of the students had trouble with the concepts related to run-time, the derivations of the functions, and the amortized time. Some students also had trouble understanding the Big-O notation.","In this lecture, the students mostly had trouble with amortized time, the derivations of algorithms, and the Big-O notation. They also had trouble understanding how to modify things to increase efficiency. Some students didn't understand the application of the algorithms.","In this lecture, the students mostly had trouble with amortized time, the derivations of algorithms, and the Big-O notation. They also had trouble understanding how to calculate run-time, and modifying the function to increase efficiency.","In this lecture, the students mostly had trouble with amortized time, the derivations of algorithms, and the Big-O notation. They also had some trouble with the run-time for binary search and the ordering of the functions."
"why can the bag not be changed ? How to resize arrays when they are full I would like to hear more about how runtime speed can change depending on implementation . I thought physical vs. logical size was confusing when it was first brought up , but equating them with familiar coding constructs -LRB- counter variable and array length -RRB- helped my understanding I was confused why we needed to use an array rather than an arraylist for the bag . Nothing Implementing bag I think the PowerPoint notes need to be in more detail with more examples given in class . I still needed more explanation on the differences between bags and array lists . Nothing The connection between ADTs and interfaces/classes remove methods Keeping track of ` logical size ' seems to be a point of lots of errors . I feel like it is safer to use a for loop to detect non-null values although less efficient . The bag compared to other data structures The purpose of using a bag or what we 'd use a bag for benefits of using an array over ArrayList Im a bit confused about what all the moving parts are now . The book introduces adts , interfaces , a presumed class that uses it and a class that client programmer as well as user are using . Id like to see a diagram of all the classes etc. where is the program running from etc. . Generics syntax is still slightly confusing . When the convoluted syntax is used and not used I 'm still not sure off the top of my head I did not find anything especially confusing today . Dr. Ramirez went very slow and explained everything well . nothing None @extractive","The students had diverse confusions . Many were abstract confusions , such as the differences between different data structures , and the differences between interfaces , classes , and ADTs . Other problems were implementation based , like the specifics of the array implementation -LRB- why not use an arraylist , what errors may arise from size issues -RRB- .","['convoluted syntax', 'data structure', 'book introduces']","Most students found the concepts of the bag, the interface, and the logical size of the array confusing. Some also had trouble with the implementation of the interface and the class.","Most students had trouble with the concepts related to the bag, the interface, and the logical size of an array. Some students also had trouble understanding the difference between an array and an arraylist, and how to use them. A few students had no issues.","In this lecture students mostly had trouble with the implementation of the bag. They also struggled with the connection between ADTs and interfaces/classes, and the logical size of an array. Some students also had trouble understanding the for loop and how to resize arrays.","In this lecture, the students mostly had trouble with the implementation of the bag. They also had trouble understanding the connection between ADTs and interfaces/classes, and the difference between physical and logical size.","In this lecture, the students mostly had trouble with the implementation of the bag. They also struggled with the connection between ADTs and interfaces/classes, and the logical size of an array."
"What is the type of tree that balances itself ? AVL ? how using the stack works Iterative traversal of binary search trees Iterating through a BST How often should stacks be used ? The slides , at least , do n't make it clear what mismatched parentheses do to strings . Is there a code example that shows what happens ? I thought the explanations of the run time were confusing . not enough time spent on talking about runtimes Sort of the code/how the stack will function , as we did n't get to how exactly to push and pop on the stack . Nothing How Dr. Ramirez makes perfectly similar whistling noises each time he needs to Still need more detail on inline successors and predecessors Iterators the difference in execution between the inorderIterator vs inorder recursion in order iterators were pretty complicated Nothing I do not have anything confusing @extractive",Most of the students found the usage of stacks and iterators as confusing . Some others found runtimes and iterating through a BST as confusing .,"['run time', 'binary search', 'binary search tree']","Most of the students found the run time of the program confusing. Some students also had trouble with the inorderIterator, the stack, and the binary search tree.","Most of the students had trouble with the run time, the inorder recursion, and the stack. A few students also had trouble understanding the binary search trees and the BST.","In this lecture, students mostly had trouble with the use of the stack, iterators, and binary search trees. Some students also had trouble understanding the differences between inorder and inorder recursion in order iterators.","In this lecture, students mostly had trouble with the use of the stack, iterators, and binary search trees. Some students also had trouble understanding the differences between inorder and inorder recursion.","In this lecture, students mostly had trouble with the use of the stack, iterators, and binary search trees. Some students also had trouble understanding the differences between inorder and inorder recursion in order iterators."
"implementing recursion I was interested in learning about the efficiency of several recursive methods that I learned about in 401 . Questions about the Assignment ADT 's and there times sequential search using recursion How recursive programs work in relation to the AR and RTS How ARs and Runtime stacks work Learning about how recursion is implemented , the Activation Record and the Runtime Stack AR and RTS We talked about recursion today . that recursion can actually be used in programs The simplicity recursion has to offer even when doing complex code I thought different cases of recursion were pretty interesting I thought different cases of recursion were pretty interesting recursion I already briefly learned about recursion last semester in CS 401 , so it 's good to revisit it now and learn more in depth about it . It 's even better for me since I 'm already vaguely familiar with it . I found the topic the most interesting . recursion How the runtime stack works The factorial recursion implementation Im intrigued about implementing recursion if its as awesome as Ramirez says it is . Recursion in general is extremely interesting . You learn about recursively defined functions in 441 , but I had a non-CS guy , so the programming aspects of it were n't really discussed . Recursive methods can be used for sequential searches @extractive","Almost every surveyed student mentioned implementing recursion , or that they had previously seen recursion . They talked about specific cases of using recursion , like a sequential search or a factorial algorithm . Some were interested by the Runtime stack and activation record .","['runtime stack', 'sequential search', 'complex code', 'recursive method']","In this lecture students were interested in recursion, the implementation of recursive methods, the AR and RTS, and the runtime stack. They also found sequential searches and the Assignment ADT interesting.","In this lecture, students were interested in implementing recursion, learning about the AR and RTS, and the factorial recursion implementation. They also found sequential searches and the runtime stack interesting.","In this lecture students were interested in recursion, the implementation of recursive methods, and the AR and RTS. They also found sequential searches and the runtime stack interesting.","In this lecture students were interested in implementing recursion, learning about the AR and RTS, and the factorial recursion implementation. They also found sequential searches and the runtime stack interesting.","In this lecture students were interested in implementing recursion, learning about the AR and RTS, and the factorial recursion implementation. They also found sequential searches and the runtime stack interesting."
"unfortunately time ran out at the end before we really got to look at the implementation . The code for the 8 queens problem It would be great to hear more about how to evaluate efficiency of recursive methods . Iteration The importance of recursion given that iterative solutions are faster -LRB- besides recursive solutions being ` cooler ' -RRB- how to actually code the solution to the 8 queens problem How to implement backtracking recursion More examples of backtracking problems practical use for recursion other than fun puzzles ? backtracking implementation The diagonal algorithm for 8 queens Doing multiple recursive checks at once why is recursion useful ? The benefits of recursion keeping track of data when backtracking What 's the runtime of a recursive method ? I found the equations about recursion the most confusing and deciding whether something had a base case or not . I had missed the previous lecture due to the career fair so obviously some of the review was unclear Probably how to implement backtracking , though that 's probably because we ended up running out of time . recursive graphics Recursion and backtracking The binary recursive search code Nothing today When it would be appropriate to backtrack Nothing @extractive",Many students want to know how to implement backtracking and when to use recursion -LRB- Vs iteration -RRB- . Some others want to know how to code for 8 queens problem . Some others had problems with efficiency of recursion and understanding when to backtrack .,"['keeping track', 'previous lecture', 'recursive method']","Most students found recursion and backtracking interesting. Some students also found iterative solutions to the 8 queens problem interesting. A few students also mentioned the benefits of recursion, and the efficiency of the algorithm.",Most students found recursion and backtracking interesting. Some also found iterative solutions and the diagonal algorithm for 8 queens interesting. A few students had trouble with the runtime of a recursive method.,In this lecture students mostly found recursion and backtracking interesting. They also found iterative solutions and the diagonal algorithm for the 8 queens problem interesting.,In this lecture students mostly found recursion and backtracking interesting. They also found iterative solutions and the diagonal algorithm for the 8 queens problem interesting.,In this lecture students mostly found recursion and backtracking interesting. They also found iterative solutions and the diagonal algorithm for the 8 queens problem interesting.
"Nothing was really confusing The question of the day was lengthy , and we were not given enough time to answer it . nothing in particular Special cases Nothing really too muddy - however , I would definitely suggest ignoring the textbook example and starting your class examples at index 0 instead of 1 . Even though it 's been clarified every time , I still might get confused looking at my notes later on towards the midterm . Not too much , just the idea of using these to build a string builder was not super clear . I understood all of the material taught today . The usefulness of asserts assert The reassigning of the nodes by skipping one ? I 'm still kind of confused about the difference between linked lists and Linked Lists Why does the author start at 1 and not 0 ? ! Implementation of linked list None I am having trouble keeping differences between linked lists , linked bags , bags , etc , seperate . I think what confused me most was the assert keyword , because I have n't really ever encountered that anywhere before . However , I think Professor Ramirez did a good job in explaining what it 's essential function was -LRB- I.e. . A logic check for implementers for pre and post conditions -RRB- nothing What are the specific names of each type of list . Is the author 's version of linked list -LRB- starting point = 1 -RRB- a predefined class in java ? What does LList do differently ? I 'm not really sure what the firstNode instance variable does . Is it basically just the pointer half or can it store data as well ? If we ever wanted to call the data of a lastNode would we reference L.length-1 or just the lastNode pointer ? removal of last item Handling special cases More special cases with list operations . I was pretty alright with everything today . Maybe a generalized explanation of the difference between a LinkedBag and LinkedList ? Everything was well explained today . I had no questions . @extractive","Most of the students had no problem with the lecture . However some of the students found assert , special cases in the lists , difference between linked lists , linked bags and bags as confusing . Some students suggested starting the index at 0 as they are getting confused .","['predefined class', 'linked list', 'essential function', 'pointer half']","Most of the students had trouble with the difference between linked lists, linked bags, and linked lists. Some also had trouble understanding the difference in the assert keyword, and the implementation of the LRB-class. A few students had some trouble with LRB -RRB-, and nothing in particular.","Most of the students had trouble with the difference between linked lists, linked bags, and linked lists. Some students also had trouble understanding the assert keyword, and the special cases of each type of list.","Most of the students had trouble with the difference between linked lists, linked bags, and linked lists. Some students also had trouble understanding the assert keyword, and special cases with list operations.","In this lecture, students had trouble with the difference between linked lists, linked bags, and linked lists. They also had trouble understanding the use of the assert keyword, and special cases.","In this lecture, students mostly had trouble with the difference between linked lists and linked bags. They also had some issues with the assert keyword, and the implementation of linked lists."
"the ` hack ' way of analyzing the Big-O of QuickSort seems really interesting and helpful Quicksort runtime of mergesort quick sort Quicksort Quick sort Algorithm behind quicksort the difference in approaches between mergesort and quicksort Sorting runtimes Quicksort and big O of mergesort Merge and quick sorts I thought merge sort was an interesting approach to sorting a list of data partition Quick sort and how it selects a pivot point and sorts the data into 2 halves quicksort merge sort and quick sort We carefully examined Merge Sort and Quick Sort . I liked learning more about MergeSort and thought it was really clearly explained , especially with your board example . QuickSort was definitely the highlight of today 's class . quick sort Quick sort ; primarily the concept of it Quick sort @extractive","The students were interested in two new partition based sorting algorithms , quicksort and mergesort . They specifically the runtimes and big-O notation analyses of the two .","['quick sort', 'data partition', 'merge sort']",Most students found the concepts of QuickSort and MergeSort interesting. Some students also found the runtime of quicksort and the difference between mergesort and quicksorts interesting.,"Most students found the concepts of QuickSort, MergeSort, and the runtime of quicksort interesting. A few students also mentioned the Big-O of the algorithms and the differences between them.","In this lecture, students enjoyed learning about quicksort, merge sort, and quick sort. They also found the ` hack'approach to sorting interesting, as well as the difference between the two approaches.","In this lecture, students enjoyed learning about quicksort, mergesort, and quick sort. They also found the ` hack'approach to sorting interesting, as well as the difference between the two approaches.","In this lecture students enjoyed learning about QuickSort, MergeSort, and the runtime of mergesort. They also found Sorting runtimes and the Big-O of QuickSort interesting."
"I think linked lists are really cool . I like that we are also considering the efficiency of the data structures we are studying . I liked the visuals he drew on the board to help us understand concepts better . the transition between arrays and linked lists was an effective way to introduce a completely new concept . Contiguous memory and it 's advantages/disadvantages I have never heard of a linked data structure before , so that was definitely the most interesting topic from lecture today for me . Linked Lists I found the linked lists to be the most interesting part of today 's class How the pointers in each part of a linked list can be manipulated to allow adding/removing elements without shifting things The idea of the linked list and how it works . linked list linked lists How linked lists can be traversed ; singly linked vs doubly linked lists Linked lists are composed of non-contiguous pieces of information . Learning about linked lists The process that goes into dynamic arrays for Bag ADT 's The concept of nodes was new to me , and I think it 's a pretty novel concept especially with regards to the memory allocation being very efficient in comparison to arrays Issues with array-based data structures I found the linked lists to be the most interesting part of the lecture as a they are a good alternative to Bags The idea of how a linked last does not use contiguous memory . linked lists A linked list is a way of connecting data entries together via addresses of other entries . I thought LinkedLists was an incredibly interesting and creative solution to the contiguous data problem . I was a little confused as to how two parts are stored in one object , how each part may be accessed individually , and what exactly we might want to use this for . Discussing nodes as a way of storing and referencing memory linked bag implementation Linked Lists Linked Lists can be viable alternatives to arrays . Getting into a brand new concept of linked lists/nodes . Its interesting to begin a whole new approach to coding . I liked talking about the linked list . I had heard about this thing but never knew what it was . @extractive","The students overwhelmingly mention linked lists . Many of these mentions compared the linked list directly with a contiguous memory , array based implementation . Some seemed to understand the concept of memory addresses and pointers , and how that coupled with a node object formed the linked list . There were a few comparisons with bags .","['contiguous memory', 'linked list', 'contiguous data', 'data structure', 'memory allocation']",Most of the students found the concept of the linked list interesting. They also found arrays and the use of contiguous memory interesting. Some students also found the concepts of nodes and the dynamic array interesting.,"Most of the students found the concept of the linked list interesting. They also found arrays and Bags interesting, as well as the process that goes into creating them and the efficiency of the data structure.","In this lecture, students found the concept of linked lists interesting. They also found arrays and dynamic arrays interesting, as well as the differences between arrays and linked lists.","In this lecture, students found the concept of linked lists interesting. They also were interested in the differences between arrays and linked lists, as well as the efficiency of arrays.","In this lecture, students found the concept of linked lists interesting. They also were interested in the differences between arrays and linked lists, as well as the efficiency of the data structures."
"unfortunately time ran out at the end before we really got to look at the implementation . The code for the 8 queens problem It would be great to hear more about how to evaluate efficiency of recursive methods . Iteration The importance of recursion given that iterative solutions are faster -LRB- besides recursive solutions being ` cooler ' -RRB- how to actually code the solution to the 8 queens problem How to implement backtracking recursion More examples of backtracking problems practical use for recursion other than fun puzzles ? backtracking implementation The diagonal algorithm for 8 queens Doing multiple recursive checks at once why is recursion useful ? The benefits of recursion keeping track of data when backtracking What 's the runtime of a recursive method ? I found the equations about recursion the most confusing and deciding whether something had a base case or not . I had missed the previous lecture due to the career fair so obviously some of the review was unclear Probably how to implement backtracking , though that 's probably because we ended up running out of time . recursive graphics Recursion and backtracking The binary recursive search code Nothing today When it would be appropriate to backtrack Nothing @extractive","Students still seem to be having trouble with recursion , now in the context of backtracking . Most of the backtracking confusions were centered on the actual code implementation of the algorithm described . Some did n't seem entirely convinced of the usefulness of recursion outside of logic puzzle examples . A couple students wondered at the runtime efficiency of the recursive solution .","['keeping track', 'previous lecture', 'recursive method']","Most students found recursion and backtracking interesting. Some students also found iterative solutions to the 8 queens problem interesting. A few students also mentioned the benefits of recursion, and the efficiency of the algorithm.",Most students found recursion and backtracking interesting. Some also found iterative solutions and the diagonal algorithm for 8 queens interesting. A few students had trouble with the runtime of a recursive method.,In this lecture students mostly found recursion and backtracking interesting. They also found iterative solutions and the diagonal algorithm for the 8 queens problem interesting.,In this lecture students mostly found recursion and backtracking interesting. They also found iterative solutions and the diagonal algorithm for the 8 queens problem interesting.,In this lecture students mostly found recursion and backtracking interesting. They also found iterative solutions and the diagonal algorithm for the 8 queens problem interesting.
"Threads -RRB- : unfortunately , we wo n't be talking anymore about them . the beginning of run-time analysis Algorithm analysis seems interesting as we begin to make our code efficient . I really enjoyed the enthusiasm about efficiency across the different searching methods . Prof Ramirez 's sound effects and the discussion of threads . the adding and removing methods in a lists Circular linked lists and its special cases How the vector class maintained its legacy methods . Implementation of linked list methods and the efficiency of binary vs. sequential search efficiency of binary search vs sequential search The synchronization methods , and the vector class originally in Java . Runtimes ! Learning about multithreaded operations Threads and synchronization How large the difference in runtime is for something as simple as a sequential vs. binary search . The ways to use a list ADT . How the efficiency of binary search makes such a huge difference in time I thought the discussion of analysis was really interesting , especially when considering how much of a difference the correctly optimized program/algorithm makes . I 'm still not 100 % sure how the analysis is actually conducted , but it 's an interesting topic nontheless . Runtimes I thought it was interesting that the reason the list starts at 1 is so that it is easily resizable . I 'm glad there was elaboration on the mechanics about that since I thought , at first , that it was some random implementation that I did n't need to understand . I found the lecture topic most interesting , as well as the engaging PowerPoint . how much more efficient binary search is compared to sequential search a list vs l list Algorith analysis ' Remove Gap Vectors Threads : I would love to learn more about them I liked talking about synchronization . Threads are very interesting to me but I have n't the slightest idea of how to use them . It is beyond the scope of this class but I wish we could go in more depth ! @extractive","The interest was pretty varied this lecture . Most students were interested in algorithm analysis and a program 's efficiency . Many were intrigued by threads , but did n't think that they would have the chance to learn about them yet . Some compared binary and sequential searches . There was still some interest in lists and their methods .","['vector class', 'slightest idea', 'sequential search', 'linked list', 'huge difference', 'lecture topic', 'binary search']","Most students found the efficiency of binary search and the related algorithms interesting. They also found runtimes, the synchronization methods, and the linked list interesting.","Most students found the efficiency of binary search, the runtimes, and the algorithm analysis interesting. A few students also found the vector class interesting, as well as the circular linked list.","The students enjoyed learning about the efficiency of binary search vs sequential search, the runtimes, and the algorithm analysis. They also found the vector class and its legacy methods interesting.","In this lecture, students were interested in the efficiency of binary search, the runtimes, and the algorithm analysis. They also enjoyed learning about the vector class and its legacy methods.","In this lecture, students were interested in the efficiency of binary search, the runtimes, and the algorithm analysis. They also enjoyed learning about the vector class and its legacy methods."
"the dynamic bag I found the creation of the Bag to be the most interesting . Learning about bags was very interesting . Dr. Ramirez cleared up my understanding of how they should work . I was really interested in learning all about an entirely new data structure , the Bag . I 'm also noticing that as these classes get farther along , there is more focus on real world factors that determine strength of code like speed The bag concept was cool how basically acts like a bag in real life with its usefulness . Bags as a data type and how flexible they are . Discussing the Assignment 1 I found the examples and drawings the teacher drew on the whiteboard the most interesting . Abstraction , though seemingly intimidating is kind of just giving programmers a break right ? We 're given so many more abilities and operations without having to know exactly how to code that . That being said , while I understand the applications being explained to me , it 's hard to just manifest that on my own . Learning about resizing Bags dynamically The discussion of the underlying methods of ADTs such as bags was most interesting the implementation of an array bag Order does not matter when using a bag . It is important to keep all of the values in an array together . To do this , you should move an existing element into the vacant spot . Looking at ADT 's from both perspectives Information held in bags is not in any particular order different ways to implement the bag Thinking about a more general idea of coding with ADTs and starting to dig into data structures more specifically . Code examples of key concepts/methods is always helpful . I thought it was a good thing to go through the implementation of both the add -LRB- -RRB- and remove -LRB- -RRB- methods of the Bag ADT Today we were talking about a certain type of ADT called a bag . We talked about certain ways that we would implement the methods and certain special cases that we as programmers have to be aware of . If you were removing items from ADT bag , you can simply shift the bottom or last item and put it in the place where you we removed an item . This is because , in bags , order does not matter . Learning about managing arrays in a data structure The bag ADT and how it is implemented @extractive","The vast majority of the students found the discussion of bags most interesting . Those who went into specifics mentioned their flexibility and usefulness , as well as the nuances of their implementation .","['data type', 'real life', 'data structure', 'existing element', 'real world', 'vacant spot']","In this lecture, students found the implementation of the Bag and its various methods interesting. They also found the general concepts of ADTs and the dynamic array interesting.","In this lecture, students found the implementation of the Bag and ADTs interesting. They also enjoyed learning about arrays and how they are used in general.",Most of the students found the implementation of ADTs interesting. They also enjoyed learning about the dynamic Bags and how to use them in a data structure. Some students also found the assignment interesting.,"In this lecture, students enjoyed learning about ADTs, the implementation of an array, and the dynamic bag. They also found the examples and drawings interesting.","In this lecture, students found the implementation of ADTs and the dynamic bag to be the most interesting part of the lecture. They also enjoyed learning about arrays in general and how to use them."
"using parameterized types with object oriented nodes Nothing i can think of contains In what situations do we need to pick linked over a standard array I was n't fully sure how to utilize these bags in code How is a List different from an ArrayList ? What is it useful for ? why delete the first entry in the linked bag instead of just moving the pointers from the node before the deleted node to the node after How to remove the nodes best ? Nothing Very clear lecture . No problems . Specific implementation of methods to modify linked bags None I feel that inner classes are hard to conceptualize . I would much rather call a method on an object such as myNode.add -LRB- newNode -RRB- . I feel like this is frowned upon though . How to add an element to the middle of a linked list effectively . Does removing an item from the bag start from beginning or end ? How to add nodes and make them connect to one another . I got a little tripped up on the access the outer class has to the inner , because It seems odd that the only place a node can be instantiated is within the Node class itself Advantages and disadvantages of all structures discussed so far I never fully understood if the linked list had a ` size . ' I know we can insert new nodes at the beginning of the list , but is there ever a size for the entire list ? Also , can linked lists ever be used for order-specific problems because of the way the references are removed and rearranged ? Also , is there an already established Node class or we need to create one each time that is designed specifically for our uses ? The question of the day needed to be more clearly explained . I also would like more time to think about the question . Nodes as separate classes linked list vs linked bags Implementations of linked bag How all the pieces and different classes work together What would be the use of defining a class Node that was not within another LinkedList class ? The last question of the day I thought I understood but I actually answered incorrectly . I 'd like to go over that one at the beginning of next class . There was a decent amount of us that got it wrong I feel . @extractive","Many students were confused about the implementation of certain linked bag methods , especially the method for removing an element . A few others were not sure when they would want to use a linked bag in their code . Finally , some students were confused about how node classes are implemented within the larger bag class .","['linked list', 'entire list', 'outer class', 'standard array', 'decent amount']","Most of the students had trouble with the concepts of linked lists, linked bags, and the Node class. Some students also had trouble understanding the differences between the two types of classes and how to use them in a given situation.","Most of the students had trouble understanding the differences between linked lists and linked bags, as well as how to add and remove nodes from a linked list. Some students also had trouble with the Node class and the inner class. A few students had no issues.","In this lecture, the students mostly had trouble understanding the differences between linked lists and linked bags. They also had trouble with the Node class and its implementation. In addition, a few students had issues with parameterized types and the inner class.","In this lecture, the students mostly had trouble understanding the differences between linked lists and linked bags. They also had trouble with the Node class and its implementation. In addition, they had some trouble with parameterized types and the inner class.","In this lecture, students had trouble understanding the differences between a linked list and a linked bag. They also had trouble with object oriented classes and how to add and remove nodes."
"Some of the math None There was n't really anything muddy about today 's lecture that I can think of . I feel like we did n't really learn what the O value actually IS or what the word itself means , just that it is used for calculating the run time Figuring out the function for the actual run time . the additem example doubling the array time analysis How to modify things to increase efficiency anortized time with the resizable array The ordering Just more practice examples on calculating runtimes Some of the derivations of the functions we are using How N ^ k-1 Becomes big O notation Deriving the Big-O for binary search What is the best way to calculate run-time for algorithms ? the math-y part was a bit confusing The determination of how many iterations something needs is still a little fuzzy When to use empirical over asymptotic I was n't exactly understanding where the numbers were coming from -LRB- N +1 or N and all that -RRB- . Though , when we did get them , I understood what to do with them . Maybe it would help to have some more practice problems . I think more visuals might be needed to explain the concept . amortized time , where we increase the array by 1 was very confusing . I think I missed something you said and then was confused for the duration of the explanation . Discussing amortized time n log n Determining the key instruction and how to create functions for these key instructions in terms of 'N' How calculations were ` simplified , ' and also if we could start getting out of class on time , that would be great , because I really need a seat in my next class . Class running over a few minutes more every day is starting to affect me more and more Algorithms and Complexity Creating the more complex formulas Nothing specific . Runtime analysis is new to me though , so it 'll take some time to be entirely absorbed . I did n't realize the factoring really mattered . I do n't think I have that good of an understanding after the questions of the day . I need to read the book . @extractive",The most common response was that the students were not sure how an algorithm 's operating time function can be derived . Other common responses included getting lost in the math and confusion over which runtime analysis methods were best .,"['amortized time', 'run time', 'actual run time', 'binary search']","Most of the students found the concepts confusing. They also struggled with the derivations of the algorithms and the computations, and the use of the big-O notation. Some students also had trouble with the amortized time, the order of the functions, and determining the run-time.","Most of the students had trouble with the concepts related to run-time, the derivations of the functions, and the amortized time. Some students also had trouble understanding the Big-O notation.","In this lecture, the students mostly had trouble with the concepts of the run-time, the derivations of the functions, and the amortized time. They also had trouble understanding the Big-O notation and understanding how to use it.","In this lecture, the students mostly had trouble understanding the concepts related to run-time, the derivations of the functions, and the use of the big-O notation. They also had trouble with the amortized time, and modifying the function to increase efficiency.","In this lecture, the students mostly had trouble with the concepts of the run-time, the derivations of the functions, and determining the key instructions for the algorithm. They also struggled with the amortized time and the Big-O notation."
"visualization of linked bags on the board is really interesting and helpful for understanding nodes . How to manipulate a bag of nodes how to remove an item from a linked list Nodes in linked lists are n't necessarily permanently tied to the data they point to . I liked the points about the linked bag The way nodes are set up and used in a linked list . adding to the linked bag The order of the node does n't matter , and the removal methods . The different methods associated with the linkedbag How you can navigate around a set of nodes . Learning about the methods used to modify linked bags . The adding and removing of a linked bag Adding a node to a linked list occurs at the start of the list because it is much easier than adding to the end . Adding an element to a linked list occurs at the start of the list since it is much easier than the end . Some object-oriented purists believe it is better to never ` violate ' the private nature of a class ' data . I found linked lists to be the most interesting point of the lecture . Seeing how they differ from the bag and in what circumstances they are useful . I thought the different ways to implement the Node class itself were interesting , especially because it helps show the divide between simplicity of code and adaptability of its functionality -LRB- private inner class VS public outer -RRB- linkedbags Since last lecture , we have been trying to find more efficient ways of making useable ` arrays . ' I find this helpful because , even though the new 2x array is not too difficult -LRB- we used it in my last CS 401 assignment last semester -RRB- , I was wondering if there were better ways to implement ` resizable ' arrays . So , learning about linked list today may be helpful for more manageable array-included tasks in the future . I found the topics we discussed in class today the most interesting . Linked bag ! lists vs bags The list follows a pattern for adding entries that is opposite to a bag . Learning about the Linked List Implimentation of linked lists in bags The concept of the linked list is n't something that really has a real world parallel , so to learn about it and its implementation was interesting . I liked talking about the bag . I definitely thought the adding to the front was an important point to make -- as opposed to arrays adding in the back . @extractive","Most of the students found something related to linked bags most interesting this lecture . Specifically , some students mentioned the methods used for adding/removing elements from a linked bag and the differences between linked bags and lists .","['linked list', 'private nature', 'real world']","In this lecture, students found the concept of the linked lists and the linked bag interesting. They also found adding and removing a node in a linked list and the methods used to modify them interesting.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify the linked bag. They also enjoyed learning about arrays, and the differences between the private and public classes.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify a linked list. They also enjoyed learning about the different ways to implement the Node class, and the differences between the private and public classes.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify the linked bag. They also found the ` resizable'array and the private inner class interesting.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify the linked bag. They also found the ` resizable'array and the private inner class interesting."
"the mathematics of different data structures and other simple ops Runtime for Alist and Llist ' I am very excited to start looking at recursion again ! Going over the Assignment the idea of using linked lists The math involved in CS average time vs worst case time The big o concept , the beginning of recursion Runtime differences between AList and LList comparing alist and llist The song of the day Big O derivations The derivations for runtime equations were pretty neat ! I thought the description of differing types of successes -LRB- I.e. LinkedList remove is faster than AList but slower than add -RRB- was very interesting finding the average run time by taking 1/N to compare efficiencies calculating the average run time recursion and more asymptomatic analysis We learned about how to calculate the run-time of a program . Something that may be easier for the coder to do coding-wise may not be the most efficient way to go , even if there are less lines . I found the logic behind amortizing the most interesting . Doing the math to back up our intuition of Big-O values summations Recursion The difference in runtime between different implantation sod methods from the same interface The part about the explanation of what -LRB- n -LRB- n +1 -RRB- -RRB- / 2 was beneficial . @extractive","The students were mainly focused on runtime problems -LRB- average/worst case -RRB- , and comparing different data structures with Big O notation , like Alist and Llist . A few had their interest piqued by the start of recursion . Others talked about specifics of the math behind deriving runtimes .","['average run time', 'linked list', 'data structure', 'run time']","The students found the difference in runtime between Alist and Llist, and the difference between the two methods interesting. They also enjoyed learning about the concepts of recursion, the derivations for the runtime equations, and how to calculate the average run-time of a program.","The students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts related to recursion, the derivations of the Big-O concept, and the linked-list example.","In this lecture, students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts related to recursion, the derivations for runtime equations, and the examples used to illustrate them.","In this lecture, students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts of recursion, the derivations of the Big-O concept, and the use of linked lists.","In this lecture, students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts of recursion, the derivations of the Big-O concept, and linked lists."
"What is the type of tree that balances itself ? AVL ? how using the stack works Iterative traversal of binary search trees Iterating through a BST How often should stacks be used ? The slides , at least , do n't make it clear what mismatched parentheses do to strings . Is there a code example that shows what happens ? I thought the explanations of the run time were confusing . not enough time spent on talking about runtimes Sort of the code/how the stack will function , as we did n't get to how exactly to push and pop on the stack . Nothing How Dr. Ramirez makes perfectly similar whistling noises each time he needs to Still need more detail on inline successors and predecessors Iterators the difference in execution between the inorderIterator vs inorder recursion in order iterators were pretty complicated Nothing I do not have anything confusing @extractive",Many students are a bit confused about iterators and tree traversals . Others are struggling with runtime analysis and how to use a stack .,"['run time', 'binary search', 'binary search tree']","Most of the students found the run time of the program confusing. Some students also had trouble with the inorderIterator, the stack, and the binary search tree.","Most of the students had trouble with the run time, the inorder recursion, and the stack. A few students also had trouble understanding the binary search trees and the BST.","In this lecture, students mostly had trouble with the use of the stack, iterators, and binary search trees. Some students also had trouble understanding the differences between inorder and inorder recursion in order iterators.","In this lecture, students mostly had trouble with the use of the stack, iterators, and binary search trees. Some students also had trouble understanding the differences between inorder and inorder recursion.","In this lecture, students mostly had trouble with the use of the stack, iterators, and binary search trees. Some students also had trouble understanding the differences between inorder and inorder recursion in order iterators."
"I think linked lists are really cool . I like that we are also considering the efficiency of the data structures we are studying . I liked the visuals he drew on the board to help us understand concepts better . the transition between arrays and linked lists was an effective way to introduce a completely new concept . Contiguous memory and it 's advantages/disadvantages I have never heard of a linked data structure before , so that was definitely the most interesting topic from lecture today for me . Linked Lists I found the linked lists to be the most interesting part of today 's class How the pointers in each part of a linked list can be manipulated to allow adding/removing elements without shifting things The idea of the linked list and how it works . linked list linked lists How linked lists can be traversed ; singly linked vs doubly linked lists Linked lists are composed of non-contiguous pieces of information . Learning about linked lists The process that goes into dynamic arrays for Bag ADT 's The concept of nodes was new to me , and I think it 's a pretty novel concept especially with regards to the memory allocation being very efficient in comparison to arrays Issues with array-based data structures I found the linked lists to be the most interesting part of the lecture as a they are a good alternative to Bags The idea of how a linked last does not use contiguous memory . linked lists A linked list is a way of connecting data entries together via addresses of other entries . I thought LinkedLists was an incredibly interesting and creative solution to the contiguous data problem . I was a little confused as to how two parts are stored in one object , how each part may be accessed individually , and what exactly we might want to use this for . Discussing nodes as a way of storing and referencing memory linked bag implementation Linked Lists Linked Lists can be viable alternatives to arrays . Getting into a brand new concept of linked lists/nodes . Its interesting to begin a whole new approach to coding . I liked talking about the linked list . I had heard about this thing but never knew what it was . @extractive","Most of the students enjoyed learning about linked lists , especially how they are implemented and how they compare to array-based structures . Some mentioned more specifically that the concept of nodes was very interesting .","['contiguous memory', 'linked list', 'contiguous data', 'data structure', 'memory allocation']",Most of the students found the concept of the linked list interesting. They also found arrays and the use of contiguous memory interesting. Some students also found the concepts of nodes and the dynamic array interesting.,"Most of the students found the concept of the linked list interesting. They also found arrays and Bags interesting, as well as the process that goes into creating them and the efficiency of the data structure.","In this lecture, students found the concept of linked lists interesting. They also found arrays and dynamic arrays interesting, as well as the differences between arrays and linked lists.","In this lecture, students found the concept of linked lists interesting. They also were interested in the differences between arrays and linked lists, as well as the efficiency of arrays.","In this lecture, students found the concept of linked lists interesting. They also were interested in the differences between arrays and linked lists, as well as the efficiency of the data structures."
"Everything involving summation is confusing Why the author is so convoluted What is the use of a tree the difference between a full tree and a complete tree The full vs complete tree distinction was confusing at first , but Ramirez clarified it later in the lecture . binary tree lengths algorithms Everything was well explained Complete Tree Some of the deriving for the minimum height Some of the ways we will get information from the tree . How do we edit trees efficiently ? When would I want to use these ? Author 's implementation of binary tree @extractive","Most of the students found complete Vs full trees and the uses of a tree as confusing . Some others had problems with finding the height of the tree , implementing a tree and editing them efficiently .","['binary tree', 'minimum height', 'complete tree']","Most students found the binary tree and complete tree concepts confusing. Some students also had trouble with the summation algorithm, and the difference between a full and a complete tree.","Most students had trouble with the binary tree, the difference between a full and a complete tree, and the summation algorithm. Some students also had trouble understanding the differences between the two.",Most students had trouble with the use of a binary tree and the difference between a full tree and a complete tree. Some students also had trouble understanding summation algorithms and editing trees.,In this lecture students had trouble understanding the difference between a full tree and a complete tree. They also had trouble with the binary tree and the summation algorithm.,In this lecture students had trouble understanding the difference between a full tree and a complete tree. They also had trouble with the binary tree and the summation algorithm.
"I still find it easier to follow any recursive method when the prof shows the Run-Time Stack on the board . Merge method in the handout when we did merge sort , comparing the indexes of the two subarrays resulted in a sorted array . was this coincidental in the example ? algorithm analysis of shell sort Not entirely certain how to implement it Actual implementation details of the sorting algorithms were still a little confusing what makes mergesort more efficient ? Examples of each sorting method How much faster is mergesort ? The mid index compare -LRB- -RRB- if statement in the merge sort code I am a little confused about how shellsort works How do you concatenate the 2 separate arrays after they are sorted ? Do you make a new array ? We have covered many forms of sorting and I am not sure which ones are the most practical for various situations . moving from many single arrays up to one large sorted array in merge sort Nothing Nothing I was confused at first about if there were multiple , separate arrays or just the division of one , but I think I understand now that there is only one array being divided into two/however many subarrays . I thought that the questions of the day were the most confusing . It would be great if we were given more time to think through them . Nothing was really muddy from today . The worst run times of the sorts were a little confusing , but not too difficult . Shellsort Special cases of merge sort The implementation of mergesort Nothing @extractive","Many students reported confusion over the implementations of the new sorting algorithms . A few others are still struggling to analyze algorithm efficiency . Finally , one student wondered when they should use each sorting algorithm .","['sorting algorithm', 'algorithm analysis', 'sorted array', 'sorting method', 'run time', 'recursive method', 'merge sort']","Most students found the merge sort and shell sort to be the most challenging. They also struggled with the implementation of the various sorting algorithms, and the run-time of the algorithms. Some students also had trouble with the subarrays and the standardization of the sorting method.","Most of the students had trouble with merge sort, shell sort, and the implementation of each method. Some students also struggled with the Run-Time Stack, and finding the correct order of the arrays.","In this lecture students had trouble with merge sort, shell sort, and the run-time of the various algorithms. They also had trouble understanding the differences between the various types of sorting and how to use them.","In this lecture students had trouble with merge sort, shell sort, and the run-time of the algorithms. They also had trouble understanding the difference between the two subarrays in the merge sort.","In this lecture students had trouble with merge sort, shell sort, and the run-time of the various algorithms. They also had trouble understanding the differences between the two types of sorting and how to use them."
"visualization of linked bags on the board is really interesting and helpful for understanding nodes . How to manipulate a bag of nodes how to remove an item from a linked list Nodes in linked lists are n't necessarily permanently tied to the data they point to . I liked the points about the linked bag The way nodes are set up and used in a linked list . adding to the linked bag The order of the node does n't matter , and the removal methods . The different methods associated with the linkedbag How you can navigate around a set of nodes . Learning about the methods used to modify linked bags . The adding and removing of a linked bag Adding a node to a linked list occurs at the start of the list because it is much easier than adding to the end . Adding an element to a linked list occurs at the start of the list since it is much easier than the end . Some object-oriented purists believe it is better to never ` violate ' the private nature of a class ' data . I found linked lists to be the most interesting point of the lecture . Seeing how they differ from the bag and in what circumstances they are useful . I thought the different ways to implement the Node class itself were interesting , especially because it helps show the divide between simplicity of code and adaptability of its functionality -LRB- private inner class VS public outer -RRB- linkedbags Since last lecture , we have been trying to find more efficient ways of making useable ` arrays . ' I find this helpful because , even though the new 2x array is not too difficult -LRB- we used it in my last CS 401 assignment last semester -RRB- , I was wondering if there were better ways to implement ` resizable ' arrays . So , learning about linked list today may be helpful for more manageable array-included tasks in the future . I found the topics we discussed in class today the most interesting . Linked bag ! lists vs bags The list follows a pattern for adding entries that is opposite to a bag . Learning about the Linked List Implimentation of linked lists in bags The concept of the linked list is n't something that really has a real world parallel , so to learn about it and its implementation was interesting . I liked talking about the bag . I definitely thought the adding to the front was an important point to make -- as opposed to arrays adding in the back . @extractive","The class seemed interested by the comparison between linked lists , and the new linked bag idea . They talked about the modification methods for collections of nodes , such as adding and removing nodes , and some mentioned that it is easier to add nodes to the front rather than the end . A couple students mentioned the desire to keep some things in a class private .","['linked list', 'private nature', 'real world']","In this lecture, students found the concept of the linked lists and the linked bag interesting. They also found adding and removing a node in a linked list and the methods used to modify them interesting.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify the linked bag. They also enjoyed learning about arrays, and the differences between the private and public classes.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify a linked list. They also enjoyed learning about the different ways to implement the Node class, and the differences between the private and public classes.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify the linked bag. They also found the ` resizable'array and the private inner class interesting.","In this lecture, students found the concept of the linked list interesting, as well as the methods used to modify the linked bag. They also found the ` resizable'array and the private inner class interesting."
"solving the 8 Queens problem was a really fun way to explore more complex recursion The 8 queens problem I thought it was interesting to learn about the 8 queens problem ! 8 Queens 8 Queen Problem The 8 queens problem the idea of how to solve the 8 queens problem The 8 queens recursion , and how you need to backtrack many times to do so . Also , how many recursions you had to do . 8 queens problem recursion is useful ! Solving the N Queens -LRB- or 8 queens -RRB- problem recursively . Backtracking I thought what was interesting was the idea of tail recursion and that it is possible to solve one problem many different ways 8 Queens The Queens problem and how to find the solution using programs recursion is easier to read Recursion and Iteration Recursion for backtracking seems like an entry point into machine learning , something I 've been interested in . I found the examples the most interesting , especially the chess example . The trace was so interesting !! I never would 've thought to solve the problem like that but the solution made perfect sense Definitely backtracking solutions , especially with the example of the 8 Queens . 8 queens 8 Queens Problem 8 Queens Problem The chess example Professor Ramirez 's enthusiasm , as always , and the concept of backtracking as a programming construct . Backtracking is a way to solve complex problems such as mazes and logic puzzles . A backtracking program proceeds as far as it can go , making decisions along the way . If the program ca n't go any further and it is not at the end , it takes a step back and makes a different decision from before . @extractive",Most of the class voted for 8 queens problem as interesting . Some others stated backtracking and recursion as interesting -LRB- which are used in 8 queens problem -RRB- .,"['machine learning', 'perfect sense', 'tail recursion', 'programming construct']","Most students found the 8 queens problem interesting, as well as the examples used to solve it. They also found recursion and the backtracking problem interesting.","Most students found the 8 queens problem interesting, as well as the examples used to solve the problem. Some students also found recursion and the backtracking examples interesting.","In this lecture, students enjoyed learning about the 8 queens problem, backtracking, and recursion. They also found the example of the chess example interesting.","In this lecture, students enjoyed learning about the 8 queens problem, the concept of backtracking, and recursion. They also enjoyed solving the N-Queens problem, and the examples given by Professor Ramirez.","In this lecture, students enjoyed learning about the 8 queens problem, the concept of backtracking, and recursion. They also enjoyed solving the N-Queens problem, and the examples given by Professor Ramirez."
"Packages were interesting , and how you can group together various classes and import them through the package BST 's the different ways to traverse the trees the funny sound effects that Ramirez made blt 's Binary Search Trees Binary search trees Tree traversal types The binary search tree , and why duplicates might be problematic I guess the different types of traversals for binary trees . Copying a tree Tree Transversing Binary trees Binary Search Trees are pretty cool . They show how trees can be useful . Nothing stood out today All the recursion in binary trees @extractive",Most of the students found the topic of binary search trees most interesting in this lecture . Others students enjoyed learning about tree traversal and copying trees .,"['binary tree', 'binary search', 'binary search tree']",Most of the students found Binary Search Trees and Tree traversal interesting. They also enjoyed the various types of traversal and the various classes that are available.,"Most students found Binary Search Trees and Tree traversal interesting. They also found Recursion in Binary Trees interesting. Some students also mentioned the various classes and import them through the package, and the sound effects that were used.","Most students found Binary Search Trees and Tree traversal interesting. They also found Recursion in Binary Trees interesting. Last, a few students mentioned the various packages and how they were used.","Most students found Binary Search Trees and Tree traversal interesting. They also were interested in Recursion in Binary Trees, and the various types of traversal in the package.","Most of the students found Binary Search Trees interesting. They also found Tree traversal types interesting, and the various ways to group together various classes and import them through the package. Last, a few students mentioned Recursion in Binary Trees as their favorite."
Binary Tree functions how to delete a node using its successor and predecessor implementation of methods on binary search trees and the speed of searching a tree as opposed to a list Removing a node with 2 children deleting interior nodes in a tree search arrays and binary search trees the same way BST I found the diagrams on the PowerPoint easy to understand and interesting . Binary Search Trees Adding to a binary search tree Binary tree method implementation bst I honestly do n't remember what happened Probably the ` dictionary ' commands of trees . How a binary search tree implements various methods All the recursion was beautiful The different ways to manipulate and obtain data from BSTs . Removing nodes in a BST depends on how many children the node has The similarities between traversing a binary search tree and using a binary search on a sorted array @extractive,"Most students enjoyed learning about the implementation of BST methods , particularly the addition/removal of entries . Other students enjoyed the similarity between BST traversal and binary search on a sorted array .","['tree search', 'sorted array', 'binary search', 'binary search tree']","Most students found the binary search tree and its methods interesting. They also enjoyed the different ways to manipulate and obtain data from BSTs, the differences between a binary search and a sorted array, and the different methods implemented in a BST.","Most students found the binary search tree and its methods interesting. They also enjoyed the different ways to manipulate and obtain data from BSTs, the differences between a binary search and a sorted array, and deleting a node.","In this lecture students enjoyed learning about binary search trees, how to delete a node, and the different ways to manipulate and obtain data from BSTs. They also enjoyed searching a tree as opposed to a list.","In this lecture students enjoyed learning about binary search trees, how to delete a node in a tree, and the different ways to manipulate and obtain data from a binary search tree.","In this lecture students enjoyed learning about binary search trees, how to delete a node in a tree, and the different ways to manipulate and obtain data from BSTs. They also enjoyed using a sorted array."
"using parameterized types with object oriented nodes Nothing i can think of contains In what situations do we need to pick linked over a standard array I was n't fully sure how to utilize these bags in code How is a List different from an ArrayList ? What is it useful for ? why delete the first entry in the linked bag instead of just moving the pointers from the node before the deleted node to the node after How to remove the nodes best ? Nothing Very clear lecture . No problems . Specific implementation of methods to modify linked bags None I feel that inner classes are hard to conceptualize . I would much rather call a method on an object such as myNode.add -LRB- newNode -RRB- . I feel like this is frowned upon though . How to add an element to the middle of a linked list effectively . Does removing an item from the bag start from beginning or end ? How to add nodes and make them connect to one another . I got a little tripped up on the access the outer class has to the inner , because It seems odd that the only place a node can be instantiated is within the Node class itself Advantages and disadvantages of all structures discussed so far I never fully understood if the linked list had a ` size . ' I know we can insert new nodes at the beginning of the list , but is there ever a size for the entire list ? Also , can linked lists ever be used for order-specific problems because of the way the references are removed and rearranged ? Also , is there an already established Node class or we need to create one each time that is designed specifically for our uses ? The question of the day needed to be more clearly explained . I also would like more time to think about the question . Nodes as separate classes linked list vs linked bags Implementations of linked bag How all the pieces and different classes work together What would be the use of defining a class Node that was not within another LinkedList class ? The last question of the day I thought I understood but I actually answered incorrectly . I 'd like to go over that one at the beginning of next class . There was a decent amount of us that got it wrong I feel . @extractive",Some of the students had problem with removing and adding a node . Some were confused about when to use lists over other data structures . A few had problem with inner classes and the question of the day .,"['linked list', 'entire list', 'outer class', 'standard array', 'decent amount']","Most of the students had trouble with the concepts of linked lists, linked bags, and the Node class. Some students also had trouble understanding the differences between the two types of classes and how to use them in a given situation.","Most of the students had trouble understanding the differences between linked lists and linked bags, as well as how to add and remove nodes from a linked list. Some students also had trouble with the Node class and the inner class. A few students had no issues.","In this lecture, the students mostly had trouble understanding the differences between linked lists and linked bags. They also had trouble with the Node class and its implementation. In addition, a few students had issues with parameterized types and the inner class.","In this lecture, the students mostly had trouble understanding the differences between linked lists and linked bags. They also had trouble with the Node class and its implementation. In addition, they had some trouble with parameterized types and the inner class.","In this lecture, students had trouble understanding the differences between a linked list and a linked bag. They also had trouble with object oriented classes and how to add and remove nodes."
"I think linked lists are really cool . I like that we are also considering the efficiency of the data structures we are studying . I liked the visuals he drew on the board to help us understand concepts better . the transition between arrays and linked lists was an effective way to introduce a completely new concept . Contiguous memory and it 's advantages/disadvantages I have never heard of a linked data structure before , so that was definitely the most interesting topic from lecture today for me . Linked Lists I found the linked lists to be the most interesting part of today 's class How the pointers in each part of a linked list can be manipulated to allow adding/removing elements without shifting things The idea of the linked list and how it works . linked list linked lists How linked lists can be traversed ; singly linked vs doubly linked lists Linked lists are composed of non-contiguous pieces of information . Learning about linked lists The process that goes into dynamic arrays for Bag ADT 's The concept of nodes was new to me , and I think it 's a pretty novel concept especially with regards to the memory allocation being very efficient in comparison to arrays Issues with array-based data structures I found the linked lists to be the most interesting part of the lecture as a they are a good alternative to Bags The idea of how a linked last does not use contiguous memory . linked lists A linked list is a way of connecting data entries together via addresses of other entries . I thought LinkedLists was an incredibly interesting and creative solution to the contiguous data problem . I was a little confused as to how two parts are stored in one object , how each part may be accessed individually , and what exactly we might want to use this for . Discussing nodes as a way of storing and referencing memory linked bag implementation Linked Lists Linked Lists can be viable alternatives to arrays . Getting into a brand new concept of linked lists/nodes . Its interesting to begin a whole new approach to coding . I liked talking about the linked list . I had heard about this thing but never knew what it was . @extractive","Many students liked the concept of linked lists . Some of the students found Arrays vs Linked lists , continuous vs non continuous memory allocation , efficiency of data structures and pointers as interesting .","['contiguous memory', 'linked list', 'contiguous data', 'data structure', 'memory allocation']",Most of the students found the concept of the linked list interesting. They also found arrays and the use of contiguous memory interesting. Some students also found the concepts of nodes and the dynamic array interesting.,"Most of the students found the concept of the linked list interesting. They also found arrays and Bags interesting, as well as the process that goes into creating them and the efficiency of the data structure.","In this lecture, students found the concept of linked lists interesting. They also found arrays and dynamic arrays interesting, as well as the differences between arrays and linked lists.","In this lecture, students found the concept of linked lists interesting. They also were interested in the differences between arrays and linked lists, as well as the efficiency of arrays.","In this lecture, students found the concept of linked lists interesting. They also were interested in the differences between arrays and linked lists, as well as the efficiency of the data structures."
"a review sheet of all the sorting algorithms would be nice for looking at the new ones in comparison to the old , but it is easy to see that it can be expected of us to be responsible for that . nothing else was really that confusing or needed more detail Other pivot choosing algorithms how stability works , why mergesort is stable but the author 's version was n't the analysis of the various runtimes of quick sort Quick sort implementation Run time of different pivot points when stable sorting would be beneficial None Since we not sorting in place only costs us o -LRB- n -RRB- , why is it that bad ? the lecture slides say it is n't awful nowadays The last QOTD I 'm a little lost when it comes to discussing the reasoning behind some of the newer quick sort run times I 'm a little lost when it comes to discussing the reasoning behind some of the newer quick sort run times does partitioning indices have a specific location ? How exactly stability is important and when to worry about a certain algorithm not being stable enough for the task you are working on . the quicksort and mergesort algorithm Nothing really , except maybe describing more in detail when quick sort would be used over merge sort . The author 's MergeSort question at the end got me . Where can I find a good example of MergeSort , then ? That confused me . None I did n't get the second question of the day correct . Still kind of confused about stability . Probably the breakdown of the formulas/calculating Big-O run time of the comparisons . merge stability Runtime approximations and combining sorting algorithms to maximize efficiency Some of the potential quiz questions we discuss do n't come to me at first thought , and take a little while to process Everything was well explained today @extractive","Students had several general confusions about mergesort and quicksort , and some specific questions as well . These focused on runtime analysis questions of different cases , such as with different pivots . Some students seemed confused about what stability meant in a sorting algorithm .","['sorting algorithm', 'stable sorting', 'quick sort', 'run time', 'specific location', 'merge sort']","Most students found the concepts related to the various algorithms and their run times confusing. They also struggled with the application of the algorithms, and the application to the problem. Some students also had trouble with the merge sort algorithm, and understanding the run-time of the various iterations of the algorithm.","Most students had trouble understanding the reasoning behind the various algorithms and the run-times of the new ones, as well as the differences between the old and new ones. Some students also had trouble with the stability of the algorithms, especially the merge sort algorithm. A few students also struggled with quick sort and the running time of the algorithm.","In this lecture, the students mostly had trouble understanding the reasoning behind the various algorithms and the run-times of the different algorithms. They also had trouble with the merge sort algorithm, and finding a good example of it.","In this lecture, the students mostly had trouble understanding the reasoning behind the various algorithms and the run-times of the new ones. They also had trouble with the merge sort algorithm, and understanding the difference between the two.","In this lecture, the students mostly had trouble understanding the differences between the various algorithms, and when to use them. They also had trouble with quick sort, the merge sort algorithm, and the run-time of the algorithms."
"trees are the most interesting data structure so far , in my opinion . Recursively getting the height of a binary tree implementing trees in java to store data how to find the height of a binary tree recursively not much was interesting binary tree lengths Binary trees binary tree recursion Lecture felt a little long today though we got out earlier . Nothing struck me as particularly interesting . Binary Tree nodes The entire binary trees discussion Binary trees and how we can traverse them via recursion The height of a tree is found by calling max -LRB- hL , hR -RRB- +1 Recursive processing of binary trees @extractive","Students talked about binary trees , how to recursively traverse and process them , as well as finding the height of a binary tree . A couple students did n't find anything particularly interesting .","['binary tree', 'data structure']",Most students found binary trees and recursion interesting. Some students also found the height of a binary tree interesting. A few students also mentioned using recursion and implementing trees in java.,"Most students found binary trees and recursion interesting. Some students also found the height of a binary tree interesting. A few students also mentioned the use of recursion and the length of a tree, and how to store data.","In this lecture students were interested in binary trees, recursion, and the height of a tree. Some students also found the length of a binary tree interesting, as well as implementing trees in java.","In this lecture students were interested in binary trees, recursion, and the height of a tree. Some students also found the length of a binary tree interesting.","In this lecture students were interested in binary trees, recursion, and the height of a tree. Some students also found the length of a binary tree interesting, as well as implementing trees in java."
"Is there a preferred way to implement heaps ? upHeap & downHeap the author 's implementation of priority queus nothing was particularly confusing or difficult I felt that the explanations of the run times was confusing . How often are heaps actually used in real life applications ? Adding and removing from priority trees Implementation of heap add runtime Up-heap and down-heap were slightly confusing . Heaps cause we rushed through it in like 5 minutes I wish there was a chart to compare Stacks , Queues , Priority Queues , and Heaps . I feel as if they 're mixing in my head now . why is index zero left open in the heap array removing items Nothing really . Very clear lecture . What are heaps exactly good for ? I did not find anything confusing @extractive","Many students were confused about heap implementation , specifically the upheap and downheap functions . Other students were unsure when it would be good to use a heap .","['real life', 'run time']","Most students found heaps and the implementation of priority queus mostly confusing. Some also found up-heap and down-heaps confusing. A few students also found stacks, queues, and stacks and queues confusing.","Most students found heaps mostly confusing. They also had trouble with the implementation of priority queus, and the runtime of the application. Some students also found stacks and down-heaps confusing.","In this lecture students mostly had trouble with heaps, the implementation of priority queus, and the runtime of the application. Some students also had trouble understanding stacks, queues, and down-heaps.","In this lecture students mostly had trouble with heaps, the implementation of priority queus, and the runtime of the application. Some students also struggled with stacks, queues, and down-heaps.","In this lecture students mostly had trouble with heaps, the implementation of priority queus, and the runtime of heap add and remove. Some students also had some trouble with stacks, queues, and down-heaps."
"divide and conquer Recursion being applied to things we already have looked at and comparing how it affects the iterations . Also divide and conquer making recursion have less iterations is interesting . it will be more interesting to compare run-times 1 vs 2 recursive calls in a recursive method I 've never heard of divide and conquer before ! Divide and Conquer recursion Seeing how much more efficient the divide and conquer power method was versus the original method why sequential search through recursion is slower than binary search through recursion efficiency of divide and conquer The number of multiplications that each method of recursion yields How dividing and conquering works recursion with bubble sort concepts The divide and conquer for X ^ N and its efficiency Divide and Conquer method Divide in conquer as an efficient way to recurse I thought it was interesting finding actual cases of recursion being the most efficient method RECURSION :D I found the visuals and accompanying drawings the most interesting . The recursive case for the power function The differentiation between -LRB- x ^ / -LRB- n/2 -RRB- -RRB- ^ 2 and multiplying -LRB- x ^ -LRB- n/2 -RRB- -RRB- * -LRB- x ^ -LRB- n/2 -RRB- -RRB- was pretty interesting today . binary search in recursion Recursion via divide and conquer Divide and Conquer The idea of ` dividing and conquering , ' and it 's runtime comparison to general recursive methods @extractive","Many student found divide and conquer and recursion as the most interesting topics . Students also liked the sub-concepts like efficiency of divide and conquer , binary search using recursion and power function using recursion .","['sequential search', 'original method', 'power method', 'recursive method', 'power function', 'binary search']","Most students found the divide and conquer method interesting. They also found recursion, the power function, and the number of multiplications that each method of recursion yields interesting.","Most students found recursion and the divide and conquer method interesting. They also found binary search in recursion, the power function, and the number of multiplications that each method of recursion yields interesting. A few students also found bubble sort concepts interesting.","In this lecture, students enjoyed learning about the efficiency of recursion, the power function, and dividing and conquering. They also enjoyed comparing run-times of various recursive methods, and the number of iterations in a recursive method.","In this lecture students were interested in the efficiency of the divide and conquer method, recursion, and the power function. They also found the number of multiplications that each method of recursion yields interesting, as well as the runtime comparison to general recursive methods.","In this lecture, students were interested in the efficiency of the divide and conquer method, recursion, and the power function. They also found binary search through recursion and the number of multiplications that each method of recursion yields interesting."
"To be honest , the handout about the Towers of Hanoi that you gave out confused me a little more than before . Why O -LRB- N ^ 2 -RRB- being the result of two nested loops isnt justified enough low/high index Why Simple Sorting is n't ideal bubble sort How the efficiency of sorting can be improved from O -LRB- N ^ 2 -RRB- Shell sort implementation details The exam . how to do towers of hanoi iteratively How the simple sorts differed ? More recursive examples nothing really . very clear . nothing today None , all was very clear I got a little tripped up on the discussion of insertion sort of linked list bubble sort and why it is used big O run time why learn insertion sort if it 's so terrible ? I did n't think there was anything overly confusing . Maybe elaboration on what the kind of problems the inefficient sorts are used for/would be better for would have been ok . Do we need to know BubbleSort ? Nothing really , actually . Today was a fairly easy day . the exam Im still a bit confused on the execution but I hope to review the trace again tonight and get it down . None Are there situations that would necessitate one of the less efficient , yet simpler methods of sorting to be used ? Everything was well explained . Trying to get better test grades in the future . @extractive",Most students had problems with bubble sort and finding Big O runtime for algorithms . Some of them want to know the conditions when the inefficient algorithms will be used . Some had problems with towers of Hanoi .,"['linked list', 'run time', 'insertion sort']","Most students found everything clear. They were mostly confused about the differences between the simple and the more efficient sorts, and the problems they would have liked to have been solved. Some students also had trouble with bubble sort, and how the efficiency of the simple sort was improved.","Most students found everything clear. They also had trouble with bubble sort, the tower of hanoi, and the efficiency of sorting. Some students also had issues with O -LRB- N ^ 2 -RRB- and the simple sort.","In this lecture, students mostly had trouble with bubble sort, the simple sort, and the insertion sort. Some students also had trouble understanding the efficiency of sorting, and how to improve it.","In this lecture, the students mostly had trouble with bubble sort, simple sorting, and nothing at all. They also struggled with the tower of hanoi and the efficiency of sorting.","In this lecture, the students mostly had trouble with bubble sort, simple sorting, and nothing at all. They also had some trouble with O -LRB- N ^ 2 -RRB- and the towers of Hanoi."
"Heaps pretty much just heaps and runtimes Heaps examples of priority queues in real life We learned about different run-times for Queues/Priority Queues , and reviewed Array vs. Linked structures . I found the examples on the board the most interesting . Heap Circular array queues Heap Idea behind heap pq I thought the priority queue was interesting and useful Probably how priority queues can be implemented . Why we did n't review for the final on thursday ... how a heap can be an efficient way to implement a priority queue how the heap can be mapped to an array Heaps Max heaps were pretty cool and I could certainly see their uses . Upheaps and downheaps to add and remove a node from a heap Heap implementation of the priority queue @extractive",Most of the students agreed that the most interesting subject from this lecture was heaps . Other responses included Priority queues and how they can be implemented with a heap,['real life'],"Most students found the heaps and priority queues interesting. They also enjoyed learning about the different run-times for the heap, and how they can be implemented.",Most students found heaps and priority queues interesting. Some also found arrays and runtimes interesting. A few students also mentioned the use of linked structures and downheaps.,"In this lecture, students enjoyed learning about Heaps, Priority Queues, and the various run-times for them. They also enjoyed the examples on the board and learning about Linked Structions.","In this lecture, students enjoyed learning about Heaps, Priority Queues, and the various run-times for them. They also liked learning about Array vs. Linked structures.","Most students found heaps and priority queues interesting. Some students also found arrays and runtimes interesting, as well as the examples on the board. Last, a few students mentioned the problem set for the final."
"I still find it easier to follow any recursive method when the prof shows the Run-Time Stack on the board . Merge method in the handout when we did merge sort , comparing the indexes of the two subarrays resulted in a sorted array . was this coincidental in the example ? algorithm analysis of shell sort Not entirely certain how to implement it Actual implementation details of the sorting algorithms were still a little confusing what makes mergesort more efficient ? Examples of each sorting method How much faster is mergesort ? The mid index compare -LRB- -RRB- if statement in the merge sort code I am a little confused about how shellsort works How do you concatenate the 2 separate arrays after they are sorted ? Do you make a new array ? We have covered many forms of sorting and I am not sure which ones are the most practical for various situations . moving from many single arrays up to one large sorted array in merge sort nothing nothing I was confused at first about if there were multiple , separate arrays or just the division of one , but I think I understand now that there is only one array being divided into two/however many subarrays . I thought that the questions of the day were the most confusing . It would be great if we were given more time to think through them . Nothing was really muddy from today . The worst run times of the sorts were a little confusing , but not too difficult . shellsort Special cases of merge sort The implementation of mergesort Nothing @extractive","There were very diverse confusions , and few students had no confusions . Some common confusions were the runtime analysis of shell and merge sort , and their implementation details . Specific implementation details mentioned were how to merge the subarrays , and how to compare the indices in merge sort .","['sorting algorithm', 'algorithm analysis', 'sorted array', 'sorting method', 'run time', 'recursive method', 'merge sort']","Most students found the merge sort and shellsort to be the most challenging. They also struggled with the implementation of the various sorting algorithms, and the run-time of the algorithms. Some students also had trouble with the subarrays and the indexes of the two subarray.",Most of the students found merge sort and shellsort to be the most challenging. They also struggled with the Run-Time Stack and the implementation of each sorting method.,"Most of the students had trouble with merge sort, and the implementation of shellsort. Some students also had some trouble with the run-time of the algorithms, and nothing.","In this lecture students mostly had trouble with merge sort, and the implementation of shellsort. Some students also had some trouble with the run-time of each sorting method, and nothing at all.","In this lecture, students had trouble with merge sort, shellsort, and the run-time of the algorithms. They also had trouble understanding the differences between the two types of sorting."
"overall very interesting and fun to look at problems that are challenging but cool to play around with . tower of hanoi recursion example only took 4 lines Towers of Hanoi towers of Hanoi . and recursive checking Backtracking The recursive word search program Backtracking in 8 queens towers of hanoi problem the Towers of Hanoi only taking 4 lines of code . The recursive tree touched on at the end of class in the tower of hanoi problem . Recursion , recursion , and more recursion The towers of hanoi problem can be solved in 4 lines of code ! The towers recursion problem I think all of the potential applications of backtracking are very interesting Recursion problems I found the examples the most interesting and the way that our professor explained the examples was interesting as well . I loved the interactive game that you had students play . That 's a great idea for the classroom ! towers Hanoi Towers of Hanoi w / backtracking Hanoi towers - interesting to see how many recursions are required to solve an increasing amount of levels towers of hanoi Backtracking 's usefulness is truly great ; recursion is beautiful Today was pretty interesting . I really liked the find word -- I love boggle ! The Hanoi Tower simulation was cool to watch . @extractive","Most of the students enjoyed the examples of recursive problems , especially the tower of Hanoi problem . Others mentioned applications of backtracking and recursion in general .",[],Most students found the recursion problems and the backtracking examples interesting. They also found the Hanoi Tower problem interesting. Some students also found recursive checking and the find word search interesting.,"Most students found the recursion problem interesting. They also found the tower of hanoi problem interesting, and the recursive word search program interesting. A few students also mentioned the Hanoi Tower simulation and the game.",Most students found the recursion problem and the tower of hanoi problem to be the most interesting part of the lecture. They also enjoyed the recursive word search program and the Hanoi Tower simulation.,"In this lecture, students found the recursion problem and the tower of hanoi interesting. They also enjoyed the recursive word search program and the Hanoi Tower simulation.","In this lecture, students found the recursion problem and the tower of hanoi problem interesting. They also enjoyed the recursive word search program and the Hanoi Tower simulation."
"the tweaking of quicksort showed how we will probably be expected to think at an actual job and helped realize the importance of sorting in place , especially when looking at the default Java sorting algorithms -LRB- because of Java 's use of Objects -RRB- . Stable sorting if you always choose the median as the pivot , quicksort behaves like mergesort the optimizations for quick sort How inefficient quick sort can be if done improperly Effects of different pivot points in quick sort that changing how the pivot is chosen can change a sorted areay from the worst case to the best case The different runtimes for quick sort The idea that sorting in place is so important and speeds up sort times . Quick sort runtime I thought the notion of stability when it comes to sorting was interesting I thought the notion of stability when it comes to sorting was interesting mergesort I found it interesting to see which sorting algorithms java uses , as those are likely the most efficient for various circumstances . the TimSort because it is my name everything about quick sort and merge sort , there was so much We went more in depth to the specifics of MergeSort and QuickSort ; run-time , I especially remember . QuickSort is not stable in the way that it swaps identical values . The JDK does not use it for this reason . I always think learning about performance is cool ! Contrasting between the run times of QuickSort and MergeSort sorting Variations of QuickSort The idea that quicksort is generally faster than merge sort because of the latter ' overhead of not sorting in place Stability was interesting . I never considered this before . @extractive",Most of the responses for this lecture were very similar . Almost all had something to do with quicksort and how the algorithm changes when the position of the pivot is changed . Some students also enjoyed learning about the concept of stability in sorting .,"['actual job', 'sorting algorithm', 'quick sort', 'run time', 'merge sort']","In this lecture, students found the idea of sorting in place and the various runtimes for quick and merge sort interesting. They also found the differences between the two algorithms interesting.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also liked learning about how the various runtimes for quick sort affect sorting in general.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also found the idea of sorting in place interesting, as well as the different runtimes for quick sort.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also found the idea of sorting in place interesting, as well as the different runtimes for quick sort.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also found the idea of sorting in place interesting, as well as the different runtimes for quick sort."
"All was clear specific implementations of circular linked lists and double linked lists would have helped visualize them better I did n't quite understand the purpose of using a vector . I am still iffy about the differences between LList and AList . Vectors the vector class that we went over Indices starting at 1 or 0 in linked list and when to use which How multi-threading works with java -LRB- synchronized vs. asynchronized -RRB- . None . Everything made sense synchronization of vector How to remove certain parts , and the llist compared to the a list What is the run time difference between sorting methods ? -LRB- Selection , Insertion , etc. -RRB- Nothing of note Needed a bit more time for QOTD Nothing Does the direction that you shift data to add/remove data matter ? Vectors and if they are ever useful over other forms of data structures I have heard of threads before , and both then and now they seem a little bit intimidating . I understand that they 're kind of outside the scope of the course , but they do seem very important nothing I thought the lecture was straightforward and clear , since you talked about things we already knew and added onto them . For example , we are already supposed to know how arrays and ArrayLists work , so adding to the end and in the front is something that should make sense to us -LRB- in front shifts left , and the end is less bothersome -RRB- . I think that the way the questions of the days were phrased was a bit confusing . shifting in a linked list special cases of adts Threads and what they are How the slides were n't all up for how far we went in lecture today I did n't learn any runtime analysis in 401 , so WHY binary search is log2 -LRB- N -RRB- I 'm not entirely sure Nothing confused me today . @extractive","There was no extremely common response for this lecture . The two most common responses were threads and synchronization and vectors , especially when they are useful . Other students mentioned confusion over the linked list removal methods , the differences between linked lists and array lists , and algorithm analysis .","['vector class', 'linked list', 'data structure', 'specific implementation', 'runtime analysis', 'sorting method', 'data matter', 'run time', 'binary search']","Most of the students found nothing confusing. Some students had trouble with the concepts of vectors, the differences between LList and AList, and the synchronization of the two. A few students also had trouble understanding the runtime analysis of the linked list, and how to use the threads in java.","Most of the students found nothing confusing. Some didn't fully understand the purpose of a vector, and the differences between LList and AList. A few students also had trouble with the runtime analysis of a linked list, and threading.","In this lecture, the students mostly had trouble understanding the differences between LList and AList, and how to use them. They also had some trouble with threads and synchronization.","In this lecture, the students mostly had trouble understanding the differences between LList and AList, and how to use them. They also had trouble with synchronization of vectors and multi-threading.","In this lecture, the students mostly had trouble understanding the differences between LList and AList, and how to use them. They also had trouble with synchronization of vectors, and the runtime analysis of a linked list."
"the mathematics of different data structures and other simple ops Runtime for Alist and Llist ' I am very excited to start looking at recursion again ! Going over the Assignment the idea of using linked lists The math involved in CS average time vs worst case time The big o concept , the beginning of recursion Runtime differences between AList and LList comparing alist and llist The song of the day Big O derivations The derivations for runtime equations were pretty neat ! I thought the description of differing types of successes -LRB- I.e. LinkedList remove is faster than AList but slower than add -RRB- was very interesting finding the average run time by taking 1/N to compare efficiencies calculating the average run time recursion and more asymptomatic analysis We learned about how to calculate the run-time of a program . Something that may be easier for the coder to do coding-wise may not be the most efficient way to go , even if there are less lines . I found the logic behind amortizing the most interesting . Doing the math to back up our intuition of Big-O values summations Recursion The difference in runtime between different implantation sod methods from the same interface The part about the explanation of what -LRB- n -LRB- n +1 -RRB- -RRB- / 2 was beneficial . @extractive","Many students found calculating runtimes and recursion as most interesting concepts . Some others found runtimes differences between Alists and Llists , Big O derivations and math involved in calculating efficiency of data structures as interesting .","['average run time', 'linked list', 'data structure', 'run time']","The students found the difference in runtime between Alist and Llist, and the difference between the two methods interesting. They also enjoyed learning about the concepts of recursion, the derivations for the runtime equations, and how to calculate the average run-time of a program.","The students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts related to recursion, the derivations of the Big-O concept, and the linked-list example.","In this lecture, students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts related to recursion, the derivations for runtime equations, and the examples used to illustrate them.","In this lecture, students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts of recursion, the derivations of the Big-O concept, and the use of linked lists.","In this lecture, students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts of recursion, the derivations of the Big-O concept, and linked lists."
"Traversing through trees recursively Packages the benefits for the different ways of traversing the trees nothing , everything was pretty straightforward code for blts In order tracing Can a binary search tree be made using a different method of iterating through the tree ? Searchtreeinterface Why might duplicates be problematic ? Nothing was really confusing this lecture . SearchTreeInterface Binary Search Trees None Everything was pretty clear . I had no real questions . Nothing was difficult Some of the operations @extractive",Many of the students were confused by tree traversals and BST implementation . A few others struggled with the searchtreeinterface and packages .,"['binary search', 'binary search tree']","Most students found nothing challenging. Some students had trouble with the search tree interface, and the different ways of traversing the trees. A few students had some trouble with binary search trees, and a few had trouble understanding the benefits of recursively traversing trees.","Most students found nothing challenging. A few students had trouble with the search tree interface and traversing through the trees. A couple students had some trouble with binary search trees, and one student had trouble understanding recursively traversing the tree.","In this lecture, students mostly had trouble with binary search trees, traversing through trees, and the search tree interface. Some students also had some trouble with recursively iterating through the trees.","In this lecture, students mostly had trouble with binary search trees, traversing through trees, and the search tree interface. Some students also had some trouble with recursively iterating through the trees.","In this lecture students mostly had trouble with binary search trees, traversing through trees, and the search tree interface. Some students also had some trouble with recursively iterating through the trees."
"understanding what you are able to divide to speed up the run time nothing in particular Determining bug O of the functions could have used some more discussion I did n't fully understand some of the ` base cases ' Recursion How to call base case The math involved with determining a method effieciency the end of the lecture -LRB- second qotd -RRB- none How to implement the X ^ N = X ^ N/2 * X ^ N/2 , as it has two method calls in one line ? Why should we use a recursion instead of Math.pow -LRB- x , n -RRB- ? recursion with bubble sort implementation The divide and conquer of binary search How do you find and choose the indices ? how to use indices to divide the runtime The divide and conquer idea is a little foreign , and it seems like it might be difficult to establish what is the best way to do something none I thought that going through actual code was a little rushed and confusing . How to find the most efficient recursive case The special cases with reducing the exponent when it 's odd when n = 1 , but eventually I got it after some thought . -LRB- formula : x ^ n = x * -LRB- x ^ -LRB- n/2 -RRB- -RRB- -RRB- optimizing recursion Specifics of divide and conquer Maybe explain how the divide and conquer method works effectively with the power function , when squaring the n/2 exponent Being able to identify when divide and conquer might be more useful than typical recursion @extractive","Many students expressed confusion over how to implement divide and conquer , while a few others were unsure how to determine if it is the most efficient method . Some other students are still confused about finding runtime formulas and using recursion .","['actual code', 'run time', 'power function', 'binary search']","Most students found the divide and conquer method to be the most efficient way to divide the runtime, and the recursion to be a helpful exercise. Some students also found the base case of the function to be helpful.",Most students found the divide and conquer method to be the most efficient way to divide the runtime. Some students also found recursion and the base case of the function interesting.,"In this lecture, the students mostly found the divide and conquer method to be the most efficient way to divide the runtime. They also found recursion and the base case to be helpful.","In this lecture, the students mostly found the divide and conquer method interesting. They also found recursion interesting, as well as the base case of the power function.","In this lecture, students mostly found the divide and conquer method to be the most efficient way to divide the runtime. They also had trouble with recursion and the base case."
"implementing recursion I was interested in learning about the efficiency of several recursive methods that I learned about in 401 . Questions about the Assignment ADT 's and there times sequential search using recursion How recursive programs work in relation to the AR and RTS How ARs and Runtime stacks work Learning about how recursion is implemented , the Activation Record and the Runtime Stack AR and RTS We talked about recursion today . that recursion can actually be used in programs The simplicity recursion has to offer even when doing complex code I thought different cases of recursion were pretty interesting I thought different cases of recursion were pretty interesting recursion I already briefly learned about recursion last semester in CS 401 , so it 's good to revisit it now and learn more in depth about it . It 's even better for me since I 'm already vaguely familiar with it . I found the topic the most interesting . recursion How the runtime stack works The factorial recursion implementation Im intrigued about implementing recursion if its as awesome as Ramirez says it is . Recursion in general is extremely interesting . You learn about recursively defined functions in 441 , but I had a non-CS guy , so the programming aspects of it were n't really discussed . Recursive methods can be used for sequential searches @extractive","Most of the class found recursion as interesting . Some of them also found activation records and runtime stacks as interesting . A very few students liked sequential search , factorial and questions about the assignment .","['runtime stack', 'sequential search', 'complex code', 'recursive method']","In this lecture students were interested in recursion, the implementation of recursive methods, the AR and RTS, and the runtime stack. They also found sequential searches and the Assignment ADT interesting.","In this lecture, students were interested in implementing recursion, learning about the AR and RTS, and the factorial recursion implementation. They also found sequential searches and the runtime stack interesting.","In this lecture students were interested in recursion, the implementation of recursive methods, and the AR and RTS. They also found sequential searches and the runtime stack interesting.","In this lecture students were interested in implementing recursion, learning about the AR and RTS, and the factorial recursion implementation. They also found sequential searches and the runtime stack interesting.","In this lecture students were interested in implementing recursion, learning about the AR and RTS, and the factorial recursion implementation. They also found sequential searches and the runtime stack interesting."
"Threads -RRB- : unfortunately , we wo n't be talking anymore about them . the beginning of run-time analysis Algorithm analysis seems interesting as we begin to make our code efficient . I really enjoyed the enthusiasm about efficiency across the different searching methods . Prof Ramirez 's sound effects and the discussion of threads . the adding and removing methods in a lists Circular linked lists and its special cases How the vector class maintained its legacy methods . Implementation of linked list methods and the efficiency of binary vs. sequential search efficiency of binary search vs sequential search The synchronization methods , and the vector class originally in Java . Runtimes ! Learning about multithreaded operations Threads and synchronization How large the difference in runtime is for something as simple as a sequential vs. binary search . The ways to use a list ADT . How the efficiency of binary search makes such a huge difference in time I thought the discussion of analysis was really interesting , especially when considering how much of a difference the correctly optimized program/algorithm makes . I 'm still not 100 % sure how the analysis is actually conducted , but it 's an interesting topic nontheless . Runtimes I thought it was interesting that the reason the list starts at 1 is so that it is easily resizable . I 'm glad there was elaboration on the mechanics about that since I thought , at first , that it was some random implementation that I did n't need to understand . I found the lecture topic most interesting , as well as the engaging PowerPoint . how much more efficient binary search is compared to sequential search a list vs l list Algorith analysis ' Remove Gap Vectors Threads : I would love to learn more about them I liked talking about synchronization . Threads are very interesting to me but I have n't the slightest idea of how to use them . It is beyond the scope of this class but I wish we could go in more depth ! @extractive","Many students found the concepts of runtime analysis , threads and efficiency between binary and sequential search as interesting . Some other students liked synchronization and vectors .","['vector class', 'slightest idea', 'sequential search', 'linked list', 'huge difference', 'lecture topic', 'binary search']","Most students found the efficiency of binary search and the related algorithms interesting. They also found runtimes, the synchronization methods, and the linked list interesting.","Most students found the efficiency of binary search, the runtimes, and the algorithm analysis interesting. A few students also found the vector class interesting, as well as the circular linked list.","The students enjoyed learning about the efficiency of binary search vs sequential search, the runtimes, and the algorithm analysis. They also found the vector class and its legacy methods interesting.","In this lecture, students were interested in the efficiency of binary search, the runtimes, and the algorithm analysis. They also enjoyed learning about the vector class and its legacy methods.","In this lecture, students were interested in the efficiency of binary search, the runtimes, and the algorithm analysis. They also enjoyed learning about the vector class and its legacy methods."
"Analysis of trees and in particular binary trees through backtracking Arbitrary trees using adjacency trees to make coding more efficient The structures of trees and various types of trees binary trees Binary Trees Finding out what trees were Binary tree concept Recursive definition of the trees BSTs and how the are traversed . Recursion in binary trees I thought the introduction of binary trees was interesting Tree structures and leaves I found trees to be the most interesting because of their familiarity and the implementations of them . implementing trees and finding there height Today , we learned about Iterators and Iterables . We also started on tree structures/binary trees in comparison to linear structures . Binary trees are naturally traversed recursively , with base cases checking if a node is a leaf node in order to define a subtree . I liked learning about binary trees , it seemed very useful for future classes . Probably the fact we started binary trees today , especially full binary trees . trees structure Moving on from sorting Everything really ; binary trees , I imagine , will have plenty of practical uses . The nodes were interesting @extractive","The students overwhelmingly mentioned trees , in particular binary trees . They noted the novel tree structure and it 's recursive nature . Some mentioned methods used to traverse a tree structure , and how trees may prove useful in the future .",['binary tree'],"In this lecture, students enjoyed learning about binary trees, tree structures, and the recursive definition of the trees. They also enjoyed learning more about the applications of the concepts and implementing them.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are used in general. They also enjoyed the analysis of trees and the various types of trees, and the implementation of them.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting."
"some realistic applications for binary trees at their introduction would have helped visualize them Why we didnt learn iterators at the beginning of the term how to actually code the trees trees mathematical analysis minimum size of a binary tree How to iterate through a tree Exact implementation of trees None Iterators still are a bit confusing . Maybe walking through the example one more time would be helpful . I understood everything I 'm not sure why we would need a tree or how it could be implemented Can trees be connnected to eachother ? Iterators are generally still confusing me . How to set them up and when they are necessary . how to actually set up nodes with multiple references I 'm going to explain what I learned . Iterators/Iterables work together ; Iterable can only be used with Iterators to do for each loop like tasks . Tree structures have parent , interior , and leaf types within the structure ; it also iterates with recursive backtracking , unlike linear structures . If any of this is wrong , perhaps that 's what could be elaborated on . How efficient is it to get around in a binary tree ? If I wanted to look for a certain value , I feel like it would take much longer to get to than a linked list , or other data structure would . I do not think I had enough time for the second clicker question . There were too many options ... it was hard to pick based upon the time provided . I like it when you give a maximum of four options to pick from . That is less stressful . Uhh , probably how to evaluate binary trees , having to go up and down constantly . recursive definition of trees N/a today What those uses are exactly I would be interested in knowing more about . Nothing @extractive","There was no overwhelmingly popular answer for this lecture . Some of the common responses include the implementation of trees , iterators , applications of binary trees , and how to assess the size/efficiency of a tree .","['linked list', 'binary tree', 'data structure', 'recursive definition']","Most students found the binary tree and iterators confusing. They also struggled with the recursive definition of trees, and the use of iterators. Some students also had trouble with the application of the trees.","In this lecture, the students mostly had trouble with the implementation of binary trees and iterators. They also had trouble understanding how to set up the nodes in a tree, and how to iterate through the structure. Some students also struggled with the recursive definition of trees, and the use of iterators/Iterables.","In this lecture, students mostly had trouble understanding how to iterate through a binary tree, and how to set up iterators. They also had trouble with the recursive definition of trees, and the application of the trees.","In this lecture, students mostly had trouble with the implementation of binary trees, iterators, and the recursive definition of trees. Some students also had trouble understanding how to set up the nodes in a tree, and how to iterate through a tree.","In this lecture, students mostly had trouble with binary trees, iterators, and the recursive definition of trees. Some students also had trouble understanding the use of iterators and how to set them up."
"the ` hack ' way of analyzing the Big-O of QuickSort seems really interesting and helpful Quicksort runtime of mergesort quick sort Quicksort Quick sort Algorithm behind quicksort the difference in approaches between mergesort and quicksort Sorting runtimes Quicksort and big O of mergesort Merge and quick sorts I thought merge sort was an interesting approach to sorting a list of data partition Quick sort and how it selects a pivot point and sorts the data into 2 halves quicksort merge sort and quick sort We carefully examined Merge Sort and Quick Sort . I liked learning more about MergeSort and thought it was really clearly explained , especially with your board example . QuickSort was definitely the highlight of today 's class . quick sort Quick sort ; primarily the concept of it Quick sort @extractive","All students responded with either mergesort , quicksort , or assessing the runtimes of these sorting algorithms .","['quick sort', 'data partition', 'merge sort']",Most students found the concepts of QuickSort and MergeSort interesting. Some students also found the runtime of quicksort and the difference between mergesort and quicksorts interesting.,"Most students found the concepts of QuickSort, MergeSort, and the runtime of quicksort interesting. A few students also mentioned the Big-O of the algorithms and the differences between them.","In this lecture, students enjoyed learning about quicksort, merge sort, and quick sort. They also found the ` hack'approach to sorting interesting, as well as the difference between the two approaches.","In this lecture, students enjoyed learning about quicksort, mergesort, and quick sort. They also found the ` hack'approach to sorting interesting, as well as the difference between the two approaches.","In this lecture students enjoyed learning about QuickSort, MergeSort, and the runtime of mergesort. They also found Sorting runtimes and the Big-O of QuickSort interesting."
"knowing exactly how we will implement analysis on different data structures and operations in everyday things Math for resizing an array by 2 I am still confused about some of the differences between AList and LList . Recursion Why we were going over the 0 -LRB- n -RRB- or 1 . I did n't understand what that was used for Big O notation when adding and removing nodes in specific ADT 's amortized time of add to arraybag The different run times ? Amortized times calculations N vs. i when we are looking at big O the math Some of the math Some of the math ... specifically when to round . I get how -LRB- n +1 -RRB- goes to n as n - > infinity but it just bugs me to drop out terms like that Recursion , and its ramifications on efficiency what amertized run time actually means finding the big O Asymptotic vs. Amortized , why use one over the other ? I sometimes do n't understand where all the numbers come from to even calculate the Big O out o the equation . Even thought it seemed simple enough on the board -LRB- 1 +2 +3 ... + N = N -LRB- N +1 -RRB- / 2 -RRB- , that type of thing does n't come naturally to me and I feel like I would need more practice . The logic behind getting the big O from different methods in the list interface and the bag interface confused me . Some of the math amortized time The summation When we need to look at amortized cost and when we need to simply look at the asymptotic analysis I was n't confused but I do realize that I really need to practice the math of this . I hope there are examples in the textbook . @extractive","There are a few common responses in this prompt . Many students reported confusion over the math presented in the lecture , some specifically mentioning the summation equation . Other students were shaky on amortized time , while others are still struggling with producing runtime equations . It is interesting to note that not a single student responded with `` nothing was confusing '' in this lecture .","['asymptotic analysis', 'list interface', 'amortized time', 'data structure', 'amortized cost', 'run time', 'removing node']","Most of the students had trouble with the math of the Big O, especially the amortized time of the computation. Some of the others had trouble understanding the differences between AList and LList, and the asymptotic analysis. A few students also had trouble using the recursion interface and the bag interface.","Most of the students had trouble understanding the differences between AList and LList, the amortized time of an array, and the asymptotic analysis. A few students also had trouble with the recursion in the list interface.","Most of the students had trouble understanding the differences between AList and LList, the amortized time of an array, and the asymptotic analysis. A few students also had trouble with the recursion in the algorithm.","Most of the students had trouble understanding the differences between AList and LList, the amortized time of an array, and the asymptotic analysis. A few students also had trouble with the recursion in the list interface.","In this lecture, the students mostly had trouble understanding the differences between AList and LList, the amortized time of add to array and the asymptotic analysis. They also had trouble with the recursion in the list interface and the sum/difference calculation."
"the dynamic bag I found the creation of the Bag to be the most interesting . Learning about bags was very interesting . Dr. Ramirez cleared up my understanding of how they should work . I was really interested in learning all about an entirely new data structure , the Bag . I 'm also noticing that as these classes get farther along , there is more focus on real world factors that determine strength of code like speed The bag concept was cool how basically acts like a bag in real life with its usefulness . Bags as a data type and how flexible they are . Discussing the Assignment 1 I found the examples and drawings the teacher drew on the whiteboard the most interesting . Abstraction , though seemingly intimidating is kind of just giving programmers a break right ? We 're given so many more abilities and operations without having to know exactly how to code that . That being said , while I understand the applications being explained to me , it 's hard to just manifest that on my own . Learning about resizing Bags dynamically The discussion of the underlying methods of ADTs such as bags was most interesting the implementation of an array bag Order does not matter when using a bag . It is important to keep all of the values in an array together . To do this , you should move an existing element into the vacant spot . Looking at ADT 's from both perspectives Information held in bags is not in any particular order different ways to implement the bag Thinking about a more general idea of coding with ADTs and starting to dig into data structures more specifically . Code examples of key concepts/methods is always helpful . I thought it was a good thing to go through the implementation of both the add -LRB- -RRB- and remove -LRB- -RRB- methods of the Bag ADT Today we were talking about a certain type of ADT called a bag . We talked about certain ways that we would implement the methods and certain special cases that we as programmers have to be aware of . If you were removing items from ADT bag , you can simply shift the bottom or last item and put it in the place where you we removed an item . This is because , in bags , order does not matter . Learning about managing arrays in a data structure The bag ADT and how it is implemented @extractive","Most of the students found the implementation of bags to be the most interesting concept . Some others found ordering in bags , array bags , code examples and resizing concept of bags to be interesting .","['data type', 'real life', 'data structure', 'existing element', 'real world', 'vacant spot']","In this lecture, students found the implementation of the Bag and its various methods interesting. They also found the general concepts of ADTs and the dynamic array interesting.","In this lecture, students found the implementation of the Bag and ADTs interesting. They also enjoyed learning about arrays and how they are used in general.",Most of the students found the implementation of ADTs interesting. They also enjoyed learning about the dynamic Bags and how to use them in a data structure. Some students also found the assignment interesting.,"In this lecture, students enjoyed learning about ADTs, the implementation of an array, and the dynamic bag. They also found the examples and drawings interesting.","In this lecture, students found the implementation of ADTs and the dynamic bag to be the most interesting part of the lecture. They also enjoyed learning about arrays in general and how to use them."
"when recursion is a better option than a loop I thought it was clear . You need these 3 things for recursion to work ... But I kind of did n't understand if it were flexible ? Like , are the recursive/base cases the only cases strictly allowed ? Also , it is like the first one in is the first one out type of deal for the output , right ? ? Using recursion while searching Using recursion while searching tracing recursion when should I use recursion over iteration ? Recursion I found the wording of the question of the day confusing . Nothing stacks The mindset involved in thinking about non-mathematic problems recursively is something I 'll have to get used to . nothing When to use recursion efficiently I can understand how you run up the stack but I get confused about coming back down with more complex examples . Id love to go over the trace from 401 's final . There was not any point that was too muddy from today . The sequential search recursive implementation when a recursive algorithm would be most efficient More examples on recursive programs Why use recursive calls ? Are n't loops the same ? Everything was explained well . Iterating through list recursively : I really wish you would n't rush to cram one more thing in to the end of a lecture . Usually you explain stuff really really well , but the stuff that you always race to cram in to the last three minutes of the lecture never makes sense because you are flying through it . I would rather you take questions or something and wait until next class to go over that concept at .5 the speed it was gone over it the last three minutes of this class . None @extractive","Again , most responses relate to recursion . Some are unsure why they might use recursion instead of a loop , some did not understand the recursive sequential search , and a few more are confused about tracing recursion .","['sequential search', 'recursive algorithm']","Most students found recursion to be the most confusing concept of the day. They also had trouble with the examples given in class. Some students also had some trouble with tracing recursion, and the general concepts of the problem.","Most students found recursion to be the most interesting topic of the day. Some students also had trouble with sequential search, tracing recursion, and the last three minutes of class.","In this lecture, the students mostly had trouble with recursion. They also had some trouble with sequential search, tracing recursion, and the last three minutes of the lecture.","In this lecture, the students mostly had trouble with recursion. They also had some trouble with sequential search, tracing recursion, and the last three minutes of the lecture.","In this lecture, most students found recursion to be the most interesting topic of the day. Some students also had trouble with sequential search, tracing recursion, and the last three minutes of class."
"Is there an easier way to remove nodes when a node has 2 children ? the code for removing a node with more than one child the delete method for an inner node was a little unclear Quiz2 how do you Fergie ab nor how delete works Add -LRB- -RRB- for BST I think the examples on the board were confusing and could be put in the PowerPoint to be more easily understood . Removing from a binary search tree Run time analysis add and remove Why did I stay up so late last night How we decide and how to remove a node with two children . How binary search trees implement various methods It was not confusing The implementation of some of the methods like add and remove . The explanation was fine , but the code was pretty hard to examine . The interface used to navigate a bst Iterative implementations of BST methods @extractive","Many students were confused by how to remove nodes from a binary search tree , especially if that node had 2 children . Fewer were confused by the add method , or other methods that work on BSTs .","['binary search', 'binary search tree']","Most of the students found the implementation of the binary search tree methods and the delete method confusing. Some students also had trouble with add and remove, and the binary tree interface.","Most of the students had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also had trouble understanding the implementation of BST methods.","In this lecture students mostly had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also had trouble understanding the implementation of BST methods.","In this lecture, students mostly had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also struggled with the implementation of BST methods, and the quiz.","In this lecture students mostly had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also had trouble running time analysis and understanding the implementation of BST methods."
"some actual code to go with the examples would have been helpful , but we covered a lot of material so it was understandable Managing nodes via a doubly circular linked list the runtimes of doing a queue with an array or linked list Queues implementation of a queue vs a stack H ! -LRB- 0N $ R. | m H@NGR ¥","Most of the students found implementation of queues as confusing . Some others found the differences between queues with linked lists and arrays , circular and double linked lists , stacks and queues as confusing .","['linked list', 'actual code']","In this lecture students enjoyed learning about queueing, the runtimes of a queue, and the differences between a stack and a linked list. They also enjoyed managing nodes via a doubly circular linked list and array.","In this lecture, students were mostly interested in the runtimes of a queue and the linked list. Some students also found the examples helpful, especially the examples of managing nodes via a queue.","In this lecture, students were mostly interested in the runtimes of a queue, and the implementation of a linked list. Some students also were interested in Managing nodes via a doubly circular linked list, and using arrays.","In this lecture students enjoyed learning about the runtimes of creating queues, managing nodes via a doubly circular linked list, and the differences between a queue and a stack.","In this lecture, students were mostly interested in the runtimes of doing a queue with an array or linked list, as well as managing nodes via a doubly circular linked list."
"the ` hack ' way of analyzing the Big-O of QuickSort seems really interesting and helpful Quicksort runtime of mergesort quick sort Quicksort Quick sort Algorithm behind quicksort the difference in approaches between mergesort and quicksort Sorting runtimes Quicksort and big O of mergesort Merge and quick sorts I thought merge sort was an interesting approach to sorting a list of data partition Quick sort and how it selects a pivot point and sorts the data into 2 halves quicksort merge sort and quick sort We carefully examined Merge Sort and Quick Sort . I liked learning more about MergeSort and thought it was really clearly explained , especially with your board example . QuickSort was definitely the highlight of today 's class . quick sort Quick sort ; primarily the concept of it Quick sort @extractive","Most of the students found quick sort and merge sort as interesting concepts . Some said sorting runtimes , difference between quick and merge sorts and analyzing Big O of quick sort as interesting .","['quick sort', 'data partition', 'merge sort']",Most students found the concepts of QuickSort and MergeSort interesting. Some students also found the runtime of quicksort and the difference between mergesort and quicksorts interesting.,"Most students found the concepts of QuickSort, MergeSort, and the runtime of quicksort interesting. A few students also mentioned the Big-O of the algorithms and the differences between them.","In this lecture, students enjoyed learning about quicksort, merge sort, and quick sort. They also found the ` hack'approach to sorting interesting, as well as the difference between the two approaches.","In this lecture, students enjoyed learning about quicksort, mergesort, and quick sort. They also found the ` hack'approach to sorting interesting, as well as the difference between the two approaches.","In this lecture students enjoyed learning about QuickSort, MergeSort, and the runtime of mergesort. They also found Sorting runtimes and the Big-O of QuickSort interesting."
"Are there more efficient methods to use other than iterators ? how the efficiency of iterating through LLists can be increased it may have been helpful to have more detail about other ways we can implement the Iterative interface Iterators implementing iterators for different data structures how the curr pointer is encapsulated the code behind the iterator I thought the explanation for run time were confusing and should have more time spent on them . The difference between internal and external , since we did n't really cover when we 'd ever use an internal iterator . Implementation details of iteration nothing I understood everything today I was n't sure exactly what getEntry -LRB- i -RRB- was least efficient in ? For the iterator interface , I thought it was supposed to be better -LRB- since it did n't need to start at the beginning -RRB- ? But then , there 's another one that always needs to start in the beginning ? Is that one arrays ? Perhaps it was a lot to take in at once ... especially now that I need to apply it to all the different kinds of lists . LList , AList , with and without the iterator ... I 'm not sure if that 's all I need to worry about ? None Some of the code in the handouts Some of the implementation of iterators . I 'm just not sure I could do it yet . Why quick sort is so much faster than merge sort The implementation of Iterators and why we would need more than 1 @extractive","The students were mainly confused by the implementation details of iterators , and other details of iterators . Some did n't understand how they could be used to improve efficiency , and their use in the context of lists .","['data structure', 'quick sort', 'run time', 'merge sort']","Most students found the implementation of iterators and the difference between internal and external iterators confusing. Some also had trouble with the efficiency of LLists, and the implementation details of the iterative interface.","Most of the students had trouble with the implementation of iterators, especially the implementation details of the LRB-i- and -RRB- interfaces. Some students also had trouble understanding the difference between internal and external iterators. A few students had some trouble with LLists, and the quick sort and merge sort methods.","In this lecture, students mostly had trouble with the implementation of iterators. They also had trouble understanding the difference between internal and external iterators, and the efficiency of LLists.","In this lecture, students mostly found the implementation of iterators interesting. They also were interested in the efficiency of LLists, the difference between internal and external iterators, and the quick sort and merge sort.","In this lecture, students mostly found the implementation of iterators interesting. They also were interested in the efficiency of LLists, the difference between internal and external iterators, and the quick sort and merge sort."
"nothing in particular 8 queens problem towers of hanoi example Nothing Not very much . questions about assignment 3 primarily Nothing Backtracking without looping for use in assignment 3 's indexOf method Some of the recursion was confusing but it just requires more tracing trace of towers of hanoi some of the ways we would trace through a backtracking problem still not quite confident with the actual physical implementation of recursive methods . None using recursion to find strings Without really having written my own backtracking program to understand the functionality , It 's hard to think about how it can be actually implemented none I think describing the binary recursive tree needs more time to be described . There were n't any muddy points from today . 8 queens How people come up with these algorithms Code specifics/sample code for backtracking implementation of word finer algorithm The implantation of backtracking Everything was well explained today . I have a few questions about the power functions . @extractive","Many of the students are confused by the examples of recursive problems : the towers of Hanoi , the word find algorithm , and the 8 queens problem . Many others are unsure how to implement recursive algorithms in code .","['recursive method', 'tracing trace', 'power function']","Most students found the backtracking problem mostly interesting. Some students also found the 8 queens problem and the recursive methods interesting. A few students had trouble with assignment 3, the binary recursive tree, and the power functions.","Most students had no issues. Some students had trouble with the backtracking algorithm, and the assignment 3 method. A few students also had some trouble with recursion and the power functions.","Students mostly had trouble with the backtracking algorithm, the assignment 3 method, and the 8 queens problem. Some students also had some trouble with recursion and the binary recursive tree.","In this lecture students mostly had trouble with the backtracking algorithm, the assignment 3 method, and the 8 queens problem. Some students also had some trouble with recursion and the binary recursive tree.",In this lecture students mostly had trouble with the implementation of backtracking algorithms. They also had some trouble with assignment 3 and recursion. Some students also had trouble understanding the 8 queens problem.
"I thought it was useful to learn more about the Towers of Hanoi problem . How bad the simple sorts are insertion sort is not efficient Simple Sorting sorting methods Doing insertion sort with only 1 array Applying sorting methods to linked lists rather than arrays InsertionSort how to do insertion sort The way the towers of Hanoi trace worked Reviewing the exam stats That all simple sorts are O -LRB- n ^ 2 -RRB- Sorting algorithms that I knew already are inefficient . The fact that various simple sorting algorithms all have the worst-case run-time of O -LRB- N ^ 2 -RRB- I thought that it was interesting that all of the simple sorts we discussed , though some are more popular than others , all have the same big O Runtime insertion sort and reviewing the exam bubblesort Insertion sort We learned that all these sorts -- Insertion , Selection , Bubble ... all their Big-O run-times are awful , but we 're learning about efficient sorts after break . The solution to the Tower of Hanoi problem Thought analyzing the various sorts we 've done before but this time with an eye for efficiency was pretty fun . The sorting algorithms I thought the towers of hanoi trace really helped from last class . Sorts The ways to sort groups of data , specifically the simplicity of some of them Today the binary tree was explained very well . The handout was super helpful . @extractive",Most students reported enjoying learning more about the simple sorts from this lecture . Many specifically mentioned learning that the `` simple '' sorts all have the same Big O runtime . A few other students also mentioned revisiting the Towers of Hanoi problem and reviewing the exam .,"['linked list', 'sorting algorithm', 'simple sorting', 'binary tree', 'sorting method', 'insertion sort']","Most students found the simple sorting algorithms interesting. They also enjoyed learning about the Tower of Hanoi problem, the insertion sort, and the exam stats.",Most students found simple sorting methods to be the most interesting part of this lecture. They also found the towers of Hanoi problem interesting. Some students also found insertion sort and the exam stats interesting.,"In this lecture, students enjoyed learning about the various simple sorting algorithms, including insertion sort, selection, and bubble. They also found the towers of Hanoi problem and the exam stats interesting.","In this lecture, students enjoyed learning about the various simple sorting algorithms, including insertion sort, selection, and bubble. They also found the towers of Hanoi problem interesting.","In this lecture, students enjoyed learning about the various simple sorting algorithms, including insertion sort, selection, and bubble. They also found the towers of Hanoi problem interesting."
"Traversing through trees recursively Packages the benefits for the different ways of traversing the trees nothing , everything was pretty straightforward code for blts In order tracing Can a binary search tree be made using a different method of iterating through the tree ? Searchtreeinterface Why might duplicates be problematic ? Nothing was really confusing this lecture . SearchTreeInterface Binary Search Trees None Everything was pretty clear . I had no real questions . Nothing was difficult Some of the operations @extractive","Students were largely unconfused by the lecture material . Others were confused about specific traversal methods for binary search trees , and the search tree interface used when defining search trees . One student was confused about packages .","['binary search', 'binary search tree']","Most students found nothing challenging. Some students had trouble with the search tree interface, and the different ways of traversing the trees. A few students had some trouble with binary search trees, and a few had trouble understanding the benefits of recursively traversing trees.","Most students found nothing challenging. A few students had trouble with the search tree interface and traversing through the trees. A couple students had some trouble with binary search trees, and one student had trouble understanding recursively traversing the tree.","In this lecture, students mostly had trouble with binary search trees, traversing through trees, and the search tree interface. Some students also had some trouble with recursively iterating through the trees.","In this lecture, students mostly had trouble with binary search trees, traversing through trees, and the search tree interface. Some students also had some trouble with recursively iterating through the trees.","In this lecture students mostly had trouble with binary search trees, traversing through trees, and the search tree interface. Some students also had some trouble with recursively iterating through the trees."
"Nothing that I can think of right now . I think question of the days could be worded more clearly . how to actually write the code for nodes was kind of confusing but is a concept we will go over more in the next lecture . the authors code of resizable arrays can be confusing to read at times Implementation of nodes in a linked list I ca n't think of anything that was not clear to me from class today . Resizable Array Bags I never fully understood how to utilize linked lists in my coding . Nothing in particular Reasoning for a class within a class was a bit rushed at the end how to double an array use of an inner node class for the linked list Scenarios where arrays would be better to use than linked lists The implementation of nodes and traversing a list . I think we are covering more of this later . Implementation if linked lists and internal classes . I assume that will be gone over more later though . The QOTD about the normal case I 'm not sure how to instantiate or even traverse such a linked list , or what would even be the use of a circular linked list how can the array be implemented into the bag structure ? in what situations it is more beneficial to use a bag or a linked list . I was unsure if you could access a single node in the linked list without going through the entire list . Similarities/differences of linked lists and bags Nothing was too confusing Definitely just what a LinkedList is useful for and how exactly the two nodes are stored together . How nodes are stored and referenced within a Bag nodes and inner classes Contiguous Memory Structures It seems like well dig into implementation in the next class so Ill leave that for then . Everything was explained well . We did n't get to the information involved in the last question of the day . I hope we cover that next time . @extractive",Many students found the implementation of nodes in the linked lists as confusing . They want to know the situation when the linked lists can be used . The other concepts that were confusing are inner classes and resizable arrays .,"['linked list', 'entire list', 'node class', 'single node', 'bag structure']",Most of the students found the implementation of a linked list and the use of a bag interesting. Some also found the reasoning for a class within a linked lists interesting. A few students also found resizable arrays and inner classes confusing.,"Most of the students found the implementation of a linked list and the use of a bag to be the most challenging part of this lecture. They also struggled with the reasoning behind a class within a class, and the differences between linked lists and arrays. A few students also had trouble with the implementation if an inner class.","In this lecture, the students mostly found the implementation of a linked list and a bag confusing. They also struggled with the reasoning behind a class within a class and the use of an array.",Most of the students found the implementation of a linked list and a bag confusing. They also found the reasoning for a class within a class and the use of an inner class confusing. Some students also had trouble with resizable arrays and traversing a list.,"Most of the students found the implementation of a linked list and the use of a bag interesting. They also were interested in the differences between the two types of lists, the reasoning behind a class within a class, and how to use an array."
"overall very interesting and fun to look at problems that are challenging but cool to play around with . tower of hanoi recursion example only took 4 lines Towers of Hanoi towers of Hanoi . and recursive checking Backtracking The recursive word search program Backtracking in 8 queens towers of hanoi problem the Towers of Hanoi only taking 4 lines of code . The recursive tree touched on at the end of class in the tower of hanoi problem . Recursion , recursion , and more recursion The towers of hanoi problem can be solved in 4 lines of code ! The towers recursion problem I think all of the potential applications of backtracking are very interesting Recursion problems I found the examples the most interesting and the way that our professor explained the examples was interesting as well . I loved the interactive game that you had students play . That 's a great idea for the classroom ! towers Hanoi Towers of Hanoi w / backtracking Hanoi towers - interesting to see how many recursions are required to solve an increasing amount of levels towers of hanoi Backtracking 's usefulness is truly great ; recursion is beautiful Today was pretty interesting . I really liked the find word -- I love boggle ! The Hanoi Tower simulation was cool to watch . @extractive",Most of the students liked the tower of Hanoi and its 4 lines of code . Some other students said that recursion and backtracking are interesting . The examples and the interactive game are also liked by some students .,[],Most students found the recursion problems and the backtracking examples interesting. They also found the Hanoi Tower problem interesting. Some students also found recursive checking and the find word search interesting.,"Most students found the recursion problem interesting. They also found the tower of hanoi problem interesting, and the recursive word search program interesting. A few students also mentioned the Hanoi Tower simulation and the game.",Most students found the recursion problem and the tower of hanoi problem to be the most interesting part of the lecture. They also enjoyed the recursive word search program and the Hanoi Tower simulation.,"In this lecture, students found the recursion problem and the tower of hanoi interesting. They also enjoyed the recursive word search program and the Hanoi Tower simulation.","In this lecture, students found the recursion problem and the tower of hanoi problem interesting. They also enjoyed the recursive word search program and the Hanoi Tower simulation."
"Heaps pretty much just heaps and runtimes Heaps examples of priority queues in real life We learned about different run-times for Queues/Priority Queues , and reviewed Array vs Linked structures . I found the examples on the board the most interesting . Heap Circular array queues Heap Idea behind heap pq I thought the priority queue was interesting and useful Probably how priority queues can be implemented . Why we did n't review for the final on thursday ... how a heap can be an efficient way to implement a priority queue how the heap can be mapped to an array Heaps Max heaps were pretty cool and I could certainly see their uses . Upheaps and downheaps to add and remove a node from a heap Heap implementation of the priority queue @extractive","Most of the students found heaps and priority queues as interesting . Some others found finding runtimes , array vs linked structures , up-heap and down-heap as interesting .",['real life'],"Most students found the heaps and the priority queue interesting. They also enjoyed learning about the different run-times for the heap, and the examples of the various types of heaps.",Most students found heaps and priority queues interesting. Some also found arrays and run-times interesting. A few students also mentioned the examples on the board and the final.,"In this lecture, students enjoyed learning about heaps, the priority queue, and the various run-times for them. They also liked learning about arrays and how they can be used in general.","Most students found heaps and priority queues interesting. Some students also found arrays and runtimes interesting, as well as the examples on the board. Last, a few students mentioned the problem set of the final as an interesting topic.","Most students found heaps and priority queues interesting. Some students also found arrays and runtimes interesting, as well as the examples on the board. Last, a few students mentioned the problem set of the final as their favorite."
"nothing in particular Quicksort code quick.java trace quick sort partitioning code What you do when your pivot is the smallest or largest value Nothing Exact implementation details of quick sort the tree of execution for mergesort Nothing implementation of quicksort Some parts of the quick sort algorithm Run times for the sorts is mergesort a tree execution ? How do recursive sorting methods have faster run times if generally iterative approaches are faster tree execution trace The power of different pivots in quick sort I think it was fine , although I did get the first of the QoTDs wrong . That 's more of a jab at my deductive reasoning skills rather than Dr. Ramirez 's teaching . I did n't realize that it was O -LRB- logN -RRB- for the entire Merge Sort and O -LRB- N -RRB- for each separate time it split up . I thought that , if it split up N times , then made sense that the entire sort was O -LRB- N -RRB- and the smaller ones O -LRB- logN -RRB- . If anything I explained here is wrong , maybe that 's the feedback in of itself , but I 'm learning ! Nothing was really muddy from today . It was a little complicated to understand Big-O run time of Merge Sort pivot The implementation of these algorithms is always confusing at first . A hands on approach will help me though Merge sort used non constant amount of extra memory @extractive","Many students were confused about the implementation of the quicksort algorithm , some specifically mentioning using pivot points . Others mentioned the tree execution of mergesort and analyzing the runtimes of these sorting algorithms .","['extra memory', 'quick sort', 'sorting method', 'constant amount', 'run time', 'separate time']",Most students found the implementation of the quick sort algorithm and the merge sort algorithm mostly confusing. Some students also had trouble with the run time of the tree of execution and the power of different pivots in the algorithm.,Most students found the implementation of quick sort and mergesort to be the most challenging part of this lecture. Some students also struggled with the run time of quicksort and the power of different pivots in the algorithm.,"In this lecture, students mostly had trouble with the implementation of quicksort and the merge sort. They also had trouble understanding the run-time of the sort and the power of different pivots in quick sort.","In this lecture, students mostly had trouble with the implementation of quicksort, the run-time of mergesort, and the power of different pivots in quick sort. Some students also had trouble understanding the log-N -RRB- difference between the smaller and larger values.","In this lecture, students mostly had trouble with the implementation of quicksort and mergesort. They also had trouble understanding the run-time of quick sort and the power of different pivots in the algorithm."
"iterators and their uses I found analyzing linked lists in regards to runtime to be interesting applying sorting algorithms to list ADTs makes them feel more significant Mergesort in a Llist iterators through a linked list iterators are good because they can be used for all different kinds of objects Today we learned about the iterator interface and how it could be used to make iterating through lists/arrays more efficient . I found the diagrams that were drawn on the board the most interesting . Iterators The concept of iterators was really interesting today , especially their usage . Internal vs. external version of iteration iterarors I was a bit preoccupied today but seeing merge sort and quick sort show the relative ordering concept . how typically iterating through a linked list can be very inefficient The implementation of iterators Iterators and their effectiveness How iterators can be used . quick sort and merge sort The idea of being able to iterate through a lot of different data structures @extractive","Students were interested by the concept of the iterator , and how it can be applied to lists , as well as other data structures . They again noted sorted algorithms , as well as analyses of runtime and efficiency of algorithms .","['external version', 'linked list', 'sorting algorithm', 'data structure', 'quick sort', 'merge sort']","In this lecture students found iterators and their use interesting. They also found the merge sort and quick sort interesting. Last, they also found lists and linked lists interesting.","In this lecture, students found iterators and their uses interesting. They also found merging lists and quick sort interesting. Last, they enjoyed learning about the difference between internal vs. external versions of iterators.","In this lecture, students found iterators and their use interesting. They also enjoyed learning about the differences between internal vs. external versions of iterators, and how they can be used to make iterating through a linked list more efficient.","In this lecture, students found iterators and their use interesting. They also enjoyed learning about the differences between internal vs. external versions of iterators, and how they can be used to make iterating through lists/arrays more efficient.","In this lecture, students found iterators and their use interesting. They also enjoyed learning about the differences between internal vs. external versions of iterators, and how they can be used to make iterating through a linked list more efficient."
"Threads -RRB- : unfortunately , we wo n't be talking anymore about them . the beginning of run-time analysis Algorithm analysis seems interesting as we begin to make our code efficient . I really enjoyed the enthusiasm about efficiency across the different searching methods . Prof Ramirez 's sound effects and the discussion of threads . the adding and removing methods in a lists Circular linked lists and its special cases How the vector class maintained its legacy methods . Implementation of linked list methods and the efficiency of binary vs. sequential search efficiency of binary search vs sequential search The synchronization methods , and the vector class originally in Java . Runtimes ! Learning about multithreaded operations Threads and synchronization How large the difference in runtime is for something as simple as a sequential vs. binary search . The ways to use a list ADT . How the efficiency of binary search makes such a huge difference in time I thought the discussion of analysis was really interesting , especially when considering how much of a difference the correctly optimized program/algorithm makes . I 'm still not 100 % sure how the analysis is actually conducted , but it 's an interesting topic nontheless . Runtimes I thought it was interesting that the reason the list starts at 1 is so that it is easily resizable . I 'm glad there was elaboration on the mechanics about that since I thought , at first , that it was some random implementation that I did n't need to understand . I found the lecture topic most interesting , as well as the engaging PowerPoint . how much more efficient binary search is compared to sequential search a list vs l list Algorith analysis ' Remove Gap Vectors Threads : I would love to learn more about them I liked talking about synchronization . Threads are very interesting to me but I have n't the slightest idea of how to use them . It is beyond the scope of this class but I wish we could go in more depth ! @extractive","Most of the students enjoyed the discussion of algorithm efficiency and runtime . There was also a fair amount of griping about the fact that threads are outside the scope of the class , so the students would have to wait another semester to learn about them . Other topics mentioned include the implementation of linked lists , and the vector class .","['vector class', 'slightest idea', 'sequential search', 'linked list', 'huge difference', 'lecture topic', 'binary search']","Most students found the efficiency of binary search and the related algorithms interesting. They also found runtimes, the synchronization methods, and the linked list interesting.","Most students found the efficiency of binary search, the runtimes, and the algorithm analysis interesting. A few students also found the vector class interesting, as well as the circular linked list.","The students enjoyed learning about the efficiency of binary search vs sequential search, the runtimes, and the algorithm analysis. They also found the vector class and its legacy methods interesting.","In this lecture, students were interested in the efficiency of binary search, the runtimes, and the algorithm analysis. They also enjoyed learning about the vector class and its legacy methods.","In this lecture, students were interested in the efficiency of binary search, the runtimes, and the algorithm analysis. They also enjoyed learning about the vector class and its legacy methods."
"Nothing was really confusing The question of the day was lengthy , and we were not given enough time to answer it . nothing in particular Special cases Nothing really too muddy - however , I would definitely suggest ignoring the textbook example and starting your class examples at index 0 instead of 1 . Even though it 's been clarified every time , I still might get confused looking at my notes later on towards the midterm . Not too much , just the idea of using these to build a string builder was not super clear . I understood all of the material taught today . The usefulness of asserts assert The reassigning of the nodes by skipping one ? I 'm still kind of confused about the difference between linked lists and Linked Lists Why does the author start at 1 and not 0 ? ! Implementation of linked list None I am having trouble keeping differences between linked lists , linked bags , bags , etc , seperate . I think what confused me most was the assert keyword , because I have n't really ever encountered that anywhere before . However , I think Professor Ramirez did a good job in explaining what it 's essential function was -LRB- I.e. . A logic check for implementers for pre and post conditions -RRB- nothing What are the specific names of each type of list . Is the author 's version of linked list -LRB- starting point = 1 -RRB- a predefined class in java ? What does LList do differently ? I 'm not really sure what the firstNode instance variable does . Is it basically just the pointer half or can it store data as well ? If we ever wanted to call the data of a lastNode would we reference L.length-1 or just the lastNode pointer ? removal of last item Handling special cases More special cases with list operations . I was pretty alright with everything today . Maybe a generalized explanation of the difference between a LinkedBag and LinkedList ? Everything was well explained today . I had no questions . @extractive","It seems like the class is getting to a point where the students are getting confused while trying to keep track of several similar data structures . Several students asked for clarification on the differences between them . Also , some mentioned the different starting index used in the textbook . A couple were n't sure about the use of the assert keyword . Others seemed to want more instruction on the special cases they would need to handle .","['predefined class', 'linked list', 'essential function', 'pointer half']","Most of the students had trouble with the difference between linked lists, linked bags, and linked lists. Some also had trouble understanding the difference in the assert keyword, and the implementation of the LRB-class. A few students had some trouble with LRB -RRB-, and nothing in particular.","Most of the students had trouble with the difference between linked lists, linked bags, and linked lists. Some students also had trouble understanding the assert keyword, and the special cases of each type of list.","Most of the students had trouble with the difference between linked lists, linked bags, and linked lists. Some students also had trouble understanding the assert keyword, and special cases with list operations.","In this lecture, students had trouble with the difference between linked lists, linked bags, and linked lists. They also had trouble understanding the use of the assert keyword, and special cases.","In this lecture, students mostly had trouble with the difference between linked lists and linked bags. They also had some issues with the assert keyword, and the implementation of linked lists."
"the mathematics of different data structures and other simple ops Runtime for Alist and Llist ' I am very excited to start looking at recursion again ! Going over the Assignment the idea of using linked lists The math involved in CS average time vs worst case time The big o concept , the beginning of recursion Runtime differences between AList and LList comparing alist and llist The song of the day Big O derivations The derivations for runtime equations were pretty neat ! I thought the description of differing types of successes -LRB- I.e. LinkedList remove is faster than AList but slower than add -RRB- was very interesting finding the average run time by taking 1/N to compare efficiencies calculating the average run time recursion and more asymptomatic analysis We learned about how to calculate the run-time of a program . Something that may be easier for the coder to do coding-wise may not be the most efficient way to go , even if there are less lines . I found the logic behind amortizing the most interesting . Doing the math to back up our intuition of Big-O values summations Recursion The difference in runtime between different implantation sod methods from the same interface The part about the explanation of what -LRB- n -LRB- n +1 -RRB- -RRB- / 2 was beneficial . @extractive","There was no clearly most popular answer for this lecture . Students enjoyed the calculation of average runtimes , comparing the runtimes of different methods -LRB- esp . those of the array and linked lists -RRB- , and recursion in about equal number . A few other students just enjoyed doing some math .","['average run time', 'linked list', 'data structure', 'run time']","The students found the difference in runtime between Alist and Llist, and the difference between the two methods interesting. They also enjoyed learning about the concepts of recursion, the derivations for the runtime equations, and how to calculate the average run-time of a program.","The students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts related to recursion, the derivations of the Big-O concept, and the linked-list example.","In this lecture, students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts related to recursion, the derivations for runtime equations, and the examples used to illustrate them.","In this lecture, students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts of recursion, the derivations of the Big-O concept, and the use of linked lists.","In this lecture, students enjoyed learning about the difference in runtime between Alist and Llist. They also enjoyed the concepts of recursion, the derivations of the Big-O concept, and linked lists."
"why can the bag not be changed ? How to resize arrays when they are full I would like to hear more about how runtime speed can change depending on implementation . I thought physical vs. logical size was confusing when it was first brought up , but equating them with familiar coding constructs -LRB- counter variable and array length -RRB- helped my understanding I was confused why we needed to use an array rather than an arraylist for the bag . Nothing Implementing bag I think the PowerPoint notes need to be in more detail with more examples given in class . I still needed more explanation on the differences between bags and array lists . Nothing The connection between ADTs and interfaces/classes remove methods Keeping track of ` logical size ' seems to be a point of lots of errors . I feel like it is safer to use a for loop to detect non-null values although less efficient . The bag compared to other data structures The purpose of using a bag or what we 'd use a bag for benefits of using an array over ArrayList Im a bit confused about what all the moving parts are now . The book introduces adts , interfaces , a presumed class that uses it and a class that client programmer as well as user are using . Id like to see a diagram of all the classes etc. where is the program running from etc. . Generics syntax is still slightly confusing . When the convoluted syntax is used and not used I 'm still not sure off the top of my head I did not find anything especially confusing today . Dr. Ramirez went very slow and explained everything well . nothing None @extractive","Many students mentioned confusion over the implementation of the bag , specifically why it was necessary to use an array instead of an arraylist . Others were unsure when it would be beneficial to use bags instead of other data structures . Finally , a few students were confused about physical and logical size and how they are implemented .","['convoluted syntax', 'data structure', 'book introduces']","Most students found the concepts of the bag, the interface, and the logical size of the array confusing. Some also had trouble with the implementation of the interface and the class.","Most students had trouble with the concepts related to the bag, the interface, and the logical size of an array. Some students also had trouble understanding the difference between an array and an arraylist, and how to use them. A few students had no issues.","In this lecture students mostly had trouble with the implementation of the bag. They also struggled with the connection between ADTs and interfaces/classes, and the logical size of an array. Some students also had trouble understanding the for loop and how to resize arrays.","In this lecture, the students mostly had trouble with the implementation of the bag. They also had trouble understanding the connection between ADTs and interfaces/classes, and the difference between physical and logical size.","In this lecture, the students mostly had trouble with the implementation of the bag. They also struggled with the connection between ADTs and interfaces/classes, and the logical size of an array."
"utilizing the queue for managing object memory Stack being a class bank teller example was very easy to understand Queues Queues Stacks Queue idea circular linked list with the free nodes Doubly linked queues stacks and q 's were pretty cool how they could be implemented Memory leaks and Google Chrome Implementation of the stack and how simple it is Stack Queues the fast run times for a doubley linked queue queues are much better when a linked list is used Using Stacks and Queues to solve problems Dequeue vs enqueue I thought -LRB- finally -RRB- learning about the queue implementation was pretty cool . Probably the various implementations of stacks , along with the difference between stack and queues . queue How stack comes from vector and methods from vector can be used on stack , breaking logical purpose of stack . The fact that Stack is represented , in Java , as a class rather than an interface Free list and circular thing . That was cool @extractive",Most students enjoyed learning about how stacks and queues are used and implemented . One specific detail that was mentioned was the efficiency of the queue implemented w / a doubly-linked list .,"['linked list', 'logical purpose', 'object memory', 'run time']","Most students found the concepts related to Stacks and Queues interesting. They also enjoyed learning about the various implementations of the stack, and the difference between the two types of queues.","Most students found the concepts of stacks and queues interesting. They also enjoyed using the queue to solve problems, learning about the various implementations of the stack, and learning about memory leaks and Google Chrome.","Most students found the concepts related to stacks and queues interesting. They also enjoyed learning about the various implementations of the stack, and how they can be used to solve problems. Some students also found the use of the queue concept interesting.","In this lecture students enjoyed learning about Stacks, Queues, and the various implementations of the stack. They also liked learning about Memory Leaks, and how to use the free list.","In this lecture students enjoyed learning about Stacks, Queues, and the various implementations of the stack. They also liked learning about Memory Leaks and how they can be fixed."
"implementation of a sorting algorithm with divide and conquer definitely made my understanding of the whole divide and conquer method better Shellsort faster to do some other stuff and then insertionSort than to do insertionSort by itself Merge sort she 'll sort Shell sort Shellsort algorithm mergesort Comparison between sorting methods mergesort !! ! Shell sort I thought the most interesting thing from today was how merge sort works and how much better it is from the simple sorts MergeSort Shell sort was interesting because of its improved runtime over insertion sort strategies implementing smaller arrays to sort a larger array faster merge sort and insertion sort merge sort and insertion sort * merge sort * shellsort Both of these are useful to learn , considering that nearly all the other methods we 've learned so far are O -LRB- N -RRB- , which is pretty inefficient . I found the material the most interesting . I 've never heard of shellsort before ! Merge sort was pretty interesting today , learning about the new sorts was also fun . mergesort merge sort Sorting is always cool to talk about . Shellsort @extractive","Students were interested by the new , improved sorting methods introduced in class , specifically Merge sort and Shell sort . They noted the improvement over insertion sort , and how this was accomplished using a divide & conquer sorting algorithm .","['sorting algorithm', 'sorting method', 'larger array', 'merge sort', 'insertion sort']","Most students found merge sort and the new shell sort interesting. They also found the algorithm for the merge sort interesting, as well as the differences between the various types of sorting methods.","Most students found the merge sort and the shell sort interesting. They also found the insertion and divide and conquer method interesting. Last, a few students found O -LRB- N -RRB- and the smaller arrays interesting.","In this lecture, students enjoyed learning about the differences between merge sort and insertion sort, as well as the difference between the two algorithms. They also found the implementation of a sorting algorithm with divide and conquer interesting.","In this lecture, students enjoyed learning about the differences between merge sort and insertion sort, as well as the difference between the two algorithms. They also liked learning about shellsort and the divide and conquer method.","In this lecture, students enjoyed learning about merge sort and the new shell sort algorithm. They also enjoyed comparing the efficiency of the various sorting methods and learning about the differences between them."
"Analyzing run-times to optimize algorithms Learning about Big-O , as I 've seen it used numerous times but never really understood it . It was great to hear the different types of efficiency for various operations . Learning run-times of ADTs in depth is interesting as well as analyzing the math behind them . Different ways to assume the run time of a program . big o big O notation The amount of math data structures require . The math behind the log_2 -LRB- N -RRB- for binary search amortized time Big O How to calculate algorithmic runtimes Big O !! ! That chart at the end showing how it was more efficient to double array size every time . Amortized time Big-O Functions calculating algorithms without writing them in code I thought it was pretty interesting how you do n't need to have an algorithm implemented to test its efficiency Runtimes So we actually cut out a lot of math when calculating these run-times -LRB- depending on the equation -RRB- . I found the lecture really interesting because the math explained was done slowly so that everyone understood . Asymptotic was really interesting and made a lot of sense ... I 'm interested to see what other problems look like -LRB- as far as coming up with the formula myself is concerned -RRB- Deriving the big O for binary search big o Asymptotic computation of run times ' Analyzing instructions and time to run algorithms with different methods Big O Algorithm testing The parallels between math that I 've learned and CS stuff I 'm learning now are always nice to find . Today 's lecture was okay . I know I will struggle with finding equations for the big o. @extractive","Students were interested by the mathematical analysis of algorithms ' runtimes , using Big O notation . They seemed to care about the efficiency of algorithms like binary search , as well as data structures . Some students mentioned amortized time .","['amortized time', 'data structure', 'run time', 'binary search']","In this lecture students enjoyed learning about the various algorithms and the run-times of algorithms, as well as the math behind them. They also enjoyed learning the difference between the asymptotic and the log_2 notation.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all.","In this lecture, students enjoyed learning about algorithms and their run-times, as well as the math behind them. They also enjoyed comparing the efficiency of various algorithms to nothing at all, and the parallels between the two."
"nothing in particular Quicksort code quick.java trace quick sort partitioning code What you do when your pivot is the smallest or largest value Nothing Exact implementation details of quick sort the tree of execution for mergesort Nothing implementation of quicksort Some parts of the quick sort algorithm Run times for the sorts is mergesort a tree execution ? How do recursive sorting methods have faster run times if generally iterative approaches are faster tree execution trace The power of different pivots in quick sort I think it was fine , although I did get the first of the QoTDs wrong . That 's more of a jab at my deductive reasoning skills rather than Dr. Ramirez 's teaching . I did n't realize that it was O -LRB- logN -RRB- for the entire Merge Sort and O -LRB- N -RRB- for each separate time it split up . I thought that , if it split up N times , then made sense that the entire sort was O -LRB- N -RRB- and the smaller ones O -LRB- logN -RRB- . If anything I explained here is wrong , maybe that 's the feedback in of itself , but I 'm learning ! Nothing was really muddy from today . It was a little complicated to understand Big-O run time of Merge Sort pivot The implementation of these algorithms is always confusing at first . A hands on approach will help me though Merge sort used non constant amount of extra memory @extractive","Confusions on the implementation of quicksort and mergesort were mentioned , including the selection of pivots and how to partition . Some students could use clarification on tree execution and its relation to mergesort .","['extra memory', 'quick sort', 'sorting method', 'constant amount', 'run time', 'separate time']",Most students found the implementation of the quick sort algorithm and the merge sort algorithm mostly confusing. Some students also had trouble with the run time of the tree of execution and the power of different pivots in the algorithm.,Most students found the implementation of quick sort and mergesort to be the most challenging part of this lecture. Some students also struggled with the run time of quicksort and the power of different pivots in the algorithm.,"In this lecture, students mostly had trouble with the implementation of quicksort and the merge sort. They also had trouble understanding the run-time of the sort and the power of different pivots in quick sort.","In this lecture, students mostly had trouble with the implementation of quicksort, the run-time of mergesort, and the power of different pivots in quick sort. Some students also had trouble understanding the log-N -RRB- difference between the smaller and larger values.","In this lecture, students mostly had trouble with the implementation of quicksort and mergesort. They also had trouble understanding the run-time of quick sort and the power of different pivots in the algorithm."
"To be honest , the handout about the Towers of Hanoi that you gave out confused me a little more than before . Why O -LRB- N ^ 2 -RRB- being the result of two nested loops isnt justified enough low/high index Why Simple Sorting is n't ideal bubble sort How the efficiency of sorting can be improved from O -LRB- N ^ 2 -RRB- Shell sort implementation details The exam . how to do towers of hanoi iteratively How the simple sorts differed ? More recursive examples nothing really . very clear . nothing today None , all was very clear I got a little tripped up on the discussion of insertion sort of linked list bubble sort and why it is used big O run time why learn insertion sort if it 's so terrible ? I did n't think there was anything overly confusing . Maybe elaboration on what the kind of problems the inefficient sorts are used for/would be better for would have been ok . Do we need to know BubbleSort ? Nothing really , actually . Today was a fairly easy day . the exam Im still a bit confused on the execution but I hope to review the trace again tonight and get it down . None Are there situations that would necessitate one of the less efficient , yet simpler methods of sorting to be used ? Everything was well explained . Trying to get better test grades in the future . @extractive","After this lecture , many students were left wondering why they had learned simple sorts -LRB- if they were so bad -RRB- and what kind of better sorting algorithms exist . A few students are still struggling with runtime evaluation , and a few others reported that the Towers of Hanoi handout only confused them further .","['linked list', 'run time', 'insertion sort']","Most students found everything clear. They were mostly confused about the differences between the simple and the more efficient sorts, and the problems they would have liked to have been solved. Some students also had trouble with bubble sort, and how the efficiency of the simple sort was improved.","Most students found everything clear. They also had trouble with bubble sort, the tower of hanoi, and the efficiency of sorting. Some students also had issues with O -LRB- N ^ 2 -RRB- and the simple sort.","In this lecture, students mostly had trouble with bubble sort, the simple sort, and the insertion sort. Some students also had trouble understanding the efficiency of sorting, and how to improve it.","In this lecture, the students mostly had trouble with bubble sort, simple sorting, and nothing at all. They also struggled with the tower of hanoi and the efficiency of sorting.","In this lecture, the students mostly had trouble with bubble sort, simple sorting, and nothing at all. They also had some trouble with O -LRB- N ^ 2 -RRB- and the towers of Hanoi."
"I thought it was useful to learn more about the Towers of Hanoi problem . How bad the simple sorts are insertion sort is not efficient Simple Sorting sorting methods Doing insertion sort with only 1 array Applying sorting methods to linked lists rather than arrays InsertionSort how to do insertion sort The way the towers of Hanoi trace worked Reviewing the exam stats That all simple sorts are O -LRB- n ^ 2 -RRB- Sorting algorithms that I knew already are inefficient . The fact that various simple sorting algorithms all have the worst-case run-time of O -LRB- N ^ 2 -RRB- I thought that it was interesting that all of the simple sorts we discussed , though some are more popular than others , all have the same big O Runtime insertion sort and reviewing the exam bubblesort Insertion sort We learned that all these sorts -- Insertion , Selection , Bubble ... all their Big-O run-times are awful , but we 're learning about efficient sorts after break . The solution to the Tower of Hanoi problem Thought analyzing the various sorts we 've done before but this time with an eye for efficiency was pretty fun . The sorting algorithms I thought the towers of hanoi trace really helped from last class . Sorts The ways to sort groups of data , specifically the simplicity of some of them Today the binary tree was explained very well . The handout was super helpful . @extractive",Most of the students found that knowing simple sorts inefficiency as interesting . They liked insertion sorts and the other sorting methods . Some of them also liked towers of Hanoi and review of the exam .,"['linked list', 'sorting algorithm', 'simple sorting', 'binary tree', 'sorting method', 'insertion sort']","Most students found the simple sorting algorithms interesting. They also enjoyed learning about the Tower of Hanoi problem, the insertion sort, and the exam stats.",Most students found simple sorting methods to be the most interesting part of this lecture. They also found the towers of Hanoi problem interesting. Some students also found insertion sort and the exam stats interesting.,"In this lecture, students enjoyed learning about the various simple sorting algorithms, including insertion sort, selection, and bubble. They also found the towers of Hanoi problem and the exam stats interesting.","In this lecture, students enjoyed learning about the various simple sorting algorithms, including insertion sort, selection, and bubble. They also found the towers of Hanoi problem interesting.","In this lecture, students enjoyed learning about the various simple sorting algorithms, including insertion sort, selection, and bubble. They also found the towers of Hanoi problem interesting."
"utilizing the queue for managing object memory Stack being a class bank teller example was very easy to understand Queues Queues Stacks Queue idea circular linked list with the free nodes Doubly linked queues stacks and queues were pretty cool how they could be implemented Memory leaks and Google Chrome Implementation of the stack and how simple it is Stack Queues the fast run times for a doubly linked queue queues are much better when a linked list is used Using Stacks and Queues to solve problems Dequeue vs enqueue I thought -LRB- finally -RRB- learning about the queue implementation was pretty cool . Probably the various implementations of stacks , along with the difference between stack and queues . queue How stack comes from vector and methods from vector can be used on stack , breaking logical purpose of stack . The fact that Stack is represented , in Java , as a class rather than an interface Free list and circular thing . That was cool @extractive","Most of the students found queues and implementation of stacks as interesting . Some others liked double linked queues , circular linked lists and the fact that stacks are represented as a class in Java .","['linked list', 'logical purpose', 'object memory', 'run time']","Most students found the concepts related to stacks and queues interesting. They also enjoyed using the queue to solve problems, and the various implementations of the stack.","Most students found the concepts related to stacks and queues interesting. They also enjoyed learning about the various implementations of the stack, and how they can be used to solve problems.","Most students found the concepts related to stacks and queues interesting. They also enjoyed learning about the various implementations of the stack, and how they can be used to solve problems.","In this lecture students enjoyed learning about Stacks, Queues, and the various ways they can be implemented. They also liked learning about Memory Leaks, and how to manage object memory.","In this lecture students enjoyed learning about Stacks, Queues, and the various implementations of them. They also liked learning about Memory Leaks, and how to use them to solve problems."
"I still find it easier to follow any recursive method when the prof shows the Run-Time Stack on the board . Merge method in the handout when we did merge sort , comparing the indexes of the two subarrays resulted in a sorted array . was this coincidental in the example ? algorithm analysis of shell sort Not entirely certain how to implement it Actual implementation details of the sorting algorithms were still a little confusing what makes mergesort more efficient ? Examples of each sorting method How much faster is mergesort ? The mid index compare -LRB- -RRB- if statement in the merge sort code I am a little confused about how shellsort works How do you concatenate the 2 separate arrays after they are sorted ? Do you make a new array ? We have covered many forms of sorting and I am not sure which ones are the most practical for various situations . moving from many single arrays up to one large sorted array in merge sort nothing nothing I was confused at first about if there were multiple , separate arrays or just the division of one , but I think I understand now that there is only one array being divided into two/however many subarrays . I thought that the questions of the day were the most confusing . It would be great if we were given more time to think through them . Nothing was really muddy from today . The worst run times of the sorts were a little confusing , but not too difficult . shellsort Special cases of merge sort The implementation of mergesort Nothing @extractive",Most of the students found implementation of merge sort and shell sort as confusing . Some of the students had problems with the efficiency of merge sort . Some wanted to know how to decide on a sorting in practical scenarios .,"['sorting algorithm', 'algorithm analysis', 'sorted array', 'sorting method', 'run time', 'recursive method', 'merge sort']","Most students found the merge sort and shellsort to be the most challenging. They also struggled with the implementation of the various sorting algorithms, and the run-time of the algorithms. Some students also had trouble with the subarrays and the indexes of the two subarray.",Most of the students found merge sort and shellsort to be the most challenging. They also struggled with the Run-Time Stack and the implementation of each sorting method.,"Most of the students had trouble with merge sort, and the implementation of shellsort. Some students also had some trouble with the run-time of the algorithms, and nothing.","In this lecture students mostly had trouble with merge sort, and the implementation of shellsort. Some students also had some trouble with the run-time of each sorting method, and nothing at all.","In this lecture, students had trouble with merge sort, shellsort, and the run-time of the algorithms. They also had trouble understanding the differences between the two types of sorting."
"Ways to use the predefined ListInterface analyzing all of the special cases of linked lists and how they are handled as well as learning ` assert ' Keeping track of both the front and end of a linked list . I thought it was useful to hear more about the ` List ' class - I had never heard of that in 0401 . Learning how to remove nodes in a linked list I found the concepts of linked lists and going through example code rather interesting The topic of LinkedLists always intrigued me The various special cases when removing elements from a linkedlist special cases for linked list The different methods of removing and adding to the ADT . Implementation of linked lists How a LL and bag are different when it comes to implementation . Learning how to delete the first node of a linked list Assert LinkedLists can be implemented in many different ways depending on the application . How linked lists can be used when you need first in first out or last in first out . The flexibility of using lists I think learning how to apply a linked chain of nodes to a linked List was interesting , because it 's a new way of thinking about storing and arranging data and I can start to understand how a useful ADT like a List that is very powerful in Python is implemented and constructed linked lists and standard lists The visuals made to explain LinkedList . I thought it was interesting how deleting something can sometimes mean just deleting it view , or logical deletion . The whole thing is just very intuitive and normal cases seem very easy to handle . linked structures Removing nodes and special cases ' Adding/removing styles with lists and different benefits/drawbacks with adding and storing addresses as instance data to speed up operations while complicating methods Prof Ramirez 's sound effects Some of the implementation details regarding the LinkedList were more intuitive than I thought they 'd be Today we talked about linked list and some of the major differences between them and bags . We looked at remove and add methods . @extractive","Most students found some aspect of linked lists most intriguing of the lecture content ; some mentioned the implementation of the removal methods , while others mentioned the way that lists can easily implement either a FIFO or FILO queue . Two students enjoyed learning about the assert command , and one liked Dr. Ramirez 's sound effects , which is included here because it made me laugh .","['linked list', 'instance data', 'linked chain']","In this lecture, students enjoyed learning about the various ways to use a linked list, the various special cases of removing and adding to a linkedlist, and the various methods of implementing the ADT. They also enjoyed learning how to use the ListInterface, and Assert.","In this lecture, students enjoyed learning about the different ways to implement a linked list, and the various special cases of removing and adding to the ADT. They also found the ` List'class interesting.","In this lecture, students enjoyed learning about the different ways to implement a linked list, and the various special cases of removing and adding to the ADT. They also found the ` List'class interesting.","In this lecture, students enjoyed learning about the different ways to implement a linked list, and the various special cases of removing and adding to the ADT. They also found the ` List'class and the ` Assert'method interesting.","In this lecture, students enjoyed learning about the different ways to use a linked list, the various special cases of a linkedlist, and the implementation details of the ADT. They also found the ` List'class interesting."
"iterators and their uses I found analyzing linked lists in regards to runtime to be interesting applying sorting algorithms to list ADTs makes them feel more significant Merge sorting a List iterators through a linked list iterators are good because they can be used for all different kinds of objects Today we learned about the iterator interface and how it could be used to make iterating through lists/arrays more efficient . I found the diagrams that were drawn on the board the most interesting . Iterators The concept of iterators was really interesting today , especially their usage . Internal vs. external version of iteration iterarors I was a bit preoccupied today but seeing merge sort and quick sort show the relative ordering concept . how typically iterating through a linked list can be very inefficient The implementation of iterators Iterators and their effectiveness How iterators can be used . quick sort and merge sort The idea of being able to iterate through a lot of different data structures @extractive",Most of the students found Iterators and linked lists as interesting . Some of them liked merge sort and quick sort . A few of them liked internal vs external iteration and analyzing runtimes of linked lists .,"['external version', 'linked list', 'sorting algorithm', 'data structure', 'quick sort', 'merge sort']","In this lecture students found iterators and their use interesting. They also found the implementation of iterators, merge sort, and quick sort interesting.","In this lecture, students found iterators and their uses interesting. They also found merge sort, quick sort, and the internal vs. external version of iterators interesting.","In this lecture, students found iterators and their use interesting. They also found merge sort, quick sort, and the internal vs. external version of iteration iterators interesting.","In this lecture, students found iterators and their use interesting. They also found merge sort, quick sort, and the internal vs. external version of iterators interesting.","In this lecture, students found iterators and their use interesting. They also found merge sort, quick sort, and the internal vs. external version of iterators interesting."
"a review sheet of all the sorting algorithms would be nice for looking at the new ones in comparison to the old , but it is easy to see that it can be expected of us to be responsible for that . nothing else was really that confusing or needed more detail Other pivot choosing algorithms how stability works , why mergesort is stable but the author 's version was n't the analysis of the various runtimes of quick sort Quick sort implementation Run time of different pivot points when stable sorting would be beneficial None Since we not sorting in place only costs us o -LRB- n -RRB- , why is it that bad ? the lecture slides say it is n't awful nowadays The last QOTD I 'm a little lost when it comes to discussing the reasoning behind some of the newer quick sort run times I 'm a little lost when it comes to discussing the reasoning behind some of the newer quick sort run times does partitioning indices have a specific location ? How exactly stability is important and when to worry about a certain algorithm not being stable enough for the task you are working on . the quicksort and mergesort algorithm Nothing really , except maybe describing more in detail when quick sort would be used over merge sort . The author 's MergeSort question at the end got me . Where can I find a good example of MergeSort , then ? That confused me . None I did n't get the second question of the day correct . Still kind of confused about stability . Probably the breakdown of the formulas/calculating Big-O run time of the comparisons . merge stability Runtime approximations and combining sorting algorithms to maximize efficiency Some of the potential quiz questions we discuss do n't come to me at first thought , and take a little while to process Everything was well explained today @extractive",Most of the students had a question - when to worry about stability in the sorting algorithms ? Some others had problems with runtimes of quick and merge sort and questions of the day . They also want to know when to use quick sort over the merge sort ? -LRB- and vice versa -RRB-,"['sorting algorithm', 'stable sorting', 'quick sort', 'run time', 'specific location', 'merge sort']","Most students found the concepts related to the various algorithms and their run times confusing. They also struggled with the application of the algorithms, and the application to the problem. Some students also had trouble with the merge sort algorithm, and understanding the run-time of the various iterations of the algorithm.","Most students had trouble understanding the reasoning behind the various algorithms and the run-times of the new ones, as well as the differences between the old and new ones. Some students also had trouble with the stability of the algorithms, especially the merge sort algorithm. A few students also struggled with quick sort and the running time of the algorithm.","In this lecture, the students mostly had trouble understanding the reasoning behind the various algorithms and the run-times of the different algorithms. They also had trouble with the merge sort algorithm, and finding a good example of it.","In this lecture, the students mostly had trouble understanding the reasoning behind the various algorithms and the run-times of the new ones. They also had trouble with the merge sort algorithm, and understanding the difference between the two.","In this lecture, the students mostly had trouble understanding the differences between the various algorithms, and when to use them. They also had trouble with quick sort, the merge sort algorithm, and the run-time of the algorithms."
"Traversing through trees recursively Packages the benefits for the different ways of traversing the trees nothing , everything was pretty straightforward code for bsts In order tracing Can a binary search tree be made using a different method of iterating through the tree ? Search tree interface Why might duplicates be problematic ? Nothing was really confusing this lecture . Search Tree Interface Binary Search Trees None Everything was pretty clear . I had no real questions . Nothing was difficult Some of the operations @extractive","Most of the students had no problems with the lecture . However , some of them found implementing BSTs and tree traversal as confusing . Some others had problems with search tree interface and packages .","['binary search', 'binary search tree']","Most students found nothing challenging. Some students had trouble with the search tree interface, and the different ways of traversing the trees. A few students had some trouble with binary search trees, and a few had trouble understanding the benefits of recursively traversing trees.","Most students found nothing challenging. A few students had trouble with the search tree interface, and the different ways of traversing the trees. A couple students had some trouble with binary search trees, and one student had trouble understanding recursion.",In this lecture students mostly had trouble with the search tree interface and traversing through the trees. Some students also had some trouble with binary search trees and recursively iterating through them.,In this lecture students mostly had trouble with the search tree interface and traversing through the trees. Some students also had some trouble with binary search trees and recursively iterating through the tree.,In this lecture students mostly had trouble with the search tree interface and traversing through the trees. Some students also had some trouble with binary search trees and recursively iterating through the tree.
"To be honest , the handout about the Towers of Hanoi that you gave out confused me a little more than before . Why O -LRB- N ^ 2 -RRB- being the result of two nested loops isnt justified enough low/high index Why Simple Sorting is n't ideal bubble sort How the efficiency of sorting can be improved from O -LRB- N ^ 2 -RRB- Shell sort implementation details The exam . how to do towers of hanoi iteratively How the simple sorts differed ? More recursive examples nothing really . very clear . nothing today None , all was very clear I got a little tripped up on the discussion of insertion sort of linked list bubble sort and why it is used big O run time why learn insertion sort if it 's so terrible ? I did n't think there was anything overly confusing . Maybe elaboration on what the kind of problems the inefficient sorts are used for/would be better for would have been ok . Do we need to know BubbleSort ? Nothing really , actually . Today was a fairly easy day . the exam Im still a bit confused on the execution but I hope to review the trace again tonight and get it down . None Are there situations that would necessitate one of the less efficient , yet simpler methods of sorting to be used ? Everything was well explained . Trying to get better test grades in the future . @extractive","Many students thought everything was clear . Otherwise , they had various different confusions . The main confusion seemed to be why bother using/learning simple sorts if they 're inefficient , and what exactly makes a O -LRB- n ^ 2 -RRB- sort bad . Other students said they were confused about the exam , and the Towers of Hanoi problem from the handout .","['linked list', 'run time', 'insertion sort']","Most students found everything clear. They were mostly confused about the differences between the simple and the more efficient sorts, and the problems they would have liked to have been solved. Some students also had trouble with bubble sort, and how the efficiency of the simple sort was improved.","Most students found everything clear. They also had trouble with bubble sort, the tower of hanoi, and the efficiency of sorting. Some students also had issues with O -LRB- N ^ 2 -RRB- and the simple sort.","In this lecture, students mostly had trouble with bubble sort, the simple sort, and the insertion sort. Some students also had trouble understanding the efficiency of sorting, and how to improve it.","In this lecture, the students mostly had trouble with bubble sort, simple sorting, and nothing at all. They also struggled with the tower of hanoi and the efficiency of sorting.","In this lecture, the students mostly had trouble with bubble sort, simple sorting, and nothing at all. They also had some trouble with O -LRB- N ^ 2 -RRB- and the towers of Hanoi."
"Everything involving summation is confusing Why the author is so convoluted What is the use of a tree the difference between a full tree and a complete tree The full vs complete tree distinction was confusing at first , but Ramirez clarified it later in the lecture . binary tree lengths algorithms Everything was well explained Complete Tree Some of the deriving for the minimum height Some of the ways we will get information from the tree . How do we edit trees efficiently ? When would I want to use these ? Author 's implementation of binary tree @extractive",Students were confused by several different aspects of trees . Some were n't sure of the difference between a full and complete tree . Others did n't understand the author 's code . A couple wanted to know what uses trees could have in practice ; and others had questions about how to get height information .,"['binary tree', 'minimum height', 'complete tree']","Most students found the binary tree and complete tree concepts confusing. Some students also had trouble with the summation algorithm, and the difference between a full and a complete tree.","Most students had trouble with the binary tree, the difference between a full and a complete tree, and the summation algorithm. Some students also had trouble understanding the differences between the two.",Most students had trouble with the use of a binary tree and the difference between a full tree and a complete tree. Some students also had trouble understanding summation algorithms and editing trees.,In this lecture students had trouble understanding the difference between a full tree and a complete tree. They also had trouble with the binary tree and the summation algorithm.,In this lecture students had trouble understanding the difference between a full tree and a complete tree. They also had trouble with the binary tree and the summation algorithm.
"Is there a preferred way to implement heaps ? upHeap & downHeap the author 's implementation of priority queues nothing was particularly confusing or difficult I felt that the explanations of the run times was confusing . How often are heaps actually used in real life applications ? Adding and removing from priority trees Implementation of heap add runtime Up-heap and down-heap were slightly confusing . Heaps cause we rushed through it in like 5 minutes I wish there was a chart to compare Stacks , Queues , Priority Queues , and Heaps . I feel as if they 're mixing in my head now . why is index zero left open in the heap array removing items Nothing really . Very clear lecture . What are heaps exactly good for ? I did not find anything confusing @extractive","Most of the student found implementation of heaps as confusing . Some others had problems with up-heap and down-heap , runtimes , adding and removing items .","['real life', 'run time']","Most students found heaps and the implementation of priority queues mostly confusing. Some also found up-heap and down-heaps confusing. A few students also found stacks, queues, and stacks and queues confusing.",Most students found heaps and the implementation of priority queues to be the most challenging part of this lecture. Some students also found stacks and down-heaps confusing. A few students had trouble with the runtime of the application.,In this lecture students mostly found heaps and the implementation of priority queues confusing. They also found stacks and down-heaps confusing. Some students also found the run-time of the application confusing.,"In this lecture students mostly had trouble with heaps, the implementation of priority queues, and the runtime of heap add and remove. Some students also had some trouble with stacks, and down-heaps.","In this lecture students mostly had trouble with heaps, the implementation of priority queues, and the runtime of heap add and remove. Some students also had some trouble with stacks, queue, and down-heap."
"Analysis of trees and in particular binary trees through backtracking Arbitrary trees using adjacency trees to make coding more efficient The structures of trees and various types of trees binary trees Binary Trees Finding out what trees were Binary tree concept Recursive definition of the trees BSTs and how the are traversed . Recursion in binary trees I thought the introduction of binary trees was interesting Tree structures and leaves I found trees to be the most interesting because of their familiarity and the implementations of them . implementing trees and finding there height Today , we learned about Iterators and Iterables . We also started on tree structures/binary trees in comparison to linear structures . Binary trees are naturally traversed recursively , with base cases checking if a node is a leaf node in order to define a subtree . I liked learning about binary trees , it seemed very useful for future classes . Probably the fact we started binary trees today , especially full binary trees . trees structure Moving on from sorting Everything really ; binary trees , I imagine , will have plenty of practical uses . The nodes were interesting @extractive",The most popular response for this lecture was learning about binary trees . Other popular answers included other types of trees/trees in general .,['binary tree'],"In this lecture, students enjoyed learning about binary trees, tree structures, and the recursive definition of the trees. They also enjoyed learning more about the applications of the concepts and implementing them.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are used in general. They also enjoyed the analysis of trees and the various types of trees, and the implementation of them.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting.","In this lecture, students enjoyed learning about binary trees, tree structures, and how they are traversed. They also found iterators and iterables interesting."
"InorderIterators using the stack and checking for equal amounts of parenthesis The comparison between binary search of an array and the operations of BSTs Uses of stacks stacks bst runtimes We elaborated on how the run-time stack works , which we only briefly touched on before in terms of recursion . I found the slides that have visuals as to what actually happens in binary trees most interesting . I am a visual learner , and this really helped . parentheses matching program example Probably the concept of stacks and how they 're used/created . BST The plate warming idea , represented by a stack Iterators Stack the use of the stack in the parentheses problem post order operations The runtime for searching a BST varies based on how balanced the tree is Stack applications and BST methods @extractive","Most of the students enjoyed learning about stacks and how they can be used , especially the example of the parenthesis problem . Other students enjoyed the discussion of BST methods and post - and in-order iterators .","['matching program', 'binary tree', 'binary search']","In this lecture students enjoyed learning about the use of the run-time stack, the operations of BSTs, and the differences between binary search and iterators. They also enjoyed seeing the examples used in the program and seeing the visual representations of the concepts.","In this lecture, students were interested in the use of the run-time stack and BSTs, as well as the in-order operations of BSTs. They also found the parentheses problem and the iterators interesting.","In this lecture, students were interested in the use of the run-time stack and BSTs, as well as the in-order operations of BSTs. They also found the parentheses problem interesting.","In this lecture, students were interested in the use of the run-time stack, the operations of BSTs, and the parentheses problem. They also found the binary search of an array and iterators interesting.","In this lecture, students were interested in the use of the run-time stack and BSTs, as well as the in-order operations of BSTs. They also found the parentheses problem interesting."
Binary Tree functions how to delete a node using its successor and predecessor implementation of methods on binary search trees and the speed of searching a tree as opposed to a list Removing a node with 2 children deleting interior nodes in a tree search arrays and binary search trees the same way BST I found the diagrams on the PowerPoint easy to understand and interesting . Binary Search Trees Adding to a binary search tree Binary tree method implementation bst I honestly do n't remember what happened Probably the ` dictionary ' commands of trees . How a binary search tree implements various methods All the recursion was beautiful The different ways to manipulate and obtain data from BSTs . Removing nodes in a BST depends on how many children the node has The similarities between traversing a binary search tree and using a binary search on a sorted array @extractive,Most of the students liked the implementation of different methods in BST and deleting nodes from a BST . Some other found BSTs and their similarities with binary search on a sorted array as interesting . Some others like adding nodes to a BST .,"['tree search', 'sorted array', 'binary search', 'binary search tree']","Most students found the binary search tree and its methods interesting. They also enjoyed the different ways to manipulate and obtain data from BSTs, the differences between a binary search and a sorted array, and the different methods implemented in a BST.","Most students found the binary search tree and its methods interesting. They also enjoyed the different ways to manipulate and obtain data from BSTs, the differences between a binary search and a sorted array, and deleting a node.","In this lecture students enjoyed learning about binary search trees, how to delete a node, and the different ways to manipulate and obtain data from BSTs. They also enjoyed searching a tree as opposed to a list.","In this lecture students enjoyed learning about binary search trees, how to delete a node in a tree, and the different ways to manipulate and obtain data from a binary search tree.","In this lecture students enjoyed learning about binary search trees, how to delete a node in a tree, and the different ways to manipulate and obtain data from BSTs. They also enjoyed using a sorted array."
"implementation of a sorting algorithm with divide and conquer definitely made my understanding of the whole divide and conquer method better Shellsort faster to do some other stuff and then insertionSort than to do insertionSort by itself Merge sort she 'll sort Shell sort Shellsort algorithm mergesort Comparison between sorting methods mergesort !! ! Shell sort I thought the most interesting thing from today was how merge sort works and how much better it is from the simple sorts MergeSort Shell sort was interesting because of its improved runtime over insertion sort strategies implementing smaller arrays to sort a larger array faster merge sort and insertion sort merge sort and insertion sort * merge sort * shellsort Both of these are useful to learn , considering that nearly all the other methods we 've learned so far are O -LRB- N -RRB- , which is pretty inefficient . I found the material the most interesting . I 've never heard of shellsort before ! Merge sort was pretty interesting today , learning about the new sorts was also fun . mergesort merge sort Sorting is always cool to talk about . Shellsort @extractive",Most of the students enjoyed learning about shell and merge sort . Some specifically mentioned that comparing these algorithms to the other simple methods was particularly interesting .,"['sorting algorithm', 'sorting method', 'larger array', 'merge sort', 'insertion sort']","Most students found merge sort and the new shell sort interesting. They also found the algorithm for the merge sort interesting, as well as the differences between the various types of sorting methods.","Most students found the merge sort and the shell sort interesting. They also found the insertion and divide and conquer method interesting. Last, a few students found O -LRB- N -RRB- and the smaller arrays interesting.","In this lecture, students enjoyed learning about the differences between merge sort and insertion sort, as well as the difference between the two algorithms. They also found the implementation of a sorting algorithm with divide and conquer interesting.","In this lecture, students enjoyed learning about the differences between merge sort and insertion sort, as well as the difference between the two algorithms. They also liked learning about shellsort and the divide and conquer method.","In this lecture, students enjoyed learning about merge sort and the new shell sort algorithm. They also enjoyed comparing the efficiency of the various sorting methods and learning about the differences between them."
"a review sheet of all the sorting algorithms would be nice for looking at the new ones in comparison to the old , but it is easy to see that it can be expected of us to be responsible for that . nothing else was really that confusing or needed more detail Other pivot choosing algorithms how stability works , why mergesort is stable but the author 's version was n't the analysis of the various runtimes of quick sort Quick sort implementation Run time of different pivot points when stable sorting would be beneficial None Since we not sorting in place only costs us o -LRB- n -RRB- , why is it that bad ? the lecture slides say it is n't awful nowadays The last QOTD I 'm a little lost when it comes to discussing the reasoning behind some of the newer quick sort run times I 'm a little lost when it comes to discussing the reasoning behind some of the newer quick sort run times does partitioning indices have a specific location ? How exactly stability is important and when to worry about a certain algorithm not being stable enough for the task you are working on . the quicksort and merges9rt algorithm Nothing really , except maybe describing more in detail when quick sort would be used over merge sort . The author 's MergeSort question at the end got me . Where can I find a good example of MergeSort , then ? That confused me . None I did n't get the second question of the day correct . Still kind of confused about stability . Probably the breakdown of the formulas/calculating Big-O run time of the comparisons . merge stability Runtime approximations and combining sorting algorithms to maximize efficiency Some of the potential quiz questions we discuss do n't come to me at first thought , and take a little while to process Everything was well explained today @extractive","Many students are confused about stability , specifically regarding mergesort , and some are wondering when they should be worried about an algorithm 's stability . A few students were confused by the second QOTD , and a few more are still struggling with evaluating runtimes .","['sorting algorithm', 'stable sorting', 'quick sort', 'run time', 'specific location', 'merge sort']","Most students found the concepts related to the various algorithms confusing. They also struggled with the run-time of the algorithms, and the understanding of the differences between the various run-times of the various types of algorithms. Some students also had trouble with the merge sort algorithm, and finding the examples of the new algorithms.","Most students had trouble understanding the reasoning behind the various algorithms and the run-times of the new ones, as well as the differences between the old and new ones. Some students also had trouble with the stability of the algorithms, especially the merge sort algorithm. A few students also struggled with quick sort and the running time of the algorithm.","In this lecture, the students mostly had trouble understanding the reasoning behind the various algorithms and the run-times of the new ones. They also had trouble with the merge sort algorithm, and understanding the difference between quick and slow sort.","In this lecture, the students mostly had trouble understanding the reasoning behind the various algorithms and the run-times of the new ones. They also had trouble with the merge sort algorithm, and understanding the difference between quick and slow sort.","In this lecture, the students mostly had trouble understanding the reasoning behind the various algorithms and the run-times of the new ones. They also had trouble with the merge sort algorithm, and finding a good example of it."
"Nothing that I can think of right now . I think question of the days could be worded more clearly . how to actually write the code for nodes was kind of confusing but is a concept we will go over more in the next lecture . the authors code of resizable arrays can be confusing to read at times Implementation of nodes in a linked list I ca n't think of anything that was not clear to me from class today . Resizable Array Bags I never fully understood how to utilize linked lists in my coding . Nothing in particular Reasoning for a class within a class was a bit rushed at the end how to double an array use of an inner node class for the linked list Scenarios where arrays would be better to use than linked lists The implementation of nodes and traversing a list . I think we are covering more of this later . Implementation if linked lists and internal classes . I assume that will be gone over more later though . The QOTD about the normal case I 'm not sure how to instantiate or even traverse such a linked list , or what would even be the use of a circular linked list how can the array be implemented into the bag structure ? in what situations it is more beneficial to use a bag or a linked list . I was unsure if you could access a single node in the linked list without going through the entire list . Similarities/differences of linked lists and bags Nothing was too confusing Definitely just what a LinkedList is useful for and how exactly the two nodes are stored together . How nodes are stored and referenced within a Bag nodes and inner classes Contiguous Memory Structures It seems like well dig into implementation in the next class so Ill leave that for then . Everything was explained well . We did n't get to the information involved in the last question of the day . I hope we cover that next time . @extractive","Many students were confused about the implementation of linked lists , especially how to create and use node classes . Others were unsure when it would be better to use a linked list instead of another data structure . A few others were confused by resizing arrays .","['linked list', 'entire list', 'node class', 'single node', 'bag structure']",Most of the students found the implementation of a linked list and the use of a bag interesting. Some also found the reasoning for a class within a linked lists interesting. A few students also found resizable arrays and inner classes confusing.,"Most of the students found the implementation of a linked list and the use of a bag to be the most challenging part of this lecture. They also struggled with the reasoning behind a class within a class, and the differences between linked lists and arrays. A few students also had trouble with the implementation if an inner class.","In this lecture, the students mostly found the implementation of a linked list and a bag confusing. They also struggled with the reasoning behind a class within a class and the use of an array.",Most of the students found the implementation of a linked list and a bag confusing. They also found the reasoning for a class within a class and the use of an inner class confusing. Some students also had trouble with resizable arrays and traversing a list.,"Most of the students found the implementation of a linked list and the use of a bag interesting. They also were interested in the differences between the two types of lists, the reasoning behind a class within a class, and how to use an array."
"Is there an easier way to remove nodes when a node has 2 children ? the code for removing a node with more than one child the delete method for an inner node was a little unclear Quiz2 how do you Fergie ab nor how delete works Add -LRB- -RRB- for BST I think the examples on the board were confusing and could be put in the PowerPoint to be more easily understood . Removing from a binary search tree Run time analysis add and remove Why did I stay up so late last night How we decide and how to remove a node with two children . How binary search trees implement various methods It was not confusing The implementation of some of the methods like add and remove . The explanation was fine , but the code was pretty hard to examine . The interface used to navigate a bst Iterative implementations of BST methods @extractive",The most popular answer by far was removing nodes w / 2 children from a BST . Some other answers include implementing various BST methods -LRB- esp . node addition/removal -RRB- and runtime analysis .,"['binary search', 'binary search tree']","Most of the students found the implementation of the binary search tree methods and the delete method confusing. Some students also had trouble with add and remove, and the binary tree interface.","Most of the students had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also had trouble understanding the implementation of BST methods.","In this lecture students mostly had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also had trouble understanding the implementation of BST methods.","In this lecture, students mostly had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also struggled with the implementation of BST methods, and the quiz.","In this lecture students mostly had trouble with adding and removing a node from a binary search tree, and deleting a node with more than one child. Some students also had trouble running time analysis and understanding the implementation of BST methods."
"why can the bag not be changed ? How to resize arrays when they are full I would like to hear more about how runtime speed can change depending on implementation . I thought physical vs. logical size was confusing when it was first brought up , but equating them with familiar coding constructs -LRB- counter variable and array length -RRB- helped my understanding I was confused why we needed to use an array rather than an arraylist for the bag . Nothing Implementing bag I think the PowerPoint notes need to be in more detail with more examples given in class . I still needed more explanation on the differences between bags and array lists . Nothing The connection between ADTs and interfaces/classes remove methods Keeping track of ` logical size ' seems to be a point of lots of errors . I feel like it is safer to use a for loop to detect non-null values although less efficient . The bag compared to other data structures The purpose of using a bag or what we 'd use a bag for benefits of using an array over ArrayList Im a bit confused about what all the moving parts are now . The book introduces adts , interfaces , a presumed class that uses it and a class that client programmer as well as user are using . Id like to see a diagram of all the classes etc. where is the program running from etc. . Generics syntax is still slightly confusing . When the convoluted syntax is used and not used I 'm still not sure off the top of my head I did not find anything especially confusing today . Dr. Ramirez went very slow and explained everything well . nothing None @extractive",Most students had trouble with the implementation of the bag . Some found array vs arraylist as confusing . Others had issues with logical size and generics syntax .,"['convoluted syntax', 'data structure', 'book introduces']","Most students found the concepts of the bag, the interface, and the logical size of the array confusing. Some also had trouble with the implementation of the interface and the class.","Most students had trouble with the concepts related to the bag, the interface, and the logical size of an array. Some students also had trouble understanding the difference between an array and an arraylist, and how to use them. A few students had no issues.","In this lecture students mostly had trouble with the implementation of the bag. They also struggled with the connection between ADTs and interfaces/classes, and the logical size of an array. Some students also had trouble understanding the for loop and how to resize arrays.","In this lecture, the students mostly had trouble with the implementation of the bag. They also had trouble understanding the connection between ADTs and interfaces/classes, and the difference between physical and logical size.","In this lecture, the students mostly had trouble with the implementation of the bag. They also struggled with the connection between ADTs and interfaces/classes, and the logical size of an array."
"Are there more efficient methods to use other than iterators ? how the efficiency of iterating through LLists can be increased it may have been helpful to have more detail about other ways we can implement the Iterative interface Iterators implementing iterators for different data structures how the curr pointer is encapsulated the code behind the iterator I thought the explanation for run time were confusing and should have more time spent on them . The difference between internal and external , since we did n't really cover when we 'd ever use an internal iterator . Implementation details of iteration nothing I understood everything today I was n't sure exactly what getEntry -LRB- i -RRB- was least efficient in ? For the iterator interface , I thought it was supposed to be better -LRB- since it did n't need to start at the beginning -RRB- ? But then , there 's another one that always needs to start in the beginning ? Is that one arrays ? Perhaps it was a lot to take in at once ... especially now that I need to apply it to all the different kinds of lists . LList , AList , with and without the iterator ... I 'm not sure if that 's all I need to worry about ? None Some of the code in the handouts Some of the implementation of iterators . I 'm just not sure I could do it yet . Why quick sort is so much faster than merge sort The implementation of Iterators and why we would need more than 1 @extractive",Most of the students found implementing iterators and efficiency of iterators as confusing . Some others found difference between internal and external iterators as confusing . A few had a question ` Why quick sort is faster than merge sort ? ',"['data structure', 'quick sort', 'run time', 'merge sort']","Most students found the implementation of iterators and the difference between internal and external iterators confusing. Some also had trouble with the efficiency of LLists, and the implementation details of the iterative interface.","Most of the students had trouble with the implementation of iterators, especially the implementation details of the LRB-i- and -RRB- interfaces. Some students also had trouble understanding the difference between internal and external iterators. A few students had some trouble with LLists, and the quick sort and merge sort methods.","In this lecture, students mostly had trouble with the implementation of iterators. They also had trouble understanding the difference between internal and external iterators, and the efficiency of LLists.","In this lecture, students mostly found the implementation of iterators interesting. They also were interested in the efficiency of LLists, the difference between internal and external iterators, and the quick sort and merge sort.","In this lecture, students mostly found the implementation of iterators interesting. They also were interested in the efficiency of LLists, the difference between internal and external iterators, and the quick sort and merge sort."
"All was clear specific implementations of circular linked lists and double linked lists would have helped visualize them better I did n't quite understand the purpose of using a vector . I am still iffy about the differences between LList and AList . Vectors the vector class that we went over Indices starting at 1 or 0 in linked list and when to use which How multi-threading works with java -LRB- synchronized vs. asynchronized -RRB- . None . Everything made sense synchronization of vector How to remove certain parts , and the llist compared to the a list What is the run time difference between sorting methods ? -LRB- Selection , Insertion , etc. -RRB- Nothing of note Needed a bit more time for QOTD Nothing Does the direction that you shift data to add/remove data matter ? Vectors and if they are ever useful over other forms of data structures I have heard of threads before , and both then and now they seem a little bit intimidating . I understand that they 're kind of outside the scope of the course , but they do seem very important nothing I thought the lecture was straightforward and clear , since you talked about things we already knew and added onto them . For example , we are already supposed to know how arrays and ArrayLists work , so adding to the end and in the front is something that should make sense to us -LRB- in front shifts left , and the end is less bothersome -RRB- . I think that the way the questions of the days were phrased was a bit confusing . shifting in a linked list special cases of adts Threads and what they are How the slides were n't all up for how far we went in lecture today I did n't learn any runtime analysis in 401 , so WHY binary search is log2 -LRB- N -RRB- I 'm not entirely sure Nothing confused me today . @extractive",Most of the students found vectors and threads as confusing topics . Some others marked Llist vs Alist and shifting in linked lists as confusing .,"['vector class', 'linked list', 'data structure', 'specific implementation', 'runtime analysis', 'sorting method', 'data matter', 'run time', 'binary search']","Most of the students found nothing confusing. Some students had trouble with the concepts of vectors, the differences between LList and AList, and the synchronization of the two. A few students also had trouble understanding the runtime analysis of the linked list, and how to use the threads in java.","Most of the students found nothing confusing. Some didn't fully understand the purpose of a vector, and the differences between LList and AList. A few students also had trouble with the runtime analysis of a linked list, and threading.","In this lecture, the students mostly had trouble understanding the differences between LList and AList, and how to use them. They also had some trouble with threads and synchronization.","In this lecture, the students mostly had trouble understanding the differences between LList and AList, and how to use them. They also had trouble with synchronization of vectors and multi-threading.","In this lecture, the students mostly had trouble understanding the differences between LList and AList, and how to use them. They also had trouble with synchronization of vectors, and the runtime analysis of a linked list."
"divide and conquer Recursion being applied to things we already have looked at and comparing how it affects the iterations . Also divide and conquer making recursion have less iterations is interesting . it will be more interesting to compare run-times 1 vs 2 recursive calls in a recursive method I 've never heard of divide and conquer before ! Divide and Conquer recustion Seeing how much more efficient the divide and conquer power method was versus the original method why sequential search through recursion is slower than binary search through recursion efficiency of divide and conquer The number of multiplications that each method of recursion yields How dividing and conquering works recursion with bubble sort concepts The divide and conquer for X ^ N and its efficiency Divide and Conquer method Divide in conquer as an efficient way to recurse I thought it was interesting finding actual cases of recursion being the most efficient method RECURSION :D I found the visuals and accompanying drawings the most interesting . The recursive case for the power function The differentiation between -LRB- x ^ / -LRB- n/2 -RRB- -RRB- ^ 2 and multiplying -LRB- x ^ -LRB- n/2 -RRB- -RRB- * -LRB- x ^ -LRB- n/2 -RRB- -RRB- was pretty interesting today . binary search in recursion Recursion via divide and conquer Divide and Conquer The idea of ` dividing and conquering , ' and it 's runtime comparison to general recursive methods @extractive","Most students enjoyed learning about the divide and conquer method in this lecture . Many mentioned specifically that it was interesting it could be used to improve efficiency . Some other students are still enjoying learning about recursion in general , especially recursive methods .","['sequential search', 'original method', 'power method', 'recursive method', 'power function', 'binary search']","Most students found the divide and conquer method interesting. They also found recursion, the power function, and the number of multiplications that each method of recursion yields interesting.","Most students found recursion and the divide and conquer method interesting. They also found binary search through recursion, the power function, and the number of multiplications that each method of recursion yields interesting.","In this lecture, students enjoyed learning about the efficiency of recursion, the power function, and dividing and conquering. They also enjoyed comparing run-times of various recursive methods, and the number of iterations in a recursive method.","In this lecture, students were interested in the efficiency of the divide and conquer method, recursion, and the power function. They also found binary search through recursion and the number of multiplications that each method of recursion yields interesting.","In this lecture, students were interested in the efficiency of the divide and conquer method, recursion, and the power function. They also found binary search through recursion and the number of multiplications that each method of recursion yields interesting."
"Are there more efficient methods to use other than iterators ? how the efficiency of iterating through LLists can be increased it may have been helpful to have more detail about other ways we can implement the Iterative interface Iterators implementing iterators for different data structures how the curr pointer is encapsulated the code behind the iterator I thought the explanation for run time were confusing and should have more time spent on them . The difference between internal and external , since we did n't really cover when we 'd ever use an internal iterator . Implementation details of iteration nothing I understood everything today I was n't sure exactly what getEntry -LRB- i -RRB- was least efficient in ? For the iterator interface , I thought it was supposed to be better -LRB- since it did n't need to start at the beginning -RRB- ? But then , there 's another one that always needs to start in the beginning ? Is that one arrays ? Perhaps it was a lot to take in at once ... especially now that I need to apply it to all the different kinds of lists . LList , AList , with and without the iterator ... I 'm not sure if that 's all I need to worry about ? None Some of the code in the handouts Some of the implementation of iterators . I 'm just not sure I could do it yet . Why quick sort is so much faster than merge sort The implementation of Iterators and why we would need more than 1 @extractive","Again , a vast majority of students responded w / iterators , specifically the implementation and how their efficiency can be improved . Other students mentioned struggling w / runtime evaluations and the difference between internal and external iterators .","['data structure', 'quick sort', 'run time', 'merge sort']","Most students found the implementation of iterators and the difference between internal and external iterators confusing. Some also had trouble with the efficiency of LLists, and the implementation details of the iterative interface.","Most of the students had trouble with the implementation of iterators, especially the implementation details of the LRB-i- and -RRB- interfaces. Some students also had trouble understanding the difference between internal and external iterators. A few students had some trouble with LLists, and the quick sort and merge sort methods.","In this lecture, students mostly had trouble with the implementation of iterators. They also had trouble understanding the difference between internal and external iterators, and the efficiency of LLists.","In this lecture, students mostly found the implementation of iterators interesting. They also were interested in the efficiency of LLists, the difference between internal and external iterators, and the quick sort and merge sort.","In this lecture, students mostly found the implementation of iterators interesting. They also were interested in the efficiency of LLists, the difference between internal and external iterators, and the quick sort and merge sort."
"Some of the math None There was n't really anything muddy about today 's lecture that I can think of . I feel like we did n't really learn what the O value actually IS or what the word itself means , just that it is used for calculating the run time Figuring out the function for the actual run time . the additem example doubling the array time analysis How to modify things to increase efficiency anortized time with the resizable array The ordering Just more practice examples on calculating runtimes Some of the derivations of the functions we are using How N ^ k-1 Becomes big O notation Deriving the Big-O for binary search What is the best way to calculate run-time for algorithms ? the math-y part was a bit confusing The determination of how many iterations something needs is still a little fuzzy When to use empirical over asymptotic I was n't exactly understanding where the numbers were coming from -LRB- N +1 or N and all that -RRB- . Though , when we did get them , I understood what to do with them . Maybe it would help to have some more practice problems . I think more visuals might be needed to explain the concept . amortized time , where we increase the array by 1 was very confusing . I think I missed something you said and then was confused for the duration of the explanation . Discussing amortized time n log n Determining the key instruction and how to create functions for these key instructions in terms of 'N' How calculations were ` simplified , ' and also if we could start getting out of class on time , that would be great , because I really need a seat in my next class . Class running over a few minutes more every day is starting to affect me more and more Algorithms and Complexity Creating the more complex formulas Nothing specific . Runtime analysis is new to me though , so it 'll take some time to be entirely absorbed . I did n't realize the factoring really mattered . I do n't think I have that good of an understanding after the questions of the day . I need to read the book . @extractive",Very diverse confusions in this lecture . Very few students had no specific confusions . Most of the confusion centered on the math behind calculating runtimes using Big O notation . Some students were confused by the idea of amortized time .,"['amortized time', 'run time', 'actual run time', 'binary search']","Most of the students found the concepts confusing. They also struggled with the derivations of the algorithms and the computations, and the use of the big-O notation. Some students also had trouble with the amortized time, the order of the functions, and determining the run-time.","Most of the students had trouble with the concepts related to run-time, the derivations of the functions, and the amortized time. Some students also had trouble understanding the Big-O notation.","In this lecture, the students mostly had trouble with the concepts of the run-time, the derivations of the functions, and the amortized time. They also had trouble understanding the Big-O notation and understanding how to use it.","In this lecture, the students mostly had trouble understanding the concepts related to run-time, the derivations of the functions, and the use of the big-O notation. They also had trouble with the amortized time, and modifying the function to increase efficiency.","In this lecture, the students mostly had trouble with the concepts of the run-time, the derivations of the functions, and determining the key instructions for the algorithm. They also struggled with the amortized time and the Big-O notation."
"some realistic applications for binary trees at their introduction would have helped visualize them Why we didnt learn iterators at the beginning of the term how to actually code the trees trees mathematical analysis minimum size of a binary tree How to iterate through a tree Exact implementation of trees None Iterators still are a bit confusing . Maybe walking through the example one more time would be helpful . I understood everything I 'm not sure why we would need a tree or how it could be implemented Can trees be connected to each other ? Iterators are generally still confusing me . How to set them up and when they are necessary . how to actually set up nodes with multiple references I 'm going to explain what I learned . Iterators/Iterables work together ; Iterable can only be used with Iterators to do for each loop like tasks . Tree structures have parent , interior , and leaf types within the structure ; it also iterates with recursive backtracking , unlike linear structures . If any of this is wrong , perhaps that 's what could be elaborated on . How efficient is it to get around in a binary tree ? If I wanted to look for a certain value , I feel like it would take much longer to get to than a linked list , or other data structure would . I do not think I had enough time for the second clicker question . There were too many options ... it was hard to pick based upon the time provided . I like it when you give a maximum of four options to pick from . That is less stressful . Uhh , probably how to evaluate binary trees , having to go up and down constantly . recursive definition of trees N/a today What those uses are exactly I would be interested in knowing more about . Nothing @extractive",Most students found implementation of trees and iterators as confusing . Some of them have questions about efficiency and recursive definition of trees .,"['linked list', 'binary tree', 'data structure', 'recursive definition']","Most students found the binary tree and iterators confusing. They also struggled with the recursive definition of trees, and the application of the trees. Some students also had trouble with the use of iterators.","In this lecture, the students mostly found binary trees and iterators confusing. They also struggled with the recursive definition of trees, and how to set them up. Some students also had trouble with the use of iterators, and the application of the trees.","In this lecture, students mostly had trouble with the implementation of binary trees, iterators, and the recursive definition of trees. Some students also had trouble understanding how to set up nodes and how to iterate through a tree.","In this lecture, students mostly had trouble with the implementation of binary trees, iterators, and the recursive definition of trees. Some students also had trouble understanding how to set up nodes with multiple references and how to iterate through a tree.","In this lecture, students mostly had trouble with binary trees, iterators, and the recursive definition of trees. Some students also had trouble understanding the use of iterators and how to set them up."
"solving the 8 Queens problem was a really fun way to explore more complex recursion The 8 queens problem I thought it was interesting to learn about the 8 queens problem ! 8 Queens 8 Queen Problem The 8 queens problem the idea of how to solve the 8 queens problem The 8 queens recursion , and how you need to backtrack many times to do so . Also , how many recursions you had to do . 8 queens problem recursion is useful ! Solving the N Queens -LRB- or 8 queens -RRB- problem recursively . Backtracking I thought what was interesting was the idea of tail recursion and that it is possible to solve one problem many different ways 8 Queens The Queens problem and how to find the solution using programs recursion is easier to read Recursion and Iteration Recursion for backtracking seems like an entry point into machine learning , something I 've been interested in . I found the examples the most interesting , especially the chess example . The trace was so interesting !! I never would 've thought to solve the problem like that but the solution made perfect sense Definitely backtracking solutions , especially with the example of the 8 Queens . 8 queens 8 Queens Problem 8 Queens Problem The chess example Professor Ramirez 's enthusiasm , as always , and the concept of backtracking as a programming construct . Backtracking is a way to solve complex problems such as mazes and logic puzzles . A backtracking program proceeds as far as it can go , making decisions along the way . If the program ca n't go any further and it is not at the end , it takes a step back and makes a different decision from before . @extractive","Such an overwhelming majority of the students responded with the 8 queens problem that there were really only 4 unique answers to this poll . Besides the chess example , some students mentioned learning about backtracking and more complex recursion .","['machine learning', 'perfect sense', 'tail recursion', 'programming construct']","Most students found the 8 queens problem interesting, as well as the examples used to solve it. They also found recursion and the backtracking problem interesting.","Most students found the 8 queens problem interesting, as well as the examples used to solve the problem. Some students also found recursion and the backtracking examples interesting.","In this lecture, students enjoyed learning about the 8 queens problem, backtracking, and recursion. They also found the example of the chess example interesting.","In this lecture, students enjoyed learning about the 8 queens problem, the concept of backtracking, and recursion. They also enjoyed solving the N-Queens problem, and the examples given by Professor Ramirez.","In this lecture, students enjoyed learning about the 8 queens problem, the concept of backtracking, and recursion. They also enjoyed solving the N-Queens problem, and the examples given by Professor Ramirez."
"knowing exactly how we will implement analysis on different data structures and operations in everyday things Math for resizing an array by 2 I am still confused about some of the differences between AList and LList . Recursion Why we were going over the 0 -LRB- n -RRB- or 1 . I did n't understand what that was used for Big O notation when adding and removing nodes in specific ADT 's amortized time of add to arraybag The different run times ? Amortized times calculations N vs. i when we are looking at big O the math Some of the math Some of the math ... specifically when to round . I get how -LRB- n +1 -RRB- goes to n as n - > infinity but it just bugs me to drop out terms like that Recursion , and its ramifications on efficiency what amortized run time actually means finding the big O Asymptotic vs. Amortized , why use one over the other ? I sometimes do n't understand where all the numbers come from to even calculate the Big O out o the equation . Even thought it seemed simple enough on the board -LRB- 1 +2 +3 ... + N = N -LRB- N +1 -RRB- / 2 -RRB- , that type of thing does n't come naturally to me and I feel like I would need more practice . The logic behind getting the big O from different methods in the list interface and the bag interface confused me . Some of the math amortized time The summation When we need to look at amortized cost and when we need to simply look at the asymptotic analysis I was n't confused but I do realize that I really need to practice the math of this . I hope there are examples in the textbook . @extractive","Most students found Big O notation and amortized time as confusing . Some of the students had problems with understanding the math done during calculation , recursion and differences between amortized time and asymptotic time .","['asymptotic analysis', 'list interface', 'amortized time', 'data structure', 'amortized cost', 'run time', 'removing node']","Most of the students had trouble with the math related to the Big O, especially the amortized time of the computation. Some of the others had trouble understanding the differences between AList and LList, and the asymptotic and the sum of the various methods in the list interface.","Most of the students had trouble with the amortized time calculations, and the difference between AList and LList. Some students also had trouble understanding the recursion and the sum/difference between the two methods.","Most of the students had trouble with the amortized time of an array, and the difference between AList and LList. Some students also had trouble understanding the asymptotic analysis and the recursion in general.","In this lecture, the students mostly had trouble with the amortized time of an array and the difference between AList and LList. They also had some trouble with recursion and the sum/difference between the two methods.","In this lecture, the students mostly had trouble with the amortized time, the asymptotic analysis, and the LRB- n -RRB- notation. Some students also had trouble understanding the differences between AList and LList."
"All was clear specific implementations of circular linked lists and double linked lists would have helped visualize them better I did n't quite understand the purpose of using a vector . I am still iffy about the differences between LList and AList . Vectors the vector class that we went over Indices starting at 1 or 0 in linked list and when to use which How multi-threading works with java -LRB- synchronized vs. asynchronized -RRB- . None . Everything made sense synchronization of vector How to remove certain parts , and the llist compared to the a list What is the run time difference between sorting methods ? -LRB- Selection , Insertion , etc. -RRB- Nothing of note Needed a bit more time for QOTD Nothing Does the direction that you shift data to add/remove data matter ? Vectors and if they are ever useful over other forms of data structures I have heard of threads before , and both then and now they seem a little bit intimidating . I understand that they 're kind of outside the scope of the course , but they do seem very important nothing I thought the lecture was straightforward and clear , since you talked about things we already knew and added onto them . For example , we are already supposed to know how arrays and ArrayLists work , so adding to the end and in the front is something that should make sense to us -LRB- in front shifts left , and the end is less bothersome -RRB- . I think that the way the questions of the days were phrased was a bit confusing . shifting in a linked list special cases of adts Threads and what they are How the slides were n't all up for how far we went in lecture today I did n't learn any runtime analysis in 401 , so WHY binary search is log2 -LRB- N -RRB- I 'm not entirely sure Nothing confused me today . @extractive","Again here , the answers were highly varied . Many students were confused about what vectors could be used for . Threads came up again , as something that students were confused and intimidated by . Other confusions centered on more advanced list topics , such as the difference between Llists and Alists , and how shifting in lists works .","['vector class', 'linked list', 'data structure', 'specific implementation', 'runtime analysis', 'sorting method', 'data matter', 'run time', 'binary search']","Most of the students found nothing confusing. Some students had trouble with the concepts of vectors, the differences between LList and AList, and the synchronization of the two. A few students also had trouble understanding the runtime analysis of the linked list, and how to use the threads in java.","Most of the students found nothing confusing. Some didn't fully understand the purpose of a vector, and the differences between LList and AList. A few students also had trouble with the runtime analysis of a linked list, and threading.","In this lecture, the students mostly had trouble understanding the differences between LList and AList, and how to use them. They also had some trouble with threads and synchronization.","In this lecture, the students mostly had trouble understanding the differences between LList and AList, and how to use them. They also had trouble with synchronization of vectors and multi-threading.","In this lecture, the students mostly had trouble understanding the differences between LList and AList, and how to use them. They also had trouble with synchronization of vectors, and the runtime analysis of a linked list."
"using parameterized types with object oriented nodes Nothing i can think of contains In what situations do we need to pick linked over a standard array I was n't fully sure how to utilize these bags in code How is a List different from an ArrayList ? What is it useful for ? why delete the first entry in the linked bag instead of just moving the pointers from the node before the deleted node to the node after How to remove the nodes best ? Nothing Very clear lecture . No problems . Specific implementation of methods to modify linked bags None I feel that inner classes are hard to conceptualize . I would much rather call a method on an object such as myNode.add -LRB- newNode -RRB- . I feel like this is frowned upon though . How to add an element to the middle of a linked list effectively . Does removing an item from the bag start from beginning or end ? How to add nodes and make them connect to one another . I got a little tripped up on the access the outer class has to the inner , because It seems odd that the only place a node can be instantiated is within the Node class itself Advantages and disadvantages of all structures discussed so far I never fully understood if the linked list had a ` size . ' I know we can insert new nodes at the beginning of the list , but is there ever a size for the entire list ? Also , can linked lists ever be used for order-specific problems because of the way the references are removed and rearranged ? Also , is there an already established Node class or we need to create one each time that is designed specifically for our uses ? The question of the day needed to be more clearly explained . I also would like more time to think about the question . Nodes as separate classes linked list vs linked bags Implementations of linked bag How all the pieces and different classes work together What would be the use of defining a class Node that was not within another LinkedList class ? The last question of the day I thought I understood but I actually answered incorrectly . I 'd like to go over that one at the beginning of next class . There was a decent amount of us that got it wrong I feel . @extractive","The students had pretty diverse confusions from this lecture . Many were confused by the specifics of adding/removing nodes from lists , and what effects modification may have on ordering . Some seemed to have a difficult time understanding the inner node class , and how it worked with the outer class . Several students were curious about the use cases of these data structures . Fewer students had QOTD confusions , or none .","['linked list', 'entire list', 'outer class', 'standard array', 'decent amount']","Most of the students had trouble with the concepts of linked lists, linked bags, and the Node class. Some students also had trouble understanding the differences between the two types of classes and how to use them in a given situation.","Most of the students had trouble understanding the differences between linked lists and linked bags, as well as how to add and remove nodes from a linked list. Some students also had trouble with the Node class and the inner class. A few students had no issues.","In this lecture, the students mostly had trouble understanding the differences between linked lists and linked bags. They also had trouble with the Node class and its implementation. In addition, a few students had issues with parameterized types and the inner class.","In this lecture, the students mostly had trouble understanding the differences between linked lists and linked bags. They also had trouble with the Node class and its implementation. In addition, they had some trouble with parameterized types and the inner class.","In this lecture, students had trouble understanding the differences between a linked list and a linked bag. They also had trouble with object oriented classes and how to add and remove nodes."
"the tweaking of quicksort showed how we will probably be expected to think at an actual job and helped realize the importance of sorting in place , especially when looking at the default Java sorting algorithms -LRB- because of Java 's use of Objects -RRB- . Stable sorting if you always choose the median as the pivot , quicksort behaves like mergesort the optimizations for quick sort How inefficient quick sort can be if done improperly Effects of different pivot points in quick sort that changing how the pivot is chosen can change a sorted areay from the worst case to the best case The different runtimes for quick sort The idea that sorting in place is so important and speeds up sort times . Quick sort runtime I thought the notion of stability when it comes to sorting was interesting I thought the notion of stability when it comes to sorting was interesting mergesort I found it interesting to see which sorting algorithms java uses , as those are likely the most efficient for various circumstances . the TimSort because it is my name everything about quick sort and merge sort , there was so much We went more in depth to the specifics of MergeSort and QuickSort ; run-time , I especially remember . QuickSort is not stable in the way that it swaps identical values . The JDK does not use it for this reason . I always think learning about performance is cool ! Contrasting between the run times of QuickSort and MergeSort sorting Variations of QuickSort The idea that quicksort is generally faster than merge sort because of the latter ' overhead of not sorting in place Stability was interesting . I never considered this before . @extractive","The students continued to be interested by the discussion of quicksort and mergesort . In this lecture , they seemed to focus on the runtime efficiency comparison of the two , and how the choice of pivot can affect that . They also noted the concepts of stable sorts and in place sorts .","['actual job', 'sorting algorithm', 'quick sort', 'run time', 'merge sort']","In this lecture, students found the idea of sorting in place and the various runtimes for quick and merge sort interesting. They also found the differences between the two algorithms interesting.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also liked learning about how the various runtimes for quick sort affect sorting in general.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also found the idea of sorting in place interesting, as well as the different runtimes for quick sort.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also found the idea of sorting in place interesting, as well as the different runtimes for quick sort.","In this lecture, students enjoyed learning about the differences between QuickSort and MergeSort. They also found the idea of sorting in place interesting, as well as the different runtimes for quick sort."
"Ways to use the predefined ListInterface analyzing all of the special cases of linked lists and how they are handled as well as learning ` assert ' Keeping track of both the front and end of a linked list . I thought it was useful to hear more about the ` List ' class - I had never heard of that in 0401 . Learning how to remove nodes in a linked list I found the concepts of linked lists and going through example code rather interesting The topic of LinkedLists always intrigued me The various special cases when removing elements from a linkedlist special cases for linked list The different methods of removing and adding to the ADT . Implementation of linked lists How a LL and bag are different when it comes to implementation . Learning how to delete the first node of a linked list Assert LinkedLists can be implemented in many different ways depending on the application . How linked lists can be used when you need first in first out or last in first out . The flexibility of using lists I think learning how to apply a linked chain of nodes to a linked List was interesting , because it 's a new way of thinking about storing and arranging data and I can start to understand how a useful ADT like a List that is very powerful in Python is implemented and constructed linked lists and standard lists The visuals made to explain LinkedList . I thought it was interesting how deleting something can sometimes mean just deleting it view , or logical deletion . The whole thing is just very intuitive and normal cases seem very easy to handle . linked structures Removing nodes and special cases ' Adding/removing styles with lists and different benefits/drawbacks with adding and storing addresses as instance data to speed up operations while complicating methods Prof Ramirez 's sound effects Some of the implementation details regarding the LinkedList were more intuitive than I thought they 'd be Today we talked about linked list and some of the major differences between them and bags . We looked at remove and add methods . @extractive","Most students described certain aspects of lists , linked lists in particular . They described implementation details , such as the add and remove methods , and other ways to manage data in a list form . Some mentioned that there were certain special cases that should be accounted for . Two students were interested by the idea of the assert statement .","['linked list', 'instance data', 'linked chain']","In this lecture, students enjoyed learning about the various ways to use a linked list, the various special cases of removing and adding to a linkedlist, and the various methods of implementing the ADT. They also enjoyed learning how to use the ListInterface, and Assert.","In this lecture, students enjoyed learning about the different ways to implement a linked list, and the various special cases of removing and adding to the ADT. They also found the ` List'class interesting.","In this lecture, students enjoyed learning about the different ways to implement a linked list, and the various special cases of removing and adding to the ADT. They also found the ` List'class interesting.","In this lecture, students enjoyed learning about the different ways to implement a linked list, and the various special cases of removing and adding to the ADT. They also found the ` List'class and the ` Assert'method interesting.","In this lecture, students enjoyed learning about the different ways to use a linked list, the various special cases of a linkedlist, and the implementation details of the ADT. They also found the ` List'class interesting."
"iterators and their uses I found analyzing linked lists in regards to runtime to be interesting applying sorting algorithms to list ADTs makes them feel more significant Mergesortin a Llist iterators through a linked list iterators are good because they can be used for all different kinds of objects Today we learned about the iterator interface and how it could be used to make iterating through lists/arrays more efficient . I found the diagrams that were drawn on the board the most interesting . Iterators The concept of iterators was really interesting today , especially their usage . Internal vs. external version of iteration iterarors I was a bit preoccupied today but seeing merge sort and quick sort show the relative ordering concept . how typically iterating through a linked list can be very inefficient The implementation of iterators Iterators and their effectiveness How iterators can be used . quick sort and merge sort The idea of being able to iterate through a lot of different data structures @extractive",Not much variation in these responses ; almost all students said they enjoyed learning about iterators . A few other students mentioned applying quick and merge sort to a linked list .,"['external version', 'linked list', 'sorting algorithm', 'data structure', 'quick sort', 'merge sort']","In this lecture students found iterators and their use interesting. They also found the merge sort and quick sort interesting. Last, they found the implementation of iterators interesting.","In this lecture, students found iterators and their uses interesting. They also found merging lists and quick sort interesting. Last, they enjoyed learning about the difference between internal vs. external versions of iterators.","In this lecture, students found iterators and their use interesting. They also enjoyed learning about the differences between internal vs. external versions of iterators, and how they can be used to improve performance.","In this lecture, students found iterators and their use interesting. They also enjoyed learning about the differences between internal vs. external versions of iterators, and how they can be used to make iterating through a linked list more efficient.","In this lecture, students found iterators and their use interesting. They also enjoyed learning about the differences between internal vs. external versions of iterators, and how they can be used to make iterating through a linked list more efficient."
"implementing recursion I was interested in learning about the efficiency of several recursive methods that I learned about in 401 . Questions about the Assignment ADT 's and there times sequential search using recursion How recursive programs work in relation to the AR and RTS How ARs and Runtime stacks work Learning about how recursion is implemented , the Activation Record and the Runtime Stack AR and RTS We talked about recursion today . that recursion can actually be used in programs The simplicity recursion has to offer even when doing complex code I thought different cases of recursion were pretty interesting I thought different cases of recursion were pretty interesting recursion I already briefly learned about recursion last semester in CS 401 , so it 's good to revisit it now and learn more in depth about it . It 's even better for me since I 'm already vaguely familiar with it . I found the topic the most interesting . recursion How the runtime stack works The factorial recursion implementation Im intrigued about implementing recursion if its as awesome as Ramirez says it is . Recursion in general is extremely interesting . You learn about recursively defined functions in 441 , but I had a non-CS guy , so the programming aspects of it were n't really discussed . Recursive methods can be used for sequential searches @extractive","Almost every student responded with something relating to recursion . Some liked to see how it could be used in methods like sequential search , some enjoyed learning how the activation record and runtime stack make it possible , and others just enjoy the topic of recursion in general .","['runtime stack', 'sequential search', 'complex code', 'recursive method']","In this lecture students were interested in recursion, the implementation of recursive methods, the AR and RTS, and the runtime stack. They also found sequential searches and the Assignment ADT interesting.","In this lecture, students were interested in implementing recursion, learning about the AR and RTS, and the factorial recursion implementation. They also found sequential searches and the runtime stack interesting.","In this lecture students were interested in recursion, the implementation of recursive methods, and the AR and RTS. They also found sequential searches and the runtime stack interesting.","In this lecture students were interested in implementing recursion, learning about the AR and RTS, and the factorial recursion implementation. They also found sequential searches and the runtime stack interesting.","In this lecture students were interested in implementing recursion, learning about the AR and RTS, and the factorial recursion implementation. They also found sequential searches and the runtime stack interesting."
"Nothing was really confusing The question of the day was lengthy , and we were not given enough time to answer it . nothing in particular Special cases Nothing really too muddy - however , I would definitely suggest ignoring the textbook example and starting your class examples at index 0 instead of 1 . Even though it 's been clarified every time , I still might get confused looking at my notes later on towards the midterm . Not too much , just the idea of using these to build a string builder was not super clear . I understood all of the material taught today . The usefulness of asserts assert The reassigning of the nodes by skipping one ? I 'm still kind of confused about the difference between linked lists and Linked Lists Why does the author start at 1 and not 0 ? ! Implementation of linked list None I am having trouble keeping differences between linked lists , linked bags , bags , etc , seperate . I think what confused me most was the assert keyword , because I have n't really ever encountered that anywhere before . However , I think Professor Ramirez did a good job in explaining what it 's essential function was -LRB- I.e. . A logic check for implementers for pre and post conditions -RRB- nothing What are the specific names of each type of list . Is the author 's version of linked list -LRB- starting point = 1 -RRB- a predefined class in java ? What does LList do differently ? I 'm not really sure what the firstNode instance variable does . Is it basically just the pointer half or can it store data as well ? If we ever wanted to call the data of a lastNode would we reference L.length-1 or just the lastNode pointer ? removal of last item Handling special cases More special cases with list operations . I was pretty alright with everything today . Maybe a generalized explanation of the difference between a LinkedBag and LinkedList ? Everything was well explained today . I had no questions . @extractive","Most of the confusion from this lecture came from the implementation of linked lists . Specifically , several students mentioned the removal methods and the handling of special cases . Many others were unsure about how linked lists compared to other structures . Some students were also confused by the usefulness of the assert command , and others thought the beginning the indexing at 1 was confusing .","['predefined class', 'linked list', 'essential function', 'pointer half']","Most of the students had trouble with the difference between linked lists, linked bags, and linked lists. Some also had trouble understanding the difference in the assert keyword, and the implementation of the LRB-class. A few students had some trouble with LRB -RRB-, and nothing in particular.","Most of the students had trouble with the difference between linked lists, linked bags, and linked lists. Some students also had trouble understanding the assert keyword, and the special cases of each type of list.","Most of the students had trouble with the difference between linked lists, linked bags, and linked lists. Some students also had trouble understanding the assert keyword, and special cases with list operations.","In this lecture, students had trouble with the difference between linked lists, linked bags, and linked lists. They also had trouble understanding the use of the assert keyword, and special cases.","In this lecture, students mostly had trouble with the difference between linked lists and linked bags. They also had some issues with the assert keyword, and the implementation of linked lists."
"solving the 8 Queens problem was a really fun way to explore more complex recursion The 8 queens problem I thought it was interesting to learn about the 8 queens problem ! 8 Queens 8 Queen Problem The 8 queens problem the idea of how to solve the 8 queens problem The 8 queens recursion , and how you need to backtrack many times to do so . Also , how many recursions you had to do . 8 queens problem recursion is useful ! Solving the N Queens -LRB- or 8 queens -RRB- problem recursively . Backtracking I thought what was interesting was the idea of tail recursion and that it is possible to solve one problem many different ways 8 Queens The Queens problem and how to find the solution using programs recursion is easier to read Recursion and Iteration Recursion for backtracking seems like an entry point into machine learning , something I 've been interested in . I found the examples the most interesting , especially the chess example . The trace was so interesting !! I never would 've thought to solve the problem like that but the solution made perfect sense Definitely backtracking solutions , especially with the example of the 8 Queens . 8 queens 8 Queens Problem 8 Queens Problem The chess example Professor Ramirez 's enthusiasm , as always , and the concept of backtracking as a programming construct . Backtracking is a way to solve complex problems such as mazes and logic puzzles . A backtracking program proceeds as far as it can go , making decisions along the way . If the program ca n't go any further and it is not at the end , it takes a step back and makes a different decision from before . @extractive",The vast majority of students were interested by the solution of the 8 queens problem . Several were excited to finally be using recursion to solve more complex problems . They noted the newly discussed method of backtracking an a new way to solve the complex problem of the 8 queens .,"['machine learning', 'perfect sense', 'tail recursion', 'programming construct']","Most students found the 8 queens problem interesting, as well as the examples used to solve it. They also found recursion and the backtracking problem interesting.","Most students found the 8 queens problem interesting, as well as the examples used to solve the problem. Some students also found recursion and the backtracking examples interesting.","In this lecture, students enjoyed learning about the 8 queens problem, backtracking, and recursion. They also found the example of the chess example interesting.","In this lecture, students enjoyed learning about the 8 queens problem, the concept of backtracking, and recursion. They also enjoyed solving the N-Queens problem, and the examples given by Professor Ramirez.","In this lecture, students enjoyed learning about the 8 queens problem, the concept of backtracking, and recursion. They also enjoyed solving the N-Queens problem, and the examples given by Professor Ramirez."
"understanding what you are able to divide to speed up the run time nothing in particular Determining bug O of the functions could have used some more discussion I did n't fully understand some of the ` base cases ' Recursion How to call base case The math involved with determining a method effieciency the end of the lecture -LRB- second qotd -RRB- none How to implement the X ^ N = X ^ N/2 * X ^ N/2 , as it has two method calls in one line ? Why should we use a recursion instead of Math.pow -LRB- x , n -RRB- ? recursion with bubble sort implementation The divide and conquer of binary search How do you find and choose the indices ? how to use indices to divide the runtime The divide and conquer idea is a little foreign , and it seems like it might be difficult to establish what is the best way to do something none I thought that going through actual code was a little rushed and confusing . How to find the most efficient recursive case The special cases with reducing the exponent when it 's odd when n = 1 , but eventually I got it after some thought . -LRB- formula : x ^ n = x * -LRB- x ^ -LRB- n/2 -RRB- -RRB- -RRB- optimizing recursion Specifics of divide and conquer Maybe explain how the divide and conquer method works effectively with the power function , when squaring the n/2 exponent Being able to identify when divide and conquer might be more useful than typical recursion @extractive","Many students had specific confusions to certain aspects of recursion , though many were concerned with how to choose a technique for recursion that is efficient . It seemed like many were n't completely confident with divide and conquer , specifically mentioning that they were n't sure how to best perform the ` divide ' step . A couple students mentioned that they were confused by base cases .","['actual code', 'run time', 'power function', 'binary search']","Most students found the divide and conquer method to be the most efficient way to divide the runtime, and the recursion to be a helpful exercise. Some students also found the base case of the function to be helpful.",Most students found the divide and conquer method to be the most efficient way to divide the runtime. Some students also found recursion and the base case of the function interesting.,"In this lecture, the students mostly found the divide and conquer method to be the most efficient way to divide the runtime. They also found recursion and the base case to be helpful.","In this lecture, the students mostly found the divide and conquer method interesting. They also found recursion interesting, as well as the base case of the power function.","In this lecture, students mostly found the divide and conquer method to be the most efficient way to divide the runtime. They also had trouble with recursion and the base case."
"the dynamic bag I found the creation of the Bag to be the most interesting . Learning about bags was very interesting . Dr. Ramirez cleared up my understanding of how they should work . I was really interested in learning all about an entirely new data structure , the Bag . I 'm also noticing that as these classes get farther along , there is more focus on real world factors that determine strength of code like speed The bag concept was cool how basically acts like a bag in real life with its usefulness . Bags as a data type and how flexible they are . Discussing the Assignment 1 I found the examples and drawings the teacher drew on the whiteboard the most interesting . Abstraction , though seemingly intimidating is kind of just giving programmers a break right ? We 're given so many more abilities and operations without having to know exactly how to code that . That being said , while I understand the applications being explained to me , it 's hard to just manifest that on my own . Learning about resizing Bags dynamically The discussion of the underlying methods of ADTs such as bags was most interesting the implementation of an array bag Order does not matter when using a bag . It is important to keep all of the values in an array together . To do this , you should move an existing element into the vacant spot . Looking at ADT 's from both perspectives Information held in bags is not in any particular order different ways to implement the bag Thinking about a more general idea of coding with ADTs and starting to dig into data structures more specifically . Code examples of key concepts/methods is always helpful . I thought it was a good thing to go through the implementation of both the add -LRB- -RRB- and remove -LRB- -RRB- methods of the Bag ADT Today we were talking about a certain type of ADT called a bag . We talked about certain ways that we would implement the methods and certain special cases that we as programmers have to be aware of . If you were removing items from ADT bag , you can simply shift the bottom or last item and put it in the place where you we removed an item . This is because , in bags , order does not matter . Learning about managing arrays in a data structure The bag ADT and how it is implemented @extractive","The students were interested in the ADT Bag , and also its array implementation . Many recognized that it should be resizable , and that the underlying array organization should support that . Others saw that order does not matter in bags . Some thought the methods that the bag provides were interesting .","['data type', 'real life', 'data structure', 'existing element', 'real world', 'vacant spot']","In this lecture, students found the implementation of the Bag and its various methods interesting. They also found the general concepts of ADTs and the dynamic array interesting.","In this lecture, students found the implementation of the Bag and ADTs interesting. They also enjoyed learning about arrays and how they are used in general.",Most of the students found the implementation of ADTs interesting. They also enjoyed learning about the dynamic Bags and how to use them in a data structure. Some students also found the assignment interesting.,"In this lecture, students enjoyed learning about ADTs, the implementation of an array, and the dynamic bag. They also found the examples and drawings interesting.","In this lecture, students found the implementation of ADTs and the dynamic bag to be the most interesting part of the lecture. They also enjoyed learning about arrays in general and how to use them."
"when recursion is a better option than a loop I thought it was clear . You need these 3 things for recursion to work ... But I kind of did n't understand if it were flexible ? Like , are the recursive/base cases the only cases strictly allowed ? Also , it is like the first one in is the first one out type of deal for the output , right ? ? Using recursion while searching Using recursion while searching tracing recursion when should I use recursion over iteration ? Recursion I found the wording of the question of the day confusing . Nothing stacks The mindset involved in thinking about non-mathematic problems recursively is something I 'll have to get used to . nothing When to use recursion efficiently I can understand how you run up the stack but I get confused about coming back down with more complex examples . Id love to go over the trace from 401 's final . There was not any point that was too muddy from today . The sequential search recursive implementation when a recursive algorithm would be most efficient More examples on recursive programs Why use recursive calls ? Are n't loops the same ? Everything was explained well . Iterating through list recursively : I really wish you would n't rush to cram one more thing in to the end of a lecture . Usually you explain stuff really really well , but the stuff that you always race to cram in to the last three minutes of the lecture never makes sense because you are flying through it . I would rather you take questions or something and wait until next class to go over that concept at .5 the speed it was gone over it the last three minutes of this class . None @extractive","Almost all of the confusions were about recursion . Specifically , some were about when to use recursion instead of iteration , or how to use recursion to perform a search.Some students were also confused by stacks .","['sequential search', 'recursive algorithm']","Most students found recursion to be the most confusing concept of the day. They also had trouble with the examples given in class. Some students also had some trouble with tracing recursion, and the general concepts of the problem.","Most students found recursion to be the most interesting topic of the day. Some students also had trouble with sequential search, tracing recursion, and the last three minutes of class.","In this lecture, the students mostly had trouble with recursion. They also had some trouble with sequential search, tracing recursion, and the last three minutes of the lecture.","In this lecture, the students mostly had trouble with recursion. They also had some trouble with sequential search, tracing recursion, and the last three minutes of the lecture.","In this lecture, most students found recursion to be the most interesting topic of the day. Some students also had trouble with sequential search, tracing recursion, and the last three minutes of class."
"trees are the most interesting data structure so far , in my opinion . Recursively getting the height of a binary tree implementing trees in java to store data how to find the height of a binary tree recursively not much was interesting binary tree lengths Binary trees binary tree recursion Lecture felt a little long today though we got out earlier . Nothing struck me as particularly interesting . Binary Tree nodes The entire binary trees discussion Binary trees and how we can traverse them via recursion The height of a tree is found by calling max -LRB- hL , hR -RRB- +1 Recursive processing of binary trees @extractive",Most of the students found binary trees and finding the height through recursion as interesting . Some of them did n't find anything interesting in the lecture .,"['binary tree', 'data structure']",Most students found binary trees and recursion interesting. Some students also found the height of a binary tree interesting. A few students also mentioned using recursion and implementing trees in java.,"Most students found binary trees and recursion interesting. Some students also found the height of a binary tree interesting. A few students also mentioned the use of recursion and the length of a tree, and how to store data.","In this lecture students were interested in binary trees, recursion, and the height of a tree. Some students also found the length of a binary tree interesting, as well as implementing trees in java.","In this lecture students were interested in binary trees, recursion, and the height of a tree. Some students also found the length of a binary tree interesting.","In this lecture students were interested in binary trees, recursion, and the height of a tree. Some students also found the length of a binary tree interesting, as well as implementing trees in java."
"Nothing that I can think of right now . I think question of the days could be worded more clearly . how to actually write the code for nodes was kind of confusing but is a concept we will go over more in the next lecture . the authors code of resizable arrays can be confusing to read at times Implementation of nodes in a linked list I ca n't think of anything that was not clear to me from class today . Resizable Array Bags I never fully understood how to utilize linked lists in my coding . Nothing in particular Reasoning for a class within a class was a bit rushed at the end how to double an array use of an inner node class for the linked list Scenarios where arrays would be better to use than linked lists The implementation of nodes and traversing a list . I think we are covering more of this later . Implementation if linked lists and internal classes . I assume that will be gone over more later though . The QOTD about the normal case I 'm not sure how to instantiate or even traverse such a linked list , or what would even be the use of a circular linked list how can the array be implemented into the bag structure ? in what situations it is more beneficial to use a bag or a linked list . I was unsure if you could access a single node in the linked list without going through the entire list . Similarities/differences of linked lists and bags Nothing was too confusing Definitely just what a LinkedList is useful for and how exactly the two nodes are stored together . How nodes are stored and referenced within a Bag nodes and inner classes Contiguous Memory Structures It seems like well dig into implementation in the next class so Ill leave that for then . Everything was explained well . We did n't get to the information involved in the last question of the day . I hope we cover that next time . @extractive","Many students were curious about implementations of the linked nodes , but mentioned that it would probably be covered in the next class . It seemed like there were problems with the understanding of inner classes . Other students were unsure of when a linked list would be useful . Some mentioned that they wished there was more time to go over the information for the question of the day .","['linked list', 'entire list', 'node class', 'single node', 'bag structure']",Most of the students found the implementation of a linked list and the use of a bag interesting. Some also found the reasoning for a class within a linked lists interesting. A few students also found resizable arrays and inner classes confusing.,"Most of the students found the implementation of a linked list and the use of a bag to be the most challenging part of this lecture. They also struggled with the reasoning behind a class within a class, and the differences between linked lists and arrays. A few students also had trouble with the implementation if an inner class.","In this lecture, the students mostly found the implementation of a linked list and a bag confusing. They also struggled with the reasoning behind a class within a class and the use of an array.",Most of the students found the implementation of a linked list and a bag confusing. They also found the reasoning for a class within a class and the use of an inner class confusing. Some students also had trouble with resizable arrays and traversing a list.,"Most of the students found the implementation of a linked list and the use of a bag interesting. They also were interested in the differences between the two types of lists, the reasoning behind a class within a class, and how to use an array."
"InorderIterators using the stack and checking for equal amounts of parenthesis The comparison between binary search of an array and the operations of BSTs Uses of stacks stacks bst runtimes We elaborated on how the run-time stack works , which we only briefly touched on before in terms of recursion . I found the slides that have visuals as to what actually happens in binary trees most interesting . I am a visual learner , and this really helped . parentheses matching program example Probably the concept of stacks and how they 're used/created . BST The plate warming idea , represented by a stack Iterators Stack the use of the stack in the parentheses problem post order operations The runtime for searching a BST varies based on how balanced the tree is Stack applications and BST methods @extractive","Most of the students found stacks and BSTs as interesting . Some others liked parenthesis matching example , iterators and post order operations .","['matching program', 'binary tree', 'binary search']","In this lecture students enjoyed learning about the use of the run-time stack, the operations of BSTs, and the differences between binary search and iterators. They also enjoyed seeing the examples used in the program and seeing the visual representations of the concepts.","In this lecture, students were interested in the use of the run-time stack and BSTs, as well as the in-order operations of BSTs. They also found the parentheses problem and the iterators interesting.","In this lecture, students were interested in the use of the run-time stack and BSTs, as well as the in-order operations of BSTs. They also found the parentheses problem interesting.","In this lecture, students were interested in the use of the run-time stack, the operations of BSTs, and the parentheses problem. They also found the binary search of an array and iterators interesting.","In this lecture, students were interested in the use of the run-time stack and BSTs, as well as the in-order operations of BSTs. They also found the parentheses problem interesting."
"Packages were interesting , and how you can group together various classes and import them through the package BST 's the different ways to traverse the trees the funny sound effects that Ramirez made bst 's Binary Search Trees Binary search trees Tree traversal types The binary search tree , and why duplicates might be problematic I guess the different types of traversals for binary trees . Copying a tree Tree Transversing Binary trees Binary Search Trees are pretty cool . They show how trees can be useful . Nothing stood out today All the recursion in binary trees @extractive","Most of the students found Binary Search Trees and tree traversal as interesting . Some others liked packages , copying a tree and problems with duplicates .","['binary tree', 'binary search', 'binary search tree']",Most students found Binary Search Trees and Tree traversal interesting. They also found Recursion in Binary Trees and the various types of traversal useful.,"Most students found Binary Search Trees and Tree traversal interesting. Some students also found Recursion in Binary Trees interesting, and the various types of traversal in the package.","Most students found Binary Search Trees and Tree traversal interesting. They also found Recursion in Binary Trees interesting, as well as the different types of traversal.","Most students found Binary Search Trees and Tree traversal interesting. They also were interested in Recursion in Binary Trees, and the different types of traversal in BST.","Most of the students found Binary Search Trees and Tree traversal interesting. Some students also found Recursion in Binary Trees interesting, as well as the different types of traversal in BST."
"knowing exactly how we will implement analysis on different data structures and operations in everyday things Math for resizing an array by 2 I am still confused about some of the differences between AList and LList . Recursion Why we were going over the 0 -LRB- n -RRB- or 1 . I did n't understand what that was used for Big O notation when adding and removing nodes in specific ADT 's amortized time of add to arraybag The different run times ? Amortized times calculations N vs. i when we are looking at big O the math Some of the math Some of the math ... specifically when to round . I get how -LRB- n +1 -RRB- goes to n as n - > infinity but it just bugs me to drop out terms like that Recursion , and its ramifications on efficiency what amertized run time actually means finding the big O Asymptotic vs. Amortized , why use one over the other ? I sometimes do n't understand where all the numbers come from to even calculate the Big O out o the equation . Even thought it seemed simple enough on the board -LRB- 1 +2 +3 ... + N = N -LRB- N +1 -RRB- / 2 -RRB- , that type of thing does n't come naturally to me and I feel like I would need more practice . The logic behind getting the big O from different methods in the list interface and the bag interface confused me . Some of the math amortized time The summation When we need to look at amortized cost and when we need to simply look at the asymptotic analysis I was n't confused but I do realize that I really need to practice the math of this . I hope there are examples in the textbook . @extractive","The students seem to be having some trouble with the math , as well as their understanding of amortized analysis -LRB- esp . compared to asymptotic -RRB- . The math behind Big-O is the major problem with some noting their need to practice it to get the hang of it . A couple wondered how recursion would fit into all the analysis .","['asymptotic analysis', 'list interface', 'amortized time', 'data structure', 'amortized cost', 'run time', 'removing node']","Most of the students had trouble with the math of the Big O, especially the amortized time of the computation. Some of the others had trouble understanding the differences between AList and LList, and the asymptotic analysis. A few students also had trouble using the recursion interface and the bag interface.","Most of the students had trouble understanding the differences between AList and LList, the amortized time of an array, and the asymptotic analysis. A few students also had trouble with the recursion in the list interface.","Most of the students had trouble understanding the differences between AList and LList, the amortized time of an array, and the asymptotic analysis. A few students also had trouble with the recursion in the algorithm.","Most of the students had trouble understanding the differences between AList and LList, the amortized time of an array, and the asymptotic analysis. A few students also had trouble with the recursion in the list interface.","In this lecture, the students mostly had trouble understanding the differences between AList and LList, the amortized time of add to array and the asymptotic analysis. They also had trouble with the recursion in the list interface and the sum/difference calculation."
"unfortunately time ran out at the end before we really got to look at the implementation . The code for the 8 queens problem It would be great to hear more about how to evaluate efficiency of recursive methods . Iteration The importance of recursion given that iterative solutions are faster -LRB- besides recursive solutions being ` cooler ' -RRB- how to actually code the solution to the 8 queens problem How to implement backtracking recursion More examples of backtracking problems practical use for recursion other than fun puzzles ? backtracking implementation The diagonal algorithm for 8 queens Doing multiple recursive checks at once why is recursion useful ? The benefits of recursion keeping track of data when backtracking What 's the runtime of a recursive method ? I found the equations about recursion the most confusing and deciding whether something had a base case or not . I had missed the previous lecture due to the career fair so obviously some of the review was unclear Probably how to implement backtracking , though that 's probably because we ended up running out of time . recursive graphics Recursion and backtracking The binary recursive search code Nothing today When it would be appropriate to backtrack Nothing @extractive","The responses here were a bit more varied . Many students responded with implementing backtracking , especially the solution to the 8 queens problem . Several others asked why they might use recursion instead of iteration , while a few others are still struggling to evaluate the efficiency of recursive methods .","['keeping track', 'previous lecture', 'recursive method']","Most students found recursion and backtracking interesting. Some students also found iterative solutions to the 8 queens problem interesting. A few students also mentioned the benefits of recursion, and the efficiency of the algorithm.",Most students found recursion and backtracking interesting. Some also found iterative solutions and the diagonal algorithm for 8 queens interesting. A few students had trouble with the runtime of a recursive method.,In this lecture students mostly found recursion and backtracking interesting. They also found iterative solutions and the diagonal algorithm for the 8 queens problem interesting.,In this lecture students mostly found recursion and backtracking interesting. They also found iterative solutions and the diagonal algorithm for the 8 queens problem interesting.,In this lecture students mostly found recursion and backtracking interesting. They also found iterative solutions and the diagonal algorithm for the 8 queens problem interesting.
